`section.Procedures and Integration`
`p.
So far I have criticized paradigms which try to account for linguistic
meaning via concordance between linguistic and proppositional
structure.  The logical dimension to language is real, but
it is not neatly ordered in the syntax/semantics
interface.  My slogan is that `i.syntactic comppsition does not
recapitulate logical form`/.
`p`

`p.
I believe that a lot of linguistics and philosophies of
language obscure this point by virtue
of commitments to two reasonable theses: `i.one`/,
that logical form is an important (and often
the central) dimension of meaning, and
`i.two` that language is compositional.  But
while language expresses propositional content
%-- i.e., in many cases language `q.means` the
way that propositions `q.mean` %-- language
is not `i.compositional`/, in general,
the way that propositions are compositional.
So compositionality and logicality have to be
disentangled, and I contend linguistics and
philosophies of language have failed to do so.
Moreover, as I argued in Section 4,
I think this can be explained by the historical roots
of philosophy of language %-- and by extension
linguistics %-- in Analytic Philosophy,
which in turn has a specific history and
collaboration with formal logic.
`p`

`p.
This critique has two dimensions:
first, although a predicate structure, a predicative specificity, does indeed
permeate  states of affairs insofar as we engage them rationally, such
logical order is not modeled by language itself so much as by cognitive
pictures we develop via interpretive processes
%-- processes `i.triggered` by language details
but, I believe, to some not insubstantial degree pre- or extra-linguistic.
Moreover, second, insofar as we `i.can` develop formal models of
language, these are not going to be models of predicate structure
in any conventional sense.
`p`

`p.
Cognitive-interpretive processes may
have formal structure %-- structure which may even show a lot of overlap
with propositional forms %-- but these are not `i.linguistic` structures.
Insofar as language triggers but does not constitute interpretive
`q.scripts`/, the scripts themselves (i.e., conceptual prototypes and
perceptual schema we keep intellectually at hand, to interpret and
act constructively in all situations, linguistic and otherwise) are
not linguistic as such %-- and neither is any propositional order they
may simulate.  Language `i.does`/, however, structure the `i.integration`
of `i.multiple` interpretive scripts, so the structure of this
integration `i.is` linguistic structure `i.per se` %-- and formally
modeling such integration can be an interesting tactic for
formally modeling linguistic phenomena.  However,
we should not assume that such a formal model will resemble or
be reducible to formal logic in any useful way %-- formalization
does not automatically entail some kind of `i.de facto` isomorphism
to a system of logic (if not first-order then second-order, modal, etc.).
`p`

`p.
Instead, I want to focus in on branches of computer science and
mathematics (such as process algebra, which I have already referenced)
as part of our scientific background insofar as the `i.structural
integration` of diverse `q.processes` (computational processes
in a formal sense, but perhaps analogously
cognitive processes in a linguistic sense) can be technically represented.
`p`

`p.
In `q.truth-theoretic` semantics, artifacts of language
are intuitively pictured in terms of propositional structure.
The guiding intuition compares word meanings to logical predicates;
e.g. `i.John is married` is typically said when the speaker believes
that, in fact, the predicate `i.married` applies to the
speaker `i.John`/.  Switching to a more
`q.procedural` perspective involves intuiting word-meaning
more in terms of interpretive procedures than logical predicates.
The change in perspective may not yield substantially different
analyses in all cases, but I believe it does affect many cases.
`p`

`p.
Even a simple predicate like `q.married` reveals a spectrum of
not-entirely-logical cases in ordinary language: |+|

`sentenceList,
`sentenceItem; `swl -> --- -> John is married to a woman from his home country, but
he had to get the marriage legally recognized here. -> log ;;
`sentenceItem; `swl -> --- -> John married his boyfriend in Canada, but they
live in a state that does not recognize same-sex marriages. -> log ;;
`sentenceItem; `swl -> --- -> John has been married for five years, but in
many ways he's still a bachelor. -> log ;;
`sentenceItem; `swl -> --- -> Every married man needs a bachelor pad somewhere,
and wherever yours is, you need a mini-fridge. -> log ;;
`sentenceList`

|.|

We can make sense of these sentences because we do not conceptually
define lexemes like `i.married` or `i.bachelor` via exhaustive
logical rules, like `i.a bachelor is an unmarried man`/.  Instead we
have some combination of prototypical images %-- familiar
characteristics of bachelors, say, which even married men
can instantiate %-- and a conceptual framework recognizing
(and if needed distinguishing) the various legal, societal, and
dispositional aspects of being married.
`p`

`p.
Intuitionwise, then, we should look beyond potential logical
glosses on meanings %-- even when these are often accurate
%-- and theorizee semantics as the mapping of lexical
(as well as morphosyntactic phenomena) to interpretive scripts
and conceptual or perceptual/enactive schema %-- which
we can collectively designate, for sake of discussion, as
`q.cognitive procedures`/.
`p`

`p.
The truth-theoretic mapping of words to predicates
(and so phrasal and sentence units to propositional structures)
provides an obvious way to formalize linguistic structure by
borrowing the analogous structuration from
predicate complexes.  Substituting a procedural semantic model
allows a comparable formalization of linguistic structure
through theories exploring procedural integration,
for instance the interactions between computational procedures.
Analysis of `i.computational` produres can yield interesting
ideas for linguistic theories of `i.cognitive` procedures
%-- without endorsing a reductive metaphysics of
cognitive procedures as `q.nothing but` computational
procedures implemented in some sort of mental software.
`p`

`p.
I earlier used computing procedures roughly
sketched %-- like code which may open a file
(`ref<itm:file>;) %-- as loose metaphors for
cognitive processes; my point before
was that both cognitive and computational
processes can be hard to gloss logically
because they are often dealing
with incomplete logical information.
More seriously %-- because `i.incomplete`
logical information is not necessarily
outside of logic; there are logical systems which
can model information partiality in
systematic ways %-- processes which
occur in the midst of logically incomplete
spaces (in the context of message-passing,
function-routing, etc.) do not
nessarily `i.operate` logically.  That is,
local rules for message-passing or function-routing systems
do not seem to be (in their `q.native` semantics)
logical rules.  In the current context, I want
to consider in greater detail the interoperation
`i.between` computational procedures, to consider
how procedures form `q.networks` and whether this is a
useful analogy for cognitive/linguistic processes.
`p`

