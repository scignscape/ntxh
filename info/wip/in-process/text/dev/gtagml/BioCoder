
AddEdge Step
AddVertex Step
AddProperty Step
Aggregate Step
And Step
As Step
Barrier Step
By Step
Cap Step
Choose Step
Coalesce Step
Coin Step
ConnectedComponent Step
Constant Step
Count Step
CyclicPath Step
Dedup Step
Drop Step
ElementMap Step
Emit Step
Explain Step
Fold Step
From Step
Graph Step
Group Step
GroupCount Step
Has Step
Id Step
Identity Step
Index Step
Inject Step
IO Step
Is Step
Key Step
Label Step
Limit Step
Local Step
Loops Step
Match Step
Math Step
Max Step
Mean Step
Min Step
None Step
Not Step
Option Step
Optional Step
Or Step
Order Step
PageRank Step
Path Step
PeerPressure Step
Profile Step
Project Step
Program Step
Properties Step
PropertyMap Step
Range Step
Read Step
Repeat Step
Sack Step
Sample Step
Select Step
ShortestPath step
SimplePath Step
Skip Step
Subgraph Step
Sum Step
Tail Step
TimeLimit Step
To Step
Tree Step
Unfold Step
Union Step
Until Step
Value Step
ValueMap Step
Values Step
Vertex Steps
Where Step
With Step
Write Step

Is BioCoder currently being maintained?  At a minimum, we would like to include BioCoder in a suite of C++ tools for authors and publishers.  This could involve a fairly modest updating of the BioCoder code base, maybe supporting some Qt and C++14 features.  But we'd like to discuss extending BioCoder more substantially in certain directions.  Certainly we feel we should consult with BioCoder's original developers and current maintainers if we go in that direction.  We'd be happy to share some ideas with you and with any other developers who are involved with BioCoder if you could point us in the right direction.

Here anyhow are some things we've considered.  For an example which could probably be called "in silico," consider image-analysis, e.g. the Pandore project, a collection of image-processing "operators" (from the GREYC lab at the University of Caen).  These operators are C++ procedures that could be chained together in C++ code, but they are also compiled as separate executables that can be chained into workflows via batch scripts.  The Pandore documentation has numerous examples of analyses which are presented via web pages that show images after different processing steps, alongside batch/C++ code and text discussions -- vaguely like a Jupyter notebook.  We're not sure how those web pages are generated, but they seem similar in spirit to workflow descriptions generated by BioCoder, and surely BioCoder-like code could generate similar presentations.  But simultaneously the same code could actually run the workflow, since all the operators are C++ functions.  Perhaps the code could have a command-line flag which could be set or cleared to instruct methods to actually execute operators or, instead, emit documentation.

In short, consider a BioCoder-like library that could be included into Pandore.  Authors using that code could describe an image-processing workflow, which could both be executed and used to generate a descriptive presentation.  Suppose they're using LaTeX to compose their manuscript: running the workflow would result in image files populating folders where they could be included (as demo examples) within a publication, while running the code in presentation-generation mode could result in LaTeX files (maybe some special environment) that would be included in the main document -- something like a specially typeset inset schematically outlining the workflow.  We have a LaTeX generator library based on the TAGML markup language that could connect each of these components together.

This would be one case-study in the domain of image-analysis, but we can see analogous use-cases in other areas.  Potentially there could be multiple "BioCoder-like" libraries available to be loaded/invoked by something like a LaTeX generator (or an HTML generator) which serve double-purpose as a workflow-summary generator and a workflow execution engine.  

Extending this even further, suppose that the digital artifacts manipulated by the workflow come from a dataset or database.  The workflow would then serve as a kind of database processing routine whose description could be integrated into traversal/query languages.  An example which comes to mind is Gremlin, the Graph Query language used (among other places) for the Apache TinkerPop Property Graph Database Engine.  Gremlin uses a "Step-Base Virtual Machine" where "steps" form the logical analog to kernel operations in an instruction set (obviously at a higher level, though).  Gremlin's VM recognizes about 80 distinct kinds of steps, with the idea that any software which can execute instances of steps can in theory produce/consume Gremlin bytecode and therefore interoperate with other tools in the Property Graph ecosystem.  We speculate that research protocol descriptions could be analogously abstracted into some generic collection of step kinds (measure out some quantity, declare some new object, initiate some process).  Pandore's model also can be broken down into a handful of step-kinds, mostly ones which take an input image and a group of numeric parameters and output a new image.  In any case, we envision that steps in contexts like BioCoder and Pandore could be aggregated into "step libraries" along with Gremlin VM opcodes, with the result being a data processing framework that could evaluate queries but also perform actions such as modeling research protocols or executing "in silico" workflows.  There is an existing C++ implementation of Gremlin, called  BitGraph, which is not a full port of the existing (Java-based) Gremlin VM but is a good place to start building a system along these lines.

        

