

I am the editor-in-chief of the International Journal of Speech Technology (IJST) and founder of a software company that is developing code libraries for accessing open-access scientific research data and publications.  We're trying to use technology to  promote more rigorous adherence to protocols such as FAIR Sharing, Research Objects, and the Data Curation Network; and documenting research data and methodology via frameworks such as MIBBI (Minimum Information for Biological and Biomedical Investigations), BioCoder (which is a project of Microsoft Research India), SciXML, SciData, schema.org/Dataset, or DataPackageR (which was BMGF-founded).  

We are currently developing software in conjunction with several publishers and biotechnology companies that host science portals, developing tools such as dataset browsers and API clients.  In general, these projects involve researchers bundling raw data with metadata about their scientific project, and also potentially with machine-readable full-text research papers and GUI-related code.  Our technology parses the supplemental info (metadata, full-text, and GUI workspace definitions) via code libraries and/or plugins that can be embedded in scientific software.  Each individual publisher's portal, document repository, or data hosting service can have its own "module," built around a "Scientific Data Repository Model" (SDRM) which represents the details of how that specific resource conveys research data and metadata.

I am writing to Gates Open Research because we'd like to develop an SDRM module for Gates Open Research.  Such a module would formally represent the guidelines summarized in gatesopenresearch.org/for-authors/data-guidelines, so that research metadata and access technology could document how the published research fits within those recommendations.  For instance, the technology could encapsulate API and/or digital-notebook access to the 5 listed approved general repositories and several more specific recommended resources; code annotation and workflows as per the "Software source code" recommendations; data citation; XML/JATS text mining for Gates Open Research articles; de-identification/anonymization; text and speech encoding for transcription/annotation; and formal documentation of research methods as specified by FAIRsharing, MIBBI, Springer Protocols, BioCoder, or other lab-protocol models.  The libraries implementing an SDRM for Gates Open Research could then be used both by BMGF-supported scientists preparing articles and by researchers reading publications on Gates Open Research.  We could, for example, implement special-purpose PDF viewers with code for explicitly interacting with the Gates Open Research corpus and the documents and supplemental material hosted there (this is an approach we've taken with other SDRM modules). 

We are currently developing a prototype for a large bioimaging equipment/software vendor who is preparing to deploy a new scientific data-hosting platform (this platform has not been announced to the public, so we're not at liberty to identify this further).  But in any case this prototype will illustrate the steps needed to construct an SDRM for a specific research hosting service/document portal, and how to incorporate the SDRM libraries into scientific software.  If there's interest in developing an analogous SDRM for Gates Open Research, we'd be happy to share this demonstration with you as well.

We can provide a detailed technical description of SDRM on request.  For a quick summary, the primary SDRM development language is C++.  Research metadata is encapsulated into a C++ object whose data fields model different parameters for describing scientific data, as specified by schema.org/Dataset, Data Curation Network, DataPackageR, Research Object Bundles, and SciXML.  For "in vivo" and lab-based research, SDRM modules can link against BioCoder (which is also a C++ code base); we're developing extensions to BioCoder which diversity the description formats used by BioCoder's data generators.  SDRM modules can include application-specific code for situations where authors recommend a specific application for viewing the raw data files: ParaView for 3D plots; IQmol for molecular visualization; FlowJo for serology/immunology data; CaPTk or medInria for bioimaging; MeshLab for 3D geometry; etc.  Data packages may include workspace files, plugins, or other GUI-related code to configure the viewing software.  Such workspace files are packaged with raw data files and serializations of SDRM metadata objects into "Supplemental Archives".  For open-access documents, annotated publication text can also be included in Supplemental Archives.  These annotations establish cross-references between publications and parts of their associated data sets.  SDRM-based data sets can model components (either individual samples or larger-scale parts) via C++ objects, which in turn establish a microcitation scaffolding to accommodate text-to-data annotations.  Supplemental archives, in turn, can be published as a single resource on hosts such as Dataverse or Open Science (or even GitHub); can be linked to publication portals; and can be registered with bibliographic services such as CrossRef and Semantic Scholar.

Although this technology is relevant for almost any kind of scientific research, we've been particularly focused on fields related to bioimaging: image analysis, image annotation, radiology, cytometry, etc.  Our team includes image-processing experts from several countries, and we're advised by one of the scientists who first standardized DICOM (Digital Imaging and Communications in Medicine).  Some of these tools may therefore be particularly relevant to Gates Open Research publications related to vaccines and immunization, and also to Covid-19.  Myself and one co-author (who is also a developer for SDRM) are writing a book on data integration for Covid-19 (to be published by Elsevier next year), so we've been trying to locate and improve access to Covid-19-related data sets.  






 

  guidelines.  We are adapting BioCoder, a code library developed by Microsoft Research India for modeling laboratory protocols.  BioCoder is similar to MIBBI (Minimum Information for Biological and Biomedical Investigations), but instead of static experiment descriptions BioCoder employs executable computer code, so it may also be used to orchestrate "in silico" workflows.  Our models for using BioCoder-like protocols to describe data sets is based on DataPackageR, which was a BMGF-funded project released in 2019 (along with other tools developed from the Vaccine Immunology Statistical Center,  particularly in the context of cytometry/serology).  


I am the editor-in-chief of the International Journal of Speech Technology (IJST) and founder of a software company that is developing code libraries for accessing open-access scientific research data and publications.  We're trying to use technology to  promote more rigorous adherence to protocols such as FAIR Sharing, Research Objects, and the Data Curation Network; and documenting research data and methodology via frameworks such as MIBBI (Minimum Information for Biological and Biomedical Investigations), BioCoder (which is a project of Microsoft Research India), SciXML, SciData, schema.org/Dataset, or DataPackageR (which was BMGF-founded).  

We are currently developing software in conjunction with several publishers and biotechnology companies that host science portals, developing tools such as dataset browsers and API clients.  In general, these projects involve researchers bundling raw data with metadata about their scientific project, and also potentially with machine-readable full-text research papers and GUI-related code.  Our technology parses the supplemental info (metadata, full-text, and GUI workspace definitions) via code libraries and/or plugins that can be embedded in scientific software.  Each individual publisher's portal, document repository, or data hosting service can have its own "module," built around a "Scientific Data Repository Model" (SDRM) which represents the details of how that specific resource conveys research data and metadata.

I am writing to Gates Open Research because we'd like to develop an SDRM module for Gates Open Research.  Such a module would formally represent the guidelines summarized in gatesopenresearch.org/for-authors/data-guidelines, so that research metadata and access technology could document how the published research fits within those recommendations.  For instance, the technology could encapsulate API and/or digital-notebook access to the 5 listed approved general repositories and several more specific recommended resources; code annotation and workflows as per the "Software source code" recommendations; data citation; XML/JATS text mining for Gates Open Research articles; de-identification/anonymization; text and speech encoding for transcription/annotation; and formal documentation of research methods as specified by FAIRsharing, MIBBI, Springer Protocols, BioCoder, or other lab-protocol models.  The libraries implementing an SDRM for Gates Open Research could then be used both by BMGF-supported scientists preparing articles and by researchers reading publications on Gates Open Research.  We could, for example, implement special-purpose PDF viewers with code for explicitly interacting with the Gates Open Research corpus and the documents and supplemental material hosted there (this is an approach we've taken with other SDRM modules). 

We can provide a detailed technical description of SDRM on request.  For a quick summary, the primary SDRM development language is C++.  Research metadata is encapsulated into a C++ object whose data fields model different parameters for describing scientific data, as specified by schema.org/Dataset, Data Curation Network, DataPackageR, Research Object Bundles, and SciXML.  For "in vivo" and lab-based research, SDRM modules can link against BioCoder (which is also a C++ code base); we're developing extensions to BioCoder which diversity the description formats used by BioCoder's data generators.  SDRM modules can include application-specific code for situations where authors recommend a specific application for viewing the raw data files: ParaView for 3D plots; IQmol for molecular visualization; FlowJo for serology/immunology data; CaPTk or medInria for bioimaging; MeshLab for 3D geometry; etc.  Data packages may include workspace files, plugins, or other GUI-related code to configure the viewing software.  Such workspace files are packaged with raw data files and serializations of SDRM metadata objects into "Supplemental Archives".  For open-access documents, annotated publication text can also be included in Supplemental Archives.  These annotations establish cross-references between publications and parts of their associated data sets.  SDRM-based data sets can model components (either individual samples or larger-scale parts) via C++ objects, which in turn establish a microcitation scaffolding to accommodate text-to-data annotations.  Supplemental archives, in turn, can be published as a single resource on hosts such as Dataverse or Open Science (or even GitHub); can be linked to publication portals; and can be registered with bibliographic services such as CrossRef and Semantic Scholar.

Although this technology is relevant for almost any kind of scientific research, we've been particularly focused on fields related to bioimaging:  

 

  guidelines.  We are adapting BioCoder, a code library developed by Microsoft Research India for modeling laboratory protocols.  BioCoder is similar to MIBBI (Minimum Information for Biological and Biomedical Investigations), but instead of static experiment descriptions BioCoder employs executable computer code, so it may also be used to orchestrate "in silico" workflows.  Our models for using BioCoder-like protocols to describe data sets is based on DataPackageR, which was a BMGF-funded project released in 2019 (along with other tools developed from the Vaccine Immunology Statistical Center,  particularly in the context of cytometry/serology).  

