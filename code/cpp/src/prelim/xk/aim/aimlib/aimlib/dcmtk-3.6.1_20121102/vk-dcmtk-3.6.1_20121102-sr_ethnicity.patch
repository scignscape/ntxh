Only in dcmtk-3.6.1_20121102-my//dcmsr/include/dcmtk/dcmsr: dsrc3dcc.h
diff -ruap dcmtk-3.6.1_20121102//dcmsr/include/dcmtk/dcmsr/dsrdoc.h dcmtk-3.6.1_20121102-my//dcmsr/include/dcmtk/dcmsr/dsrdoc.h
--- dcmtk-3.6.1_20121102//dcmsr/include/dcmtk/dcmsr/dsrdoc.h	2012-11-02 08:35:36.000000000 -0500
+++ dcmtk-3.6.1_20121102-my//dcmsr/include/dcmtk/dcmsr/dsrdoc.h	2012-12-18 21:44:08.068567700 -0600
@@ -439,6 +439,14 @@ class DCMTK_DCMSR_EXPORT DSRDocument
     virtual OFCondition getPatientSex(OFString &value,
                                       const signed long pos = 0) const;
 
+    /** get ethnic group
+     ** @param  value  reference to variable in which the value should be stored
+     *  @param  pos    index of the value to get (0..vm-1), -1 for all components
+     ** @return status, EC_Normal if successful, an error code otherwise
+     */
+    virtual OFCondition getEthnicGroup(OFString &value,
+                                      const signed long pos = 0) const;
+
     /** get referring physician's name
      ** @param  value  reference to variable in which the value should be stored
      *  @param  pos    index of the value to get (0..vm-1), -1 for all components
@@ -646,6 +654,14 @@ class DCMTK_DCMSR_EXPORT DSRDocument
     virtual OFCondition setPatientSex(const OFString &value,
                                       const OFBool check = OFTrue);
 
+    /** set ethnic group.
+     ** @param  value  value to be set (single value only) or "" for no value
+     *  @param  check  check 'value' for conformance with VR (SH) and VM (1) if enabled
+     ** @return status, EC_Normal if successful, an error code otherwise
+     */
+    virtual OFCondition setEthnicGroup(const OFString &value,
+                                      const OFBool check = OFTrue);
+
     /** set referring physician's name
      ** @param  value  value to be set (single value only) or "" for no value
      *  @param  check  check 'value' for conformance with VR (PN) and VM (1) if enabled
@@ -1150,6 +1166,8 @@ class DCMTK_DCMSR_EXPORT DSRDocument
     DcmDate             PatientBirthDate;
     /// Patient's Sex: (CS, 1, 2)
     DcmCodeString       PatientSex;
+    /// Ethnic Group: (SH, 1, 3)
+    DcmShortString      EthnicGroup;
 
     // --- General Equipment Module (M) ---
 
Only in dcmtk-3.6.1_20121102-my//dcmsr/libsrc: dsrc3dcc.cc
diff -ruap dcmtk-3.6.1_20121102//dcmsr/libsrc/dsrdoc.cc dcmtk-3.6.1_20121102-my//dcmsr/libsrc/dsrdoc.cc
--- dcmtk-3.6.1_20121102//dcmsr/libsrc/dsrdoc.cc	2012-11-02 08:35:36.000000000 -0500
+++ dcmtk-3.6.1_20121102-my//dcmsr/libsrc/dsrdoc.cc	2012-12-18 21:44:08.139076600 -0600
@@ -76,6 +76,7 @@ DSRDocument::DSRDocument(const E_Documen
     PatientID(DCM_PatientID),
     PatientBirthDate(DCM_PatientBirthDate),
     PatientSex(DCM_PatientSex),
+    EthnicGroup(DCM_EthnicGroup),
     Manufacturer(DCM_Manufacturer),
     ManufacturerModelName(DCM_ManufacturerModelName),
     DeviceSerialNumber(DCM_DeviceSerialNumber),
@@ -141,6 +142,7 @@ void DSRDocument::clear()
     PatientID.clear();
     PatientBirthDate.clear();
     PatientSex.clear();
+    EthnicGroup.clear();
     Manufacturer.clear();
     ManufacturerModelName.clear();
     DeviceSerialNumber.clear();
@@ -210,6 +212,12 @@ OFCondition DSRDocument::print(STD_NAMES
                 OFString patientStr;
                 if (!PatientSex.isEmpty())
                     patientStr += getPrintStringFromElement(PatientSex, tmpString);
+                if (!EthnicGroup.isEmpty())
+                {
+                   if (!patientStr.empty())
+                       patientStr += ", ";
+                    patientStr += getStringValueFromElement(EthnicGroup, tmpString);
+                }
                 if (!PatientBirthDate.isEmpty())
                 {
                    if (!patientStr.empty())
@@ -451,6 +459,7 @@ OFCondition DSRDocument::read(DcmItem &d
         getAndCheckElementFromDataset(dataset, PatientID, "1", "2", "PatientModule");
         getAndCheckElementFromDataset(dataset, PatientBirthDate, "1", "2", "PatientModule");
         getAndCheckElementFromDataset(dataset, PatientSex, "1", "2", "PatientModule");
+        getAndCheckElementFromDataset(dataset, EthnicGroup, "1", "3", "PatientModule");
 
         if (requiresEnhancedEquipmentModule(documentType))
         {
@@ -594,6 +603,7 @@ OFCondition DSRDocument::write(DcmItem &
         addElementToDataset(result, dataset, new DcmLongString(PatientID), "1", "2", "PatientModule");
         addElementToDataset(result, dataset, new DcmDate(PatientBirthDate), "1", "2", "PatientModule");
         addElementToDataset(result, dataset, new DcmCodeString(PatientSex), "1", "2", "PatientModule");
+        addElementToDataset(result, dataset, new DcmShortString(EthnicGroup), "1", "3", "PatientModule");
 
         if (requiresEnhancedEquipmentModule(getDocumentType()))
         {
@@ -846,7 +856,8 @@ OFCondition DSRDocument::readXMLPatientD
                 PatientBirthDate.putOFStringArray(tmpString);
             }
             else if (doc.getElementFromNodeContent(cursor, PatientID, "id").bad() &&
-                     doc.getElementFromNodeContent(cursor, PatientSex, "sex").bad())
+                     doc.getElementFromNodeContent(cursor, PatientSex, "sex").bad() &&
+                     doc.getElementFromNodeContent(cursor, EthnicGroup, "ethnicgroup").bad())
             {
                 doc.printUnexpectedNodeWarning(cursor);
             }
@@ -1207,6 +1218,7 @@ OFCondition DSRDocument::writeXML(STD_NA
             stream << "</birthday>" << OFendl;
         }
         writeStringFromElementToXML(stream, PatientSex, "sex", (flags & XF_writeEmptyTags) > 0);
+        writeStringFromElementToXML(stream, EthnicGroup, "ethnicgroup", (flags & XF_writeEmptyTags) > 0);
         stream << "</patient>" << OFendl;
 
         stream << "<study uid=\"" << getMarkupStringFromElement(StudyInstanceUID, tmpString) << "\">" << OFendl;
@@ -1369,6 +1381,12 @@ void DSRDocument::renderHTMLPatientData(
         else
             patientStr += convertToHTMLString(tmpString, htmlString, flags);
     }
+    if (!EthnicGroup.isEmpty())
+    {
+       if (!patientStr.empty())
+           patientStr += ", ";
+       patientStr += convertToHTMLString(getStringValueFromElement(EthnicGroup, tmpString), htmlString, flags);
+    }
     if (!PatientBirthDate.isEmpty())
     {
        if (!patientStr.empty())
@@ -2045,6 +2063,13 @@ OFCondition DSRDocument::getPatientSex(O
 }
 
 
+OFCondition DSRDocument::getEthnicGroup(OFString &value,
+                                       const signed long pos) const
+{
+    return getStringValueFromElement(EthnicGroup, value, pos);
+}
+
+
 OFCondition DSRDocument::getReferringPhysicianName(OFString &value,
                                                    const signed long pos) const
 {
@@ -2246,6 +2271,16 @@ OFCondition DSRDocument::setPatientSex(c
     return result;
 }
 
+
+OFCondition DSRDocument::setEthnicGroup(const OFString &value,
+                                       const OFBool check)
+{
+    OFCondition result = (check) ? DcmShortString::checkStringValue(value, "1") : EC_Normal;
+    if (result.good())
+        result = EthnicGroup.putOFStringArray(value);
+    return result;
+}
+
 
 OFCondition DSRDocument::setReferringPhysicianName(const OFString &value,
                                                    const OFBool check)
