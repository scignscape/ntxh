// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: http-over-capnp.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

//?#if CAPNP_VERSION != 8000
#if CAPNP_VERSION != 9000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "byte-stream.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(92963bfdad2beb6a);
CAPNP_DECLARE_SCHEMA(ea3256705c0b63ba);
CAPNP_DECLARE_SCHEMA(81e666258a901e30);
CAPNP_DECLARE_SCHEMA(955c85d7a557d8e9);
CAPNP_DECLARE_SCHEMA(f6850b405e21d2c1);
CAPNP_DECLARE_SCHEMA(bd146efdadd86c3d);
CAPNP_DECLARE_SCHEMA(99ae26bfd34f3f3b);
CAPNP_DECLARE_SCHEMA(ccefbf23794af7b3);
CAPNP_DECLARE_SCHEMA(a9da072c30fec5de);
CAPNP_DECLARE_SCHEMA(b09c33a9f4caa823);
CAPNP_DECLARE_SCHEMA(dcf946892e5778c3);
CAPNP_DECLARE_SCHEMA(a9b84fb6432f030f);
CAPNP_DECLARE_SCHEMA(ba1fca454f465e9a);
CAPNP_DECLARE_SCHEMA(913fe85057da9522);
CAPNP_DECLARE_SCHEMA(deb08db1052a4866);
CAPNP_DECLARE_SCHEMA(be541ecc63c9b2ba);
CAPNP_DECLARE_SCHEMA(f235351cf1531299);
CAPNP_DECLARE_SCHEMA(ca02437e5f995e08);
CAPNP_DECLARE_SCHEMA(8dbd3c007383731e);
enum class HttpMethod_8dbd3c007383731e: uint16_t {
  GET,
  HEAD,
  POST,
  PUT,
  DELETE,
  PATCH,
  PURGE,
  OPTIONS,
  TRACE,
  COPY,
  LOCK,
  MKCOL,
  MOVE,
  PROPFIND,
  PROPPATCH,
  SEARCH,
  UNLOCK,
  ACL,
  REPORT,
  MKACTIVITY,
  CHECKOUT,
  MERGE,
  MSEARCH,
  NOTIFY,
  SUBSCRIBE,
  UNSUBSCRIBE,
};
CAPNP_DECLARE_ENUM(HttpMethod, 8dbd3c007383731e);
CAPNP_DECLARE_SCHEMA(857745131db6fc83);
CAPNP_DECLARE_SCHEMA(ee4db03aab7fb4be);
enum class CommonHeaderName_ee4db03aab7fb4be: uint16_t {
  INVALID,
  ACCEPT_CHARSET,
  ACCEPT_ENCODING,
  ACCEPT_LANGUAGE,
  ACCEPT_RANGES,
  ACCEPT,
  ACCESS_CONTROL_ALLOW_ORIGIN,
  AGE,
  ALLOW,
  AUTHORIZATION,
  CACHE_CONTROL,
  CONTENT_DISPOSITION,
  CONTENT_ENCODING,
  CONTENT_LANGUAGE,
  CONTENT_LENGTH,
  CONTENT_LOCATION,
  CONTENT_RANGE,
  CONTENT_TYPE,
  COOKIE,
  DATE,
  ETAG,
  EXPECT,
  EXPIRES,
  FROM,
  HOST,
  IF_MATCH,
  IF_MODIFIED_SINCE,
  IF_NONE_MATCH,
  IF_RANGE,
  IF_UNMODIFIED_SINCE,
  LAST_MODIFIED,
  LINK,
  LOCATION,
  MAX_FORWARDS,
  PROXY_AUTHENTICATE,
  PROXY_AUTHORIZATION,
  RANGE,
  REFERER,
  REFRESH,
  RETRY_AFTER,
  SERVER,
  SET_COOKIE,
  STRICT_TRANSPORT_SECURITY,
  TRANSFER_ENCODING,
  USER_AGENT,
  VARY,
  VIA,
  WWW_AUTHENTICATE,
};
CAPNP_DECLARE_ENUM(CommonHeaderName, ee4db03aab7fb4be);
CAPNP_DECLARE_SCHEMA(83e5f307c4d3785f);
enum class CommonHeaderValue_83e5f307c4d3785f: uint16_t {
  INVALID,
  GZIP_DEFLATE,
};
CAPNP_DECLARE_ENUM(CommonHeaderValue, 83e5f307c4d3785f);
CAPNP_DECLARE_SCHEMA(b39047580b6fd228);
CAPNP_DECLARE_SCHEMA(ed5334c41abc0375);
CAPNP_DECLARE_SCHEMA(e971001e4ade4a2a);

}  // namespace schemas
}  // namespace capnp

namespace capnp {

struct HttpService {
  HttpService() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct ClientRequestContext;
  struct ServerRequestContext;
  struct StartRequestParams;
  struct StartRequestResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(92963bfdad2beb6a)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct HttpService::ClientRequestContext {
  ClientRequestContext() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct StartResponseParams;
  struct StartResponseResults;
  struct StartWebSocketParams;
  struct StartWebSocketResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(ea3256705c0b63ba)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct HttpService::ClientRequestContext::StartResponseParams {
  StartResponseParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81e666258a901e30, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpService::ClientRequestContext::StartResponseResults {
  StartResponseResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(955c85d7a557d8e9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpService::ClientRequestContext::StartWebSocketParams {
  StartWebSocketParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f6850b405e21d2c1, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpService::ClientRequestContext::StartWebSocketResults {
  StartWebSocketResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd146efdadd86c3d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpService::ServerRequestContext {
  ServerRequestContext() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(99ae26bfd34f3f3b)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct HttpService::StartRequestParams {
  StartRequestParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccefbf23794af7b3, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpService::StartRequestResults {
  StartRequestResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9da072c30fec5de, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WebSocket {
  WebSocket() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct SendTextParams;
  struct SendDataParams;
  struct CloseParams;
  struct CloseResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(b09c33a9f4caa823)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct WebSocket::SendTextParams {
  SendTextParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dcf946892e5778c3, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WebSocket::SendDataParams {
  SendDataParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9b84fb6432f030f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WebSocket::CloseParams {
  CloseParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba1fca454f465e9a, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WebSocket::CloseResults {
  CloseResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(913fe85057da9522, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpRequest {
  HttpRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct BodySize;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(deb08db1052a4866, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpRequest::BodySize {
  BodySize() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNKNOWN,
    FIXED,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be541ecc63c9b2ba, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpResponse {
  HttpResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct BodySize;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f235351cf1531299, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpResponse::BodySize {
  BodySize() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNKNOWN,
    FIXED,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca02437e5f995e08, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::HttpMethod_8dbd3c007383731e HttpMethod;

typedef ::capnp::schemas::CommonHeaderName_ee4db03aab7fb4be CommonHeaderName;

typedef ::capnp::schemas::CommonHeaderValue_83e5f307c4d3785f CommonHeaderValue;

struct HttpHeader {
  HttpHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    COMMON,
    UNCOMMON,
  };
  struct NameValue;
  struct Common;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b39047580b6fd228, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpHeader::NameValue {
  NameValue() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed5334c41abc0375, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HttpHeader::Common {
  Common() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    COMMON_VALUE,
    VALUE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e971001e4ade4a2a, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class HttpService::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef HttpService Calls;
  typedef HttpService Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::capnp::HttpService::StartRequestParams,  ::capnp::HttpService::StartRequestResults> startRequestRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class HttpService::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef HttpService Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::capnp::HttpService::StartRequestParams StartRequestParams;
  typedef  ::capnp::HttpService::StartRequestResults StartRequestResults;
  typedef ::capnp::CallContext<StartRequestParams, StartRequestResults> StartRequestContext;
  virtual ::kj::Promise<void> startRequest(StartRequestContext context);

  inline  ::capnp::HttpService::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::capnp::HttpService>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class HttpService::ClientRequestContext::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef ClientRequestContext Calls;
  typedef ClientRequestContext Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::capnp::HttpService::ClientRequestContext::StartResponseParams,  ::capnp::HttpService::ClientRequestContext::StartResponseResults> startResponseRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::capnp::HttpService::ClientRequestContext::StartWebSocketParams,  ::capnp::HttpService::ClientRequestContext::StartWebSocketResults> startWebSocketRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class HttpService::ClientRequestContext::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef ClientRequestContext Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::capnp::HttpService::ClientRequestContext::StartResponseParams StartResponseParams;
  typedef  ::capnp::HttpService::ClientRequestContext::StartResponseResults StartResponseResults;
  typedef ::capnp::CallContext<StartResponseParams, StartResponseResults> StartResponseContext;
  virtual ::kj::Promise<void> startResponse(StartResponseContext context);
  typedef  ::capnp::HttpService::ClientRequestContext::StartWebSocketParams StartWebSocketParams;
  typedef  ::capnp::HttpService::ClientRequestContext::StartWebSocketResults StartWebSocketResults;
  typedef ::capnp::CallContext<StartWebSocketParams, StartWebSocketResults> StartWebSocketContext;
  virtual ::kj::Promise<void> startWebSocket(StartWebSocketContext context);

  inline  ::capnp::HttpService::ClientRequestContext::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::capnp::HttpService::ClientRequestContext>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class HttpService::ClientRequestContext::StartResponseParams::Reader {
public:
  typedef StartResponseParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasResponse() const;
  inline  ::capnp::HttpResponse::Reader getResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpService::ClientRequestContext::StartResponseParams::Builder {
public:
  typedef StartResponseParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasResponse();
  inline  ::capnp::HttpResponse::Builder getResponse();
  inline void setResponse( ::capnp::HttpResponse::Reader value);
  inline  ::capnp::HttpResponse::Builder initResponse();
  inline void adoptResponse(::capnp::Orphan< ::capnp::HttpResponse>&& value);
  inline ::capnp::Orphan< ::capnp::HttpResponse> disownResponse();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpService::ClientRequestContext::StartResponseParams::Pipeline {
public:
  typedef StartResponseParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::HttpResponse::Pipeline getResponse();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpService::ClientRequestContext::StartResponseResults::Reader {
public:
  typedef StartResponseResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBody() const;
#if !CAPNP_LITE
  inline  ::capnp::ByteStream::Client getBody() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpService::ClientRequestContext::StartResponseResults::Builder {
public:
  typedef StartResponseResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBody();
#if !CAPNP_LITE
  inline  ::capnp::ByteStream::Client getBody();
  inline void setBody( ::capnp::ByteStream::Client&& value);
  inline void setBody( ::capnp::ByteStream::Client& value);
  inline void adoptBody(::capnp::Orphan< ::capnp::ByteStream>&& value);
  inline ::capnp::Orphan< ::capnp::ByteStream> disownBody();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpService::ClientRequestContext::StartResponseResults::Pipeline {
public:
  typedef StartResponseResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::ByteStream::Client getBody();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpService::ClientRequestContext::StartWebSocketParams::Reader {
public:
  typedef StartWebSocketParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeaders() const;
  inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader getHeaders() const;

  inline bool hasUpSocket() const;
#if !CAPNP_LITE
  inline  ::capnp::WebSocket::Client getUpSocket() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpService::ClientRequestContext::StartWebSocketParams::Builder {
public:
  typedef StartWebSocketParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeaders();
  inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder getHeaders();
  inline void setHeaders( ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder initHeaders(unsigned int size);
  inline void adoptHeaders(::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>> disownHeaders();

  inline bool hasUpSocket();
#if !CAPNP_LITE
  inline  ::capnp::WebSocket::Client getUpSocket();
  inline void setUpSocket( ::capnp::WebSocket::Client&& value);
  inline void setUpSocket( ::capnp::WebSocket::Client& value);
  inline void adoptUpSocket(::capnp::Orphan< ::capnp::WebSocket>&& value);
  inline ::capnp::Orphan< ::capnp::WebSocket> disownUpSocket();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpService::ClientRequestContext::StartWebSocketParams::Pipeline {
public:
  typedef StartWebSocketParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::WebSocket::Client getUpSocket();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpService::ClientRequestContext::StartWebSocketResults::Reader {
public:
  typedef StartWebSocketResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDownSocket() const;
#if !CAPNP_LITE
  inline  ::capnp::WebSocket::Client getDownSocket() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpService::ClientRequestContext::StartWebSocketResults::Builder {
public:
  typedef StartWebSocketResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDownSocket();
#if !CAPNP_LITE
  inline  ::capnp::WebSocket::Client getDownSocket();
  inline void setDownSocket( ::capnp::WebSocket::Client&& value);
  inline void setDownSocket( ::capnp::WebSocket::Client& value);
  inline void adoptDownSocket(::capnp::Orphan< ::capnp::WebSocket>&& value);
  inline ::capnp::Orphan< ::capnp::WebSocket> disownDownSocket();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpService::ClientRequestContext::StartWebSocketResults::Pipeline {
public:
  typedef StartWebSocketResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::WebSocket::Client getDownSocket();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class HttpService::ServerRequestContext::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef ServerRequestContext Calls;
  typedef ServerRequestContext Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class HttpService::ServerRequestContext::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef ServerRequestContext Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::capnp::HttpService::ServerRequestContext::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::capnp::HttpService::ServerRequestContext>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class HttpService::StartRequestParams::Reader {
public:
  typedef StartRequestParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRequest() const;
  inline  ::capnp::HttpRequest::Reader getRequest() const;

  inline bool hasContext() const;
#if !CAPNP_LITE
  inline  ::capnp::HttpService::ClientRequestContext::Client getContext() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpService::StartRequestParams::Builder {
public:
  typedef StartRequestParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequest();
  inline  ::capnp::HttpRequest::Builder getRequest();
  inline void setRequest( ::capnp::HttpRequest::Reader value);
  inline  ::capnp::HttpRequest::Builder initRequest();
  inline void adoptRequest(::capnp::Orphan< ::capnp::HttpRequest>&& value);
  inline ::capnp::Orphan< ::capnp::HttpRequest> disownRequest();

  inline bool hasContext();
#if !CAPNP_LITE
  inline  ::capnp::HttpService::ClientRequestContext::Client getContext();
  inline void setContext( ::capnp::HttpService::ClientRequestContext::Client&& value);
  inline void setContext( ::capnp::HttpService::ClientRequestContext::Client& value);
  inline void adoptContext(::capnp::Orphan< ::capnp::HttpService::ClientRequestContext>&& value);
  inline ::capnp::Orphan< ::capnp::HttpService::ClientRequestContext> disownContext();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpService::StartRequestParams::Pipeline {
public:
  typedef StartRequestParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::HttpRequest::Pipeline getRequest();
  inline  ::capnp::HttpService::ClientRequestContext::Client getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpService::StartRequestResults::Reader {
public:
  typedef StartRequestResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRequestBody() const;
#if !CAPNP_LITE
  inline  ::capnp::ByteStream::Client getRequestBody() const;
#endif  // !CAPNP_LITE

  inline bool hasContext() const;
#if !CAPNP_LITE
  inline  ::capnp::HttpService::ServerRequestContext::Client getContext() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpService::StartRequestResults::Builder {
public:
  typedef StartRequestResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRequestBody();
#if !CAPNP_LITE
  inline  ::capnp::ByteStream::Client getRequestBody();
  inline void setRequestBody( ::capnp::ByteStream::Client&& value);
  inline void setRequestBody( ::capnp::ByteStream::Client& value);
  inline void adoptRequestBody(::capnp::Orphan< ::capnp::ByteStream>&& value);
  inline ::capnp::Orphan< ::capnp::ByteStream> disownRequestBody();
#endif  // !CAPNP_LITE

  inline bool hasContext();
#if !CAPNP_LITE
  inline  ::capnp::HttpService::ServerRequestContext::Client getContext();
  inline void setContext( ::capnp::HttpService::ServerRequestContext::Client&& value);
  inline void setContext( ::capnp::HttpService::ServerRequestContext::Client& value);
  inline void adoptContext(::capnp::Orphan< ::capnp::HttpService::ServerRequestContext>&& value);
  inline ::capnp::Orphan< ::capnp::HttpService::ServerRequestContext> disownContext();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpService::StartRequestResults::Pipeline {
public:
  typedef StartRequestResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::ByteStream::Client getRequestBody();
  inline  ::capnp::HttpService::ServerRequestContext::Client getContext();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class WebSocket::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef WebSocket Calls;
  typedef WebSocket Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::StreamingRequest< ::capnp::WebSocket::SendTextParams> sendTextRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::StreamingRequest< ::capnp::WebSocket::SendDataParams> sendDataRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::capnp::WebSocket::CloseParams,  ::capnp::WebSocket::CloseResults> closeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class WebSocket::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef WebSocket Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::capnp::WebSocket::SendTextParams SendTextParams;
  typedef ::capnp::StreamingCallContext<SendTextParams> SendTextContext;
  virtual ::kj::Promise<void> sendText(SendTextContext context);
  typedef  ::capnp::WebSocket::SendDataParams SendDataParams;
  typedef ::capnp::StreamingCallContext<SendDataParams> SendDataContext;
  virtual ::kj::Promise<void> sendData(SendDataContext context);
  typedef  ::capnp::WebSocket::CloseParams CloseParams;
  typedef  ::capnp::WebSocket::CloseResults CloseResults;
  typedef ::capnp::CallContext<CloseParams, CloseResults> CloseContext;
  virtual ::kj::Promise<void> close(CloseContext context);

  inline  ::capnp::WebSocket::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::capnp::WebSocket>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class WebSocket::SendTextParams::Reader {
public:
  typedef SendTextParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasText() const;
  inline  ::capnp::Text::Reader getText() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSocket::SendTextParams::Builder {
public:
  typedef SendTextParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasText();
  inline  ::capnp::Text::Builder getText();
  inline void setText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownText();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSocket::SendTextParams::Pipeline {
public:
  typedef SendTextParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSocket::SendDataParams::Reader {
public:
  typedef SendDataParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSocket::SendDataParams::Builder {
public:
  typedef SendDataParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSocket::SendDataParams::Pipeline {
public:
  typedef SendDataParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSocket::CloseParams::Reader {
public:
  typedef CloseParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCode() const;

  inline bool hasReason() const;
  inline  ::capnp::Text::Reader getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSocket::CloseParams::Builder {
public:
  typedef CloseParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getCode();
  inline void setCode( ::uint16_t value);

  inline bool hasReason();
  inline  ::capnp::Text::Builder getReason();
  inline void setReason( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReason(unsigned int size);
  inline void adoptReason(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReason();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSocket::CloseParams::Pipeline {
public:
  typedef CloseParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebSocket::CloseResults::Reader {
public:
  typedef CloseResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebSocket::CloseResults::Builder {
public:
  typedef CloseResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebSocket::CloseResults::Pipeline {
public:
  typedef CloseResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpRequest::Reader {
public:
  typedef HttpRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::HttpMethod getMethod() const;

  inline bool hasUrl() const;
  inline  ::capnp::Text::Reader getUrl() const;

  inline bool hasHeaders() const;
  inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader getHeaders() const;

  inline typename BodySize::Reader getBodySize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpRequest::Builder {
public:
  typedef HttpRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::HttpMethod getMethod();
  inline void setMethod( ::capnp::HttpMethod value);

  inline bool hasUrl();
  inline  ::capnp::Text::Builder getUrl();
  inline void setUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUrl(unsigned int size);
  inline void adoptUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUrl();

  inline bool hasHeaders();
  inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder getHeaders();
  inline void setHeaders( ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder initHeaders(unsigned int size);
  inline void adoptHeaders(::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>> disownHeaders();

  inline typename BodySize::Builder getBodySize();
  inline typename BodySize::Builder initBodySize();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpRequest::Pipeline {
public:
  typedef HttpRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename BodySize::Pipeline getBodySize();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpRequest::BodySize::Reader {
public:
  typedef BodySize Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnknown() const;
  inline  ::capnp::Void getUnknown() const;

  inline bool isFixed() const;
  inline  ::uint64_t getFixed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpRequest::BodySize::Builder {
public:
  typedef BodySize Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnknown();
  inline  ::capnp::Void getUnknown();
  inline void setUnknown( ::capnp::Void value = ::capnp::VOID);

  inline bool isFixed();
  inline  ::uint64_t getFixed();
  inline void setFixed( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpRequest::BodySize::Pipeline {
public:
  typedef BodySize Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpResponse::Reader {
public:
  typedef HttpResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getStatusCode() const;

  inline bool hasStatusText() const;
  inline  ::capnp::Text::Reader getStatusText() const;

  inline bool hasHeaders() const;
  inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader getHeaders() const;

  inline typename BodySize::Reader getBodySize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpResponse::Builder {
public:
  typedef HttpResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getStatusCode();
  inline void setStatusCode( ::uint16_t value);

  inline bool hasStatusText();
  inline  ::capnp::Text::Builder getStatusText();
  inline void setStatusText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStatusText(unsigned int size);
  inline void adoptStatusText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStatusText();

  inline bool hasHeaders();
  inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder getHeaders();
  inline void setHeaders( ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder initHeaders(unsigned int size);
  inline void adoptHeaders(::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>> disownHeaders();

  inline typename BodySize::Builder getBodySize();
  inline typename BodySize::Builder initBodySize();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpResponse::Pipeline {
public:
  typedef HttpResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename BodySize::Pipeline getBodySize();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpResponse::BodySize::Reader {
public:
  typedef BodySize Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnknown() const;
  inline  ::capnp::Void getUnknown() const;

  inline bool isFixed() const;
  inline  ::uint64_t getFixed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpResponse::BodySize::Builder {
public:
  typedef BodySize Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnknown();
  inline  ::capnp::Void getUnknown();
  inline void setUnknown( ::capnp::Void value = ::capnp::VOID);

  inline bool isFixed();
  inline  ::uint64_t getFixed();
  inline void setFixed( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpResponse::BodySize::Pipeline {
public:
  typedef BodySize Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpHeader::Reader {
public:
  typedef HttpHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isCommon() const;
  inline typename Common::Reader getCommon() const;

  inline bool isUncommon() const;
  inline bool hasUncommon() const;
  inline  ::capnp::HttpHeader::NameValue::Reader getUncommon() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpHeader::Builder {
public:
  typedef HttpHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isCommon();
  inline typename Common::Builder getCommon();
  inline typename Common::Builder initCommon();

  inline bool isUncommon();
  inline bool hasUncommon();
  inline  ::capnp::HttpHeader::NameValue::Builder getUncommon();
  inline void setUncommon( ::capnp::HttpHeader::NameValue::Reader value);
  inline  ::capnp::HttpHeader::NameValue::Builder initUncommon();
  inline void adoptUncommon(::capnp::Orphan< ::capnp::HttpHeader::NameValue>&& value);
  inline ::capnp::Orphan< ::capnp::HttpHeader::NameValue> disownUncommon();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpHeader::Pipeline {
public:
  typedef HttpHeader Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpHeader::NameValue::Reader {
public:
  typedef NameValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpHeader::NameValue::Builder {
public:
  typedef NameValue Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpHeader::NameValue::Pipeline {
public:
  typedef NameValue Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HttpHeader::Common::Reader {
public:
  typedef Common Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::capnp::CommonHeaderName getName() const;

  inline bool isCommonValue() const;
  inline  ::capnp::CommonHeaderValue getCommonValue() const;

  inline bool isValue() const;
  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HttpHeader::Common::Builder {
public:
  typedef Common Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::capnp::CommonHeaderName getName();
  inline void setName( ::capnp::CommonHeaderName value);

  inline bool isCommonValue();
  inline  ::capnp::CommonHeaderValue getCommonValue();
  inline void setCommonValue( ::capnp::CommonHeaderValue value);

  inline bool isValue();
  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HttpHeader::Common::Pipeline {
public:
  typedef Common Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline HttpService::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline HttpService::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline HttpService::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline HttpService::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline HttpService::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::capnp::HttpService::Client& HttpService::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::capnp::HttpService::Client& HttpService::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
inline HttpService::ClientRequestContext::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline HttpService::ClientRequestContext::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline HttpService::ClientRequestContext::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline HttpService::ClientRequestContext::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline HttpService::ClientRequestContext::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::capnp::HttpService::ClientRequestContext::Client& HttpService::ClientRequestContext::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::capnp::HttpService::ClientRequestContext::Client& HttpService::ClientRequestContext::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool HttpService::ClientRequestContext::StartResponseParams::Reader::hasResponse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpService::ClientRequestContext::StartResponseParams::Builder::hasResponse() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::HttpResponse::Reader HttpService::ClientRequestContext::StartResponseParams::Reader::getResponse() const {
  return ::capnp::_::PointerHelpers< ::capnp::HttpResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::HttpResponse::Builder HttpService::ClientRequestContext::StartResponseParams::Builder::getResponse() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::HttpResponse::Pipeline HttpService::ClientRequestContext::StartResponseParams::Pipeline::getResponse() {
  return  ::capnp::HttpResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HttpService::ClientRequestContext::StartResponseParams::Builder::setResponse( ::capnp::HttpResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::HttpResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::HttpResponse::Builder HttpService::ClientRequestContext::StartResponseParams::Builder::initResponse() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HttpService::ClientRequestContext::StartResponseParams::Builder::adoptResponse(
    ::capnp::Orphan< ::capnp::HttpResponse>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::HttpResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::HttpResponse> HttpService::ClientRequestContext::StartResponseParams::Builder::disownResponse() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HttpService::ClientRequestContext::StartResponseResults::Reader::hasBody() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpService::ClientRequestContext::StartResponseResults::Builder::hasBody() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::ByteStream::Client HttpService::ClientRequestContext::StartResponseResults::Reader::getBody() const {
  return ::capnp::_::PointerHelpers< ::capnp::ByteStream>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::ByteStream::Client HttpService::ClientRequestContext::StartResponseResults::Builder::getBody() {
  return ::capnp::_::PointerHelpers< ::capnp::ByteStream>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::ByteStream::Client HttpService::ClientRequestContext::StartResponseResults::Pipeline::getBody() {
  return  ::capnp::ByteStream::Client(_typeless.getPointerField(0).asCap());
}
inline void HttpService::ClientRequestContext::StartResponseResults::Builder::setBody( ::capnp::ByteStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::ByteStream>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void HttpService::ClientRequestContext::StartResponseResults::Builder::setBody( ::capnp::ByteStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::ByteStream>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void HttpService::ClientRequestContext::StartResponseResults::Builder::adoptBody(
    ::capnp::Orphan< ::capnp::ByteStream>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::ByteStream>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::ByteStream> HttpService::ClientRequestContext::StartResponseResults::Builder::disownBody() {
  return ::capnp::_::PointerHelpers< ::capnp::ByteStream>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool HttpService::ClientRequestContext::StartWebSocketParams::Reader::hasHeaders() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpService::ClientRequestContext::StartWebSocketParams::Builder::hasHeaders() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader HttpService::ClientRequestContext::StartWebSocketParams::Reader::getHeaders() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder HttpService::ClientRequestContext::StartWebSocketParams::Builder::getHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HttpService::ClientRequestContext::StartWebSocketParams::Builder::setHeaders( ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder HttpService::ClientRequestContext::StartWebSocketParams::Builder::initHeaders(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void HttpService::ClientRequestContext::StartWebSocketParams::Builder::adoptHeaders(
    ::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>> HttpService::ClientRequestContext::StartWebSocketParams::Builder::disownHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HttpService::ClientRequestContext::StartWebSocketParams::Reader::hasUpSocket() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HttpService::ClientRequestContext::StartWebSocketParams::Builder::hasUpSocket() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::WebSocket::Client HttpService::ClientRequestContext::StartWebSocketParams::Reader::getUpSocket() const {
  return ::capnp::_::PointerHelpers< ::capnp::WebSocket>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::WebSocket::Client HttpService::ClientRequestContext::StartWebSocketParams::Builder::getUpSocket() {
  return ::capnp::_::PointerHelpers< ::capnp::WebSocket>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::WebSocket::Client HttpService::ClientRequestContext::StartWebSocketParams::Pipeline::getUpSocket() {
  return  ::capnp::WebSocket::Client(_typeless.getPointerField(1).asCap());
}
inline void HttpService::ClientRequestContext::StartWebSocketParams::Builder::setUpSocket( ::capnp::WebSocket::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::WebSocket>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void HttpService::ClientRequestContext::StartWebSocketParams::Builder::setUpSocket( ::capnp::WebSocket::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::WebSocket>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), cap);
}
inline void HttpService::ClientRequestContext::StartWebSocketParams::Builder::adoptUpSocket(
    ::capnp::Orphan< ::capnp::WebSocket>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::WebSocket>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::WebSocket> HttpService::ClientRequestContext::StartWebSocketParams::Builder::disownUpSocket() {
  return ::capnp::_::PointerHelpers< ::capnp::WebSocket>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool HttpService::ClientRequestContext::StartWebSocketResults::Reader::hasDownSocket() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpService::ClientRequestContext::StartWebSocketResults::Builder::hasDownSocket() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::WebSocket::Client HttpService::ClientRequestContext::StartWebSocketResults::Reader::getDownSocket() const {
  return ::capnp::_::PointerHelpers< ::capnp::WebSocket>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::WebSocket::Client HttpService::ClientRequestContext::StartWebSocketResults::Builder::getDownSocket() {
  return ::capnp::_::PointerHelpers< ::capnp::WebSocket>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::WebSocket::Client HttpService::ClientRequestContext::StartWebSocketResults::Pipeline::getDownSocket() {
  return  ::capnp::WebSocket::Client(_typeless.getPointerField(0).asCap());
}
inline void HttpService::ClientRequestContext::StartWebSocketResults::Builder::setDownSocket( ::capnp::WebSocket::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::WebSocket>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void HttpService::ClientRequestContext::StartWebSocketResults::Builder::setDownSocket( ::capnp::WebSocket::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::WebSocket>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void HttpService::ClientRequestContext::StartWebSocketResults::Builder::adoptDownSocket(
    ::capnp::Orphan< ::capnp::WebSocket>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::WebSocket>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::WebSocket> HttpService::ClientRequestContext::StartWebSocketResults::Builder::disownDownSocket() {
  return ::capnp::_::PointerHelpers< ::capnp::WebSocket>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline HttpService::ServerRequestContext::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline HttpService::ServerRequestContext::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline HttpService::ServerRequestContext::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline HttpService::ServerRequestContext::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline HttpService::ServerRequestContext::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::capnp::HttpService::ServerRequestContext::Client& HttpService::ServerRequestContext::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::capnp::HttpService::ServerRequestContext::Client& HttpService::ServerRequestContext::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool HttpService::StartRequestParams::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpService::StartRequestParams::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::HttpRequest::Reader HttpService::StartRequestParams::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::capnp::HttpRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::HttpRequest::Builder HttpService::StartRequestParams::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::capnp::HttpRequest::Pipeline HttpService::StartRequestParams::Pipeline::getRequest() {
  return  ::capnp::HttpRequest::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void HttpService::StartRequestParams::Builder::setRequest( ::capnp::HttpRequest::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::HttpRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::HttpRequest::Builder HttpService::StartRequestParams::Builder::initRequest() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HttpService::StartRequestParams::Builder::adoptRequest(
    ::capnp::Orphan< ::capnp::HttpRequest>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::HttpRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::HttpRequest> HttpService::StartRequestParams::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HttpService::StartRequestParams::Reader::hasContext() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HttpService::StartRequestParams::Builder::hasContext() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::HttpService::ClientRequestContext::Client HttpService::StartRequestParams::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::capnp::HttpService::ClientRequestContext>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::HttpService::ClientRequestContext::Client HttpService::StartRequestParams::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpService::ClientRequestContext>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::HttpService::ClientRequestContext::Client HttpService::StartRequestParams::Pipeline::getContext() {
  return  ::capnp::HttpService::ClientRequestContext::Client(_typeless.getPointerField(1).asCap());
}
inline void HttpService::StartRequestParams::Builder::setContext( ::capnp::HttpService::ClientRequestContext::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::HttpService::ClientRequestContext>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void HttpService::StartRequestParams::Builder::setContext( ::capnp::HttpService::ClientRequestContext::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::HttpService::ClientRequestContext>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), cap);
}
inline void HttpService::StartRequestParams::Builder::adoptContext(
    ::capnp::Orphan< ::capnp::HttpService::ClientRequestContext>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::HttpService::ClientRequestContext>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::HttpService::ClientRequestContext> HttpService::StartRequestParams::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpService::ClientRequestContext>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool HttpService::StartRequestResults::Reader::hasRequestBody() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpService::StartRequestResults::Builder::hasRequestBody() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::ByteStream::Client HttpService::StartRequestResults::Reader::getRequestBody() const {
  return ::capnp::_::PointerHelpers< ::capnp::ByteStream>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::ByteStream::Client HttpService::StartRequestResults::Builder::getRequestBody() {
  return ::capnp::_::PointerHelpers< ::capnp::ByteStream>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::ByteStream::Client HttpService::StartRequestResults::Pipeline::getRequestBody() {
  return  ::capnp::ByteStream::Client(_typeless.getPointerField(0).asCap());
}
inline void HttpService::StartRequestResults::Builder::setRequestBody( ::capnp::ByteStream::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::ByteStream>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void HttpService::StartRequestResults::Builder::setRequestBody( ::capnp::ByteStream::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::ByteStream>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void HttpService::StartRequestResults::Builder::adoptRequestBody(
    ::capnp::Orphan< ::capnp::ByteStream>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::ByteStream>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::ByteStream> HttpService::StartRequestResults::Builder::disownRequestBody() {
  return ::capnp::_::PointerHelpers< ::capnp::ByteStream>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool HttpService::StartRequestResults::Reader::hasContext() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HttpService::StartRequestResults::Builder::hasContext() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::HttpService::ServerRequestContext::Client HttpService::StartRequestResults::Reader::getContext() const {
  return ::capnp::_::PointerHelpers< ::capnp::HttpService::ServerRequestContext>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::HttpService::ServerRequestContext::Client HttpService::StartRequestResults::Builder::getContext() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpService::ServerRequestContext>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::HttpService::ServerRequestContext::Client HttpService::StartRequestResults::Pipeline::getContext() {
  return  ::capnp::HttpService::ServerRequestContext::Client(_typeless.getPointerField(1).asCap());
}
inline void HttpService::StartRequestResults::Builder::setContext( ::capnp::HttpService::ServerRequestContext::Client&& cap) {
  ::capnp::_::PointerHelpers< ::capnp::HttpService::ServerRequestContext>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void HttpService::StartRequestResults::Builder::setContext( ::capnp::HttpService::ServerRequestContext::Client& cap) {
  ::capnp::_::PointerHelpers< ::capnp::HttpService::ServerRequestContext>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), cap);
}
inline void HttpService::StartRequestResults::Builder::adoptContext(
    ::capnp::Orphan< ::capnp::HttpService::ServerRequestContext>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::HttpService::ServerRequestContext>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::HttpService::ServerRequestContext> HttpService::StartRequestResults::Builder::disownContext() {
  return ::capnp::_::PointerHelpers< ::capnp::HttpService::ServerRequestContext>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline WebSocket::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline WebSocket::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline WebSocket::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline WebSocket::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline WebSocket::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::capnp::WebSocket::Client& WebSocket::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::capnp::WebSocket::Client& WebSocket::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool WebSocket::SendTextParams::Reader::hasText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WebSocket::SendTextParams::Builder::hasText() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSocket::SendTextParams::Reader::getText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSocket::SendTextParams::Builder::getText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WebSocket::SendTextParams::Builder::setText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSocket::SendTextParams::Builder::initText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WebSocket::SendTextParams::Builder::adoptText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSocket::SendTextParams::Builder::disownText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool WebSocket::SendDataParams::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WebSocket::SendDataParams::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader WebSocket::SendDataParams::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder WebSocket::SendDataParams::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WebSocket::SendDataParams::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder WebSocket::SendDataParams::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WebSocket::SendDataParams::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> WebSocket::SendDataParams::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t WebSocket::CloseParams::Reader::getCode() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t WebSocket::CloseParams::Builder::getCode() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void WebSocket::CloseParams::Builder::setCode( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool WebSocket::CloseParams::Reader::hasReason() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WebSocket::CloseParams::Builder::hasReason() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WebSocket::CloseParams::Reader::getReason() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WebSocket::CloseParams::Builder::getReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WebSocket::CloseParams::Builder::setReason( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WebSocket::CloseParams::Builder::initReason(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WebSocket::CloseParams::Builder::adoptReason(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WebSocket::CloseParams::Builder::disownReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::capnp::HttpMethod HttpRequest::Reader::getMethod() const {
  return _reader.getDataField< ::capnp::HttpMethod>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::HttpMethod HttpRequest::Builder::getMethod() {
  return _builder.getDataField< ::capnp::HttpMethod>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HttpRequest::Builder::setMethod( ::capnp::HttpMethod value) {
  _builder.setDataField< ::capnp::HttpMethod>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HttpRequest::Reader::hasUrl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpRequest::Builder::hasUrl() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HttpRequest::Reader::getUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HttpRequest::Builder::getUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HttpRequest::Builder::setUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HttpRequest::Builder::initUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void HttpRequest::Builder::adoptUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HttpRequest::Builder::disownUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HttpRequest::Reader::hasHeaders() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HttpRequest::Builder::hasHeaders() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader HttpRequest::Reader::getHeaders() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder HttpRequest::Builder::getHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void HttpRequest::Builder::setHeaders( ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder HttpRequest::Builder::initHeaders(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void HttpRequest::Builder::adoptHeaders(
    ::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>> HttpRequest::Builder::disownHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename HttpRequest::BodySize::Reader HttpRequest::Reader::getBodySize() const {
  return typename HttpRequest::BodySize::Reader(_reader);
}
inline typename HttpRequest::BodySize::Builder HttpRequest::Builder::getBodySize() {
  return typename HttpRequest::BodySize::Builder(_builder);
}
#if !CAPNP_LITE
inline typename HttpRequest::BodySize::Pipeline HttpRequest::Pipeline::getBodySize() {
  return typename HttpRequest::BodySize::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename HttpRequest::BodySize::Builder HttpRequest::Builder::initBodySize() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename HttpRequest::BodySize::Builder(_builder);
}
inline  ::capnp::HttpRequest::BodySize::Which HttpRequest::BodySize::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::capnp::HttpRequest::BodySize::Which HttpRequest::BodySize::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool HttpRequest::BodySize::Reader::isUnknown() const {
  return which() == HttpRequest::BodySize::UNKNOWN;
}
inline bool HttpRequest::BodySize::Builder::isUnknown() {
  return which() == HttpRequest::BodySize::UNKNOWN;
}
inline  ::capnp::Void HttpRequest::BodySize::Reader::getUnknown() const {
  KJ_IREQUIRE((which() == HttpRequest::BodySize::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void HttpRequest::BodySize::Builder::getUnknown() {
  KJ_IREQUIRE((which() == HttpRequest::BodySize::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HttpRequest::BodySize::Builder::setUnknown( ::capnp::Void value) {
  _builder.setDataField<HttpRequest::BodySize::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, HttpRequest::BodySize::UNKNOWN);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HttpRequest::BodySize::Reader::isFixed() const {
  return which() == HttpRequest::BodySize::FIXED;
}
inline bool HttpRequest::BodySize::Builder::isFixed() {
  return which() == HttpRequest::BodySize::FIXED;
}
inline  ::uint64_t HttpRequest::BodySize::Reader::getFixed() const {
  KJ_IREQUIRE((which() == HttpRequest::BodySize::FIXED),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t HttpRequest::BodySize::Builder::getFixed() {
  KJ_IREQUIRE((which() == HttpRequest::BodySize::FIXED),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void HttpRequest::BodySize::Builder::setFixed( ::uint64_t value) {
  _builder.setDataField<HttpRequest::BodySize::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, HttpRequest::BodySize::FIXED);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t HttpResponse::Reader::getStatusCode() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t HttpResponse::Builder::getStatusCode() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HttpResponse::Builder::setStatusCode( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HttpResponse::Reader::hasStatusText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpResponse::Builder::hasStatusText() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HttpResponse::Reader::getStatusText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HttpResponse::Builder::getStatusText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HttpResponse::Builder::setStatusText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HttpResponse::Builder::initStatusText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void HttpResponse::Builder::adoptStatusText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HttpResponse::Builder::disownStatusText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HttpResponse::Reader::hasHeaders() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HttpResponse::Builder::hasHeaders() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader HttpResponse::Reader::getHeaders() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder HttpResponse::Builder::getHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void HttpResponse::Builder::setHeaders( ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>::Builder HttpResponse::Builder::initHeaders(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void HttpResponse::Builder::adoptHeaders(
    ::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>> HttpResponse::Builder::disownHeaders() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::HttpHeader,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename HttpResponse::BodySize::Reader HttpResponse::Reader::getBodySize() const {
  return typename HttpResponse::BodySize::Reader(_reader);
}
inline typename HttpResponse::BodySize::Builder HttpResponse::Builder::getBodySize() {
  return typename HttpResponse::BodySize::Builder(_builder);
}
#if !CAPNP_LITE
inline typename HttpResponse::BodySize::Pipeline HttpResponse::Pipeline::getBodySize() {
  return typename HttpResponse::BodySize::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename HttpResponse::BodySize::Builder HttpResponse::Builder::initBodySize() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename HttpResponse::BodySize::Builder(_builder);
}
inline  ::capnp::HttpResponse::BodySize::Which HttpResponse::BodySize::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::capnp::HttpResponse::BodySize::Which HttpResponse::BodySize::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool HttpResponse::BodySize::Reader::isUnknown() const {
  return which() == HttpResponse::BodySize::UNKNOWN;
}
inline bool HttpResponse::BodySize::Builder::isUnknown() {
  return which() == HttpResponse::BodySize::UNKNOWN;
}
inline  ::capnp::Void HttpResponse::BodySize::Reader::getUnknown() const {
  KJ_IREQUIRE((which() == HttpResponse::BodySize::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void HttpResponse::BodySize::Builder::getUnknown() {
  KJ_IREQUIRE((which() == HttpResponse::BodySize::UNKNOWN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HttpResponse::BodySize::Builder::setUnknown( ::capnp::Void value) {
  _builder.setDataField<HttpResponse::BodySize::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, HttpResponse::BodySize::UNKNOWN);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HttpResponse::BodySize::Reader::isFixed() const {
  return which() == HttpResponse::BodySize::FIXED;
}
inline bool HttpResponse::BodySize::Builder::isFixed() {
  return which() == HttpResponse::BodySize::FIXED;
}
inline  ::uint64_t HttpResponse::BodySize::Reader::getFixed() const {
  KJ_IREQUIRE((which() == HttpResponse::BodySize::FIXED),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t HttpResponse::BodySize::Builder::getFixed() {
  KJ_IREQUIRE((which() == HttpResponse::BodySize::FIXED),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void HttpResponse::BodySize::Builder::setFixed( ::uint64_t value) {
  _builder.setDataField<HttpResponse::BodySize::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, HttpResponse::BodySize::FIXED);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::capnp::HttpHeader::Which HttpHeader::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::capnp::HttpHeader::Which HttpHeader::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool HttpHeader::Reader::isCommon() const {
  return which() == HttpHeader::COMMON;
}
inline bool HttpHeader::Builder::isCommon() {
  return which() == HttpHeader::COMMON;
}
inline typename HttpHeader::Common::Reader HttpHeader::Reader::getCommon() const {
  KJ_IREQUIRE((which() == HttpHeader::COMMON),
              "Must check which() before get()ing a union member.");
  return typename HttpHeader::Common::Reader(_reader);
}
inline typename HttpHeader::Common::Builder HttpHeader::Builder::getCommon() {
  KJ_IREQUIRE((which() == HttpHeader::COMMON),
              "Must check which() before get()ing a union member.");
  return typename HttpHeader::Common::Builder(_builder);
}
inline typename HttpHeader::Common::Builder HttpHeader::Builder::initCommon() {
  _builder.setDataField<HttpHeader::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, HttpHeader::COMMON);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename HttpHeader::Common::Builder(_builder);
}
inline bool HttpHeader::Reader::isUncommon() const {
  return which() == HttpHeader::UNCOMMON;
}
inline bool HttpHeader::Builder::isUncommon() {
  return which() == HttpHeader::UNCOMMON;
}
inline bool HttpHeader::Reader::hasUncommon() const {
  if (which() != HttpHeader::UNCOMMON) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpHeader::Builder::hasUncommon() {
  if (which() != HttpHeader::UNCOMMON) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::HttpHeader::NameValue::Reader HttpHeader::Reader::getUncommon() const {
  KJ_IREQUIRE((which() == HttpHeader::UNCOMMON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::HttpHeader::NameValue>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::HttpHeader::NameValue::Builder HttpHeader::Builder::getUncommon() {
  KJ_IREQUIRE((which() == HttpHeader::UNCOMMON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::HttpHeader::NameValue>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HttpHeader::Builder::setUncommon( ::capnp::HttpHeader::NameValue::Reader value) {
  _builder.setDataField<HttpHeader::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, HttpHeader::UNCOMMON);
  ::capnp::_::PointerHelpers< ::capnp::HttpHeader::NameValue>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::HttpHeader::NameValue::Builder HttpHeader::Builder::initUncommon() {
  _builder.setDataField<HttpHeader::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, HttpHeader::UNCOMMON);
  return ::capnp::_::PointerHelpers< ::capnp::HttpHeader::NameValue>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HttpHeader::Builder::adoptUncommon(
    ::capnp::Orphan< ::capnp::HttpHeader::NameValue>&& value) {
  _builder.setDataField<HttpHeader::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, HttpHeader::UNCOMMON);
  ::capnp::_::PointerHelpers< ::capnp::HttpHeader::NameValue>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::HttpHeader::NameValue> HttpHeader::Builder::disownUncommon() {
  KJ_IREQUIRE((which() == HttpHeader::UNCOMMON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::HttpHeader::NameValue>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HttpHeader::NameValue::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpHeader::NameValue::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HttpHeader::NameValue::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HttpHeader::NameValue::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HttpHeader::NameValue::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HttpHeader::NameValue::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void HttpHeader::NameValue::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HttpHeader::NameValue::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool HttpHeader::NameValue::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool HttpHeader::NameValue::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HttpHeader::NameValue::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HttpHeader::NameValue::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void HttpHeader::NameValue::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HttpHeader::NameValue::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void HttpHeader::NameValue::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HttpHeader::NameValue::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::capnp::HttpHeader::Common::Which HttpHeader::Common::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline  ::capnp::HttpHeader::Common::Which HttpHeader::Common::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::capnp::CommonHeaderName HttpHeader::Common::Reader::getName() const {
  return _reader.getDataField< ::capnp::CommonHeaderName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::CommonHeaderName HttpHeader::Common::Builder::getName() {
  return _builder.getDataField< ::capnp::CommonHeaderName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HttpHeader::Common::Builder::setName( ::capnp::CommonHeaderName value) {
  _builder.setDataField< ::capnp::CommonHeaderName>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HttpHeader::Common::Reader::isCommonValue() const {
  return which() == HttpHeader::Common::COMMON_VALUE;
}
inline bool HttpHeader::Common::Builder::isCommonValue() {
  return which() == HttpHeader::Common::COMMON_VALUE;
}
inline  ::capnp::CommonHeaderValue HttpHeader::Common::Reader::getCommonValue() const {
  KJ_IREQUIRE((which() == HttpHeader::Common::COMMON_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::CommonHeaderValue>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::capnp::CommonHeaderValue HttpHeader::Common::Builder::getCommonValue() {
  KJ_IREQUIRE((which() == HttpHeader::Common::COMMON_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::CommonHeaderValue>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void HttpHeader::Common::Builder::setCommonValue( ::capnp::CommonHeaderValue value) {
  _builder.setDataField<HttpHeader::Common::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, HttpHeader::Common::COMMON_VALUE);
  _builder.setDataField< ::capnp::CommonHeaderValue>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool HttpHeader::Common::Reader::isValue() const {
  return which() == HttpHeader::Common::VALUE;
}
inline bool HttpHeader::Common::Builder::isValue() {
  return which() == HttpHeader::Common::VALUE;
}
inline bool HttpHeader::Common::Reader::hasValue() const {
  if (which() != HttpHeader::Common::VALUE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool HttpHeader::Common::Builder::hasValue() {
  if (which() != HttpHeader::Common::VALUE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader HttpHeader::Common::Reader::getValue() const {
  KJ_IREQUIRE((which() == HttpHeader::Common::VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder HttpHeader::Common::Builder::getValue() {
  KJ_IREQUIRE((which() == HttpHeader::Common::VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void HttpHeader::Common::Builder::setValue( ::capnp::Text::Reader value) {
  _builder.setDataField<HttpHeader::Common::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, HttpHeader::Common::VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder HttpHeader::Common::Builder::initValue(unsigned int size) {
  _builder.setDataField<HttpHeader::Common::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, HttpHeader::Common::VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void HttpHeader::Common::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<HttpHeader::Common::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, HttpHeader::Common::VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> HttpHeader::Common::Builder::disownValue() {
  KJ_IREQUIRE((which() == HttpHeader::Common::VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace

