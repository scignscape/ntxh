// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: http-over-capnp.capnp

#include "http-over-capnp.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<41> b_92963bfdad2beb6a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    106, 235,  43, 173, 253,  59, 150, 146,
     22,   0,   0,   0,   3,   0,   0,   0,
     50, 230, 242, 175,  10,  40, 101, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  71,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  83, 101, 114, 118, 105,  99,
    101,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    186,  99,  11,  92, 112,  86,  50, 234,
      9,   0,   0,   0, 170,   0,   0,   0,
     59,  63,  79, 211, 191,  38, 174, 153,
     13,   0,   0,   0, 170,   0,   0,   0,
     67, 108, 105, 101, 110, 116,  82, 101,
    113, 117, 101, 115, 116,  67, 111, 110,
    116, 101, 120, 116,   0,   0,   0,   0,
     83, 101, 114, 118, 101, 114,  82, 101,
    113, 117, 101, 115, 116,  67, 111, 110,
    116, 101, 120, 116,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    179, 247,  74, 121,  35, 191, 239, 204,
    222, 197, 254,  48,  44,   7, 218, 169,
     17,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    115, 116,  97, 114, 116,  82, 101, 113,
    117, 101, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_92963bfdad2beb6a = b_92963bfdad2beb6a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_92963bfdad2beb6a[] = {
  &s_a9da072c30fec5de,
  &s_ccefbf23794af7b3,
};
static const uint16_t m_92963bfdad2beb6a[] = {0};
const ::capnp::_::RawSchema s_92963bfdad2beb6a = {
  0x92963bfdad2beb6a, b_92963bfdad2beb6a.words, 41, d_92963bfdad2beb6a, m_92963bfdad2beb6a,
  2, 1, nullptr, nullptr, nullptr, { &s_92963bfdad2beb6a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<44> b_ea3256705c0b63ba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186,  99,  11,  92, 112,  86,  50, 234,
     34,   0,   0,   0,   3,   0,   0,   0,
    106, 235,  43, 173, 253,  59, 150, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 135,   0,   0,   0,
    129,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  83, 101, 114, 118, 105,  99,
    101,  46,  67, 108, 105, 101, 110, 116,
     82, 101, 113, 117, 101, 115, 116,  67,
    111, 110, 116, 101, 120, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,  30, 144, 138,  37, 102, 230, 129,
    233, 216,  87, 165, 215, 133,  92, 149,
     49,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    193, 210,  33,  94,  64,  11, 133, 246,
     61, 108, 216, 173, 253, 110,  20, 189,
     29,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    115, 116,  97, 114, 116,  82, 101, 115,
    112, 111, 110, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 116,  97, 114, 116,  87, 101,  98,
     83, 111,  99, 107, 101, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ea3256705c0b63ba = b_ea3256705c0b63ba.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ea3256705c0b63ba[] = {
  &s_81e666258a901e30,
  &s_955c85d7a557d8e9,
  &s_bd146efdadd86c3d,
  &s_f6850b405e21d2c1,
};
static const uint16_t m_ea3256705c0b63ba[] = {0, 1};
const ::capnp::_::RawSchema s_ea3256705c0b63ba = {
  0xea3256705c0b63ba, b_ea3256705c0b63ba.words, 44, d_ea3256705c0b63ba, m_ea3256705c0b63ba,
  4, 2, nullptr, nullptr, nullptr, { &s_ea3256705c0b63ba, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_81e666258a901e30 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48,  30, 144, 138,  37, 102, 230, 129,
     55,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  83, 101, 114, 118, 105,  99,
    101,  46,  67, 108, 105, 101, 110, 116,
     82, 101, 113, 117, 101, 115, 116,  67,
    111, 110, 116, 101, 120, 116,  46, 115,
    116,  97, 114, 116,  82, 101, 115, 112,
    111, 110, 115, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    153,  18,  83, 241,  28,  53,  53, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_81e666258a901e30 = b_81e666258a901e30.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_81e666258a901e30[] = {
  &s_f235351cf1531299,
};
static const uint16_t m_81e666258a901e30[] = {0};
static const uint16_t i_81e666258a901e30[] = {0};
const ::capnp::_::RawSchema s_81e666258a901e30 = {
  0x81e666258a901e30, b_81e666258a901e30.words, 39, d_81e666258a901e30, m_81e666258a901e30,
  1, 1, i_81e666258a901e30, nullptr, nullptr, { &s_81e666258a901e30, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_955c85d7a557d8e9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 216,  87, 165, 215, 133,  92, 149,
     55,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  83, 101, 114, 118, 105,  99,
    101,  46,  67, 108, 105, 101, 110, 116,
     82, 101, 113, 117, 101, 115, 116,  67,
    111, 110, 116, 101, 120, 116,  46, 115,
    116,  97, 114, 116,  82, 101, 115, 112,
    111, 110, 115, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     98, 111, 100, 121,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    102, 151,  10, 220, 160, 216, 231, 210,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_955c85d7a557d8e9 = b_955c85d7a557d8e9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_955c85d7a557d8e9[] = {
  &s_d2e7d8a0dc0a9766,
};
static const uint16_t m_955c85d7a557d8e9[] = {0};
static const uint16_t i_955c85d7a557d8e9[] = {0};
const ::capnp::_::RawSchema s_955c85d7a557d8e9 = {
  0x955c85d7a557d8e9, b_955c85d7a557d8e9.words, 38, d_955c85d7a557d8e9, m_955c85d7a557d8e9,
  1, 1, i_955c85d7a557d8e9, nullptr, nullptr, { &s_955c85d7a557d8e9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<58> b_f6850b405e21d2c1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    193, 210,  33,  94,  64,  11, 133, 246,
     55,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  83, 101, 114, 118, 105,  99,
    101,  46,  67, 108, 105, 101, 110, 116,
     82, 101, 113, 117, 101, 115, 116,  67,
    111, 110, 116, 101, 120, 116,  46, 115,
    116,  97, 114, 116,  87, 101,  98,  83,
    111,  99, 107, 101, 116,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 100, 101, 114, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     40, 210, 111,  11,  88,  71, 144, 179,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 112,  83, 111,  99, 107, 101, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     35, 168, 202, 244, 169,  51, 156, 176,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f6850b405e21d2c1 = b_f6850b405e21d2c1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f6850b405e21d2c1[] = {
  &s_b09c33a9f4caa823,
  &s_b39047580b6fd228,
};
static const uint16_t m_f6850b405e21d2c1[] = {0, 1};
static const uint16_t i_f6850b405e21d2c1[] = {0, 1};
const ::capnp::_::RawSchema s_f6850b405e21d2c1 = {
  0xf6850b405e21d2c1, b_f6850b405e21d2c1.words, 58, d_f6850b405e21d2c1, m_f6850b405e21d2c1,
  2, 2, i_f6850b405e21d2c1, nullptr, nullptr, { &s_f6850b405e21d2c1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_bd146efdadd86c3d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     61, 108, 216, 173, 253, 110,  20, 189,
     55,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  83, 101, 114, 118, 105,  99,
    101,  46,  67, 108, 105, 101, 110, 116,
     82, 101, 113, 117, 101, 115, 116,  67,
    111, 110, 116, 101, 120, 116,  46, 115,
    116,  97, 114, 116,  87, 101,  98,  83,
    111,  99, 107, 101, 116,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    100, 111, 119, 110,  83, 111,  99, 107,
    101, 116,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     35, 168, 202, 244, 169,  51, 156, 176,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bd146efdadd86c3d = b_bd146efdadd86c3d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bd146efdadd86c3d[] = {
  &s_b09c33a9f4caa823,
};
static const uint16_t m_bd146efdadd86c3d[] = {0};
static const uint16_t i_bd146efdadd86c3d[] = {0};
const ::capnp::_::RawSchema s_bd146efdadd86c3d = {
  0xbd146efdadd86c3d, b_bd146efdadd86c3d.words, 39, d_bd146efdadd86c3d, m_bd146efdadd86c3d,
  1, 1, i_bd146efdadd86c3d, nullptr, nullptr, { &s_bd146efdadd86c3d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_99ae26bfd34f3f3b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59,  63,  79, 211, 191,  38, 174, 153,
     34,   0,   0,   0,   3,   0,   0,   0,
    106, 235,  43, 173, 253,  59, 150, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  83, 101, 114, 118, 105,  99,
    101,  46,  83, 101, 114, 118, 101, 114,
     82, 101, 113, 117, 101, 115, 116,  67,
    111, 110, 116, 101, 120, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_99ae26bfd34f3f3b = b_99ae26bfd34f3f3b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_99ae26bfd34f3f3b = {
  0x99ae26bfd34f3f3b, b_99ae26bfd34f3f3b.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_99ae26bfd34f3f3b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_ccefbf23794af7b3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    179, 247,  74, 121,  35, 191, 239, 204,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  83, 101, 114, 118, 105,  99,
    101,  46, 115, 116,  97, 114, 116,  82,
    101, 113, 117, 101, 115, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    102,  72,  42,   5, 177, 141, 176, 222,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    186,  99,  11,  92, 112,  86,  50, 234,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ccefbf23794af7b3 = b_ccefbf23794af7b3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ccefbf23794af7b3[] = {
  &s_deb08db1052a4866,
  &s_ea3256705c0b63ba,
};
static const uint16_t m_ccefbf23794af7b3[] = {1, 0};
static const uint16_t i_ccefbf23794af7b3[] = {0, 1};
const ::capnp::_::RawSchema s_ccefbf23794af7b3 = {
  0xccefbf23794af7b3, b_ccefbf23794af7b3.words, 50, d_ccefbf23794af7b3, m_ccefbf23794af7b3,
  2, 2, i_ccefbf23794af7b3, nullptr, nullptr, { &s_ccefbf23794af7b3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_a9da072c30fec5de = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    222, 197, 254,  48,  44,   7, 218, 169,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  83, 101, 114, 118, 105,  99,
    101,  46, 115, 116,  97, 114, 116,  82,
    101, 113, 117, 101, 115, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,  66,
    111, 100, 121,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    102, 151,  10, 220, 160, 216, 231, 210,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 120, 116,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     59,  63,  79, 211, 191,  38, 174, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a9da072c30fec5de = b_a9da072c30fec5de.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a9da072c30fec5de[] = {
  &s_99ae26bfd34f3f3b,
  &s_d2e7d8a0dc0a9766,
};
static const uint16_t m_a9da072c30fec5de[] = {1, 0};
static const uint16_t i_a9da072c30fec5de[] = {0, 1};
const ::capnp::_::RawSchema s_a9da072c30fec5de = {
  0xa9da072c30fec5de, b_a9da072c30fec5de.words, 51, d_a9da072c30fec5de, m_a9da072c30fec5de,
  2, 2, i_a9da072c30fec5de, nullptr, nullptr, { &s_a9da072c30fec5de, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_b09c33a9f4caa823 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     35, 168, 202, 244, 169,  51, 156, 176,
     22,   0,   0,   0,   3,   0,   0,   0,
     50, 230, 242, 175,  10,  40, 101, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 199,   0,   0,   0,
    157,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  87, 101,
     98,  83, 111,  99, 107, 101, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    195, 120,  87,  46, 137,  70, 249, 220,
    110, 177, 192, 119,  51, 154,  95, 153,
     81,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     15,   3,  47,  67, 182,  79, 184, 169,
    110, 177, 192, 119,  51, 154,  95, 153,
     61,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    154,  94,  70,  79,  69, 202,  31, 186,
     34, 149, 218,  87,  80, 232,  63, 145,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
    115, 101, 110, 100,  84, 101, 120, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 110, 100,  68,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 108, 111, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b09c33a9f4caa823 = b_b09c33a9f4caa823.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b09c33a9f4caa823[] = {
  &s_913fe85057da9522,
  &s_995f9a3377c0b16e,
  &s_a9b84fb6432f030f,
  &s_ba1fca454f465e9a,
  &s_dcf946892e5778c3,
};
static const uint16_t m_b09c33a9f4caa823[] = {2, 1, 0};
const ::capnp::_::RawSchema s_b09c33a9f4caa823 = {
  0xb09c33a9f4caa823, b_b09c33a9f4caa823.words, 51, d_b09c33a9f4caa823, m_b09c33a9f4caa823,
  5, 3, nullptr, nullptr, nullptr, { &s_b09c33a9f4caa823, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_dcf946892e5778c3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    195, 120,  87,  46, 137,  70, 249, 220,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  87, 101,
     98,  83, 111,  99, 107, 101, 116,  46,
    115, 101, 110, 100,  84, 101, 120, 116,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 101, 120, 116,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dcf946892e5778c3 = b_dcf946892e5778c3.words;
#if !CAPNP_LITE
static const uint16_t m_dcf946892e5778c3[] = {0};
static const uint16_t i_dcf946892e5778c3[] = {0};
const ::capnp::_::RawSchema s_dcf946892e5778c3 = {
  0xdcf946892e5778c3, b_dcf946892e5778c3.words, 34, nullptr, m_dcf946892e5778c3,
  0, 1, i_dcf946892e5778c3, nullptr, nullptr, { &s_dcf946892e5778c3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a9b84fb6432f030f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15,   3,  47,  67, 182,  79, 184, 169,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  87, 101,
     98,  83, 111,  99, 107, 101, 116,  46,
    115, 101, 110, 100,  68,  97, 116,  97,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a9b84fb6432f030f = b_a9b84fb6432f030f.words;
#if !CAPNP_LITE
static const uint16_t m_a9b84fb6432f030f[] = {0};
static const uint16_t i_a9b84fb6432f030f[] = {0};
const ::capnp::_::RawSchema s_a9b84fb6432f030f = {
  0xa9b84fb6432f030f, b_a9b84fb6432f030f.words, 34, nullptr, m_a9b84fb6432f030f,
  0, 1, i_a9b84fb6432f030f, nullptr, nullptr, { &s_a9b84fb6432f030f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_ba1fca454f465e9a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    154,  94,  70,  79,  69, 202,  31, 186,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  87, 101,
     98,  83, 111,  99, 107, 101, 116,  46,
     99, 108, 111, 115, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 100, 101,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101,  97, 115, 111, 110,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba1fca454f465e9a = b_ba1fca454f465e9a.words;
#if !CAPNP_LITE
static const uint16_t m_ba1fca454f465e9a[] = {0, 1};
static const uint16_t i_ba1fca454f465e9a[] = {0, 1};
const ::capnp::_::RawSchema s_ba1fca454f465e9a = {
  0xba1fca454f465e9a, b_ba1fca454f465e9a.words, 49, nullptr, m_ba1fca454f465e9a,
  0, 2, i_ba1fca454f465e9a, nullptr, nullptr, { &s_ba1fca454f465e9a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_913fe85057da9522 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34, 149, 218,  87,  80, 232,  63, 145,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  87, 101,
     98,  83, 111,  99, 107, 101, 116,  46,
     99, 108, 111, 115, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_913fe85057da9522 = b_913fe85057da9522.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_913fe85057da9522 = {
  0x913fe85057da9522, b_913fe85057da9522.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_913fe85057da9522, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<77> b_deb08db1052a4866 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    102,  72,  42,   5, 177, 141, 176, 222,
     22,   0,   0,   0,   1,   0,   2,   0,
     50, 230, 242, 175,  10,  40, 101, 182,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  82, 101, 113, 117, 101, 115,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    186, 178, 201,  99, 204,  30,  84, 190,
    125,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 116, 104, 111, 100,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     30, 115, 131, 115,   0,  60, 189, 141,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 114, 108,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 101,  97, 100, 101, 114, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     40, 210, 111,  11,  88,  71, 144, 179,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 100, 121,  83, 105, 122, 101,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_deb08db1052a4866 = b_deb08db1052a4866.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_deb08db1052a4866[] = {
  &s_8dbd3c007383731e,
  &s_b39047580b6fd228,
  &s_be541ecc63c9b2ba,
};
static const uint16_t m_deb08db1052a4866[] = {3, 2, 0, 1};
static const uint16_t i_deb08db1052a4866[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_deb08db1052a4866 = {
  0xdeb08db1052a4866, b_deb08db1052a4866.words, 77, d_deb08db1052a4866, m_deb08db1052a4866,
  3, 4, i_deb08db1052a4866, nullptr, nullptr, { &s_deb08db1052a4866, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_be541ecc63c9b2ba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186, 178, 201,  99, 204,  30,  84, 190,
     34,   0,   0,   0,   1,   0,   2,   0,
    102,  72,  42,   5, 177, 141, 176, 222,
      2,   0,   7,   0,   1,   0,   2,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  82, 101, 113, 117, 101, 115,
    116,  46,  98, 111, 100, 121,  83, 105,
    122, 101,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 107, 110, 111, 119, 110,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 120, 101, 100,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_be541ecc63c9b2ba = b_be541ecc63c9b2ba.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_be541ecc63c9b2ba[] = {
  &s_deb08db1052a4866,
};
static const uint16_t m_be541ecc63c9b2ba[] = {1, 0};
static const uint16_t i_be541ecc63c9b2ba[] = {0, 1};
const ::capnp::_::RawSchema s_be541ecc63c9b2ba = {
  0xbe541ecc63c9b2ba, b_be541ecc63c9b2ba.words, 49, d_be541ecc63c9b2ba, m_be541ecc63c9b2ba,
  1, 2, i_be541ecc63c9b2ba, nullptr, nullptr, { &s_be541ecc63c9b2ba, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<79> b_f235351cf1531299 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    153,  18,  83, 241,  28,  53,  53, 242,
     22,   0,   0,   0,   1,   0,   2,   0,
     50, 230, 242, 175,  10,  40, 101, 182,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  82, 101, 115, 112, 111, 110,
    115, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8,  94, 153,  95, 126,  67,   2, 202,
    133,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 116, 117, 115,  67, 111,
    100, 101,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 116, 117, 115,  84, 101,
    120, 116,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 101,  97, 100, 101, 114, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     40, 210, 111,  11,  88,  71, 144, 179,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 100, 121,  83, 105, 122, 101,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f235351cf1531299 = b_f235351cf1531299.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f235351cf1531299[] = {
  &s_b39047580b6fd228,
  &s_ca02437e5f995e08,
};
static const uint16_t m_f235351cf1531299[] = {3, 2, 0, 1};
static const uint16_t i_f235351cf1531299[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_f235351cf1531299 = {
  0xf235351cf1531299, b_f235351cf1531299.words, 79, d_f235351cf1531299, m_f235351cf1531299,
  2, 4, i_f235351cf1531299, nullptr, nullptr, { &s_f235351cf1531299, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_ca02437e5f995e08 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      8,  94, 153,  95, 126,  67,   2, 202,
     35,   0,   0,   0,   1,   0,   2,   0,
    153,  18,  83, 241,  28,  53,  53, 242,
      2,   0,   7,   0,   1,   0,   2,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  82, 101, 115, 112, 111, 110,
    115, 101,  46,  98, 111, 100, 121,  83,
    105, 122, 101,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 107, 110, 111, 119, 110,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 120, 101, 100,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca02437e5f995e08 = b_ca02437e5f995e08.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca02437e5f995e08[] = {
  &s_f235351cf1531299,
};
static const uint16_t m_ca02437e5f995e08[] = {1, 0};
static const uint16_t i_ca02437e5f995e08[] = {0, 1};
const ::capnp::_::RawSchema s_ca02437e5f995e08 = {
  0xca02437e5f995e08, b_ca02437e5f995e08.words, 49, d_ca02437e5f995e08, m_ca02437e5f995e08,
  1, 2, i_ca02437e5f995e08, nullptr, nullptr, { &s_ca02437e5f995e08, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<129> b_8dbd3c007383731e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30, 115, 131, 115,   0,  60, 189, 141,
     22,   0,   0,   0,   2,   0,   0,   0,
     50, 230, 242, 175,  10,  40, 101, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  77, 101, 116, 104, 111, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
    104,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     41,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     33,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     25,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     17,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      1,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    249,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    225,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
    197,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     19,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     22,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     23,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,   0,   0,   0,   0,   0,
    104, 101,  97, 100,   0,   0,   0,   0,
    112, 111, 115, 116,   0,   0,   0,   0,
    112, 117, 116,   0,   0,   0,   0,   0,
    100, 101, 108, 101, 116, 101,   0,   0,
    112,  97, 116,  99, 104,   0,   0,   0,
    112, 117, 114, 103, 101,   0,   0,   0,
    111, 112, 116, 105, 111, 110, 115,   0,
    116, 114,  97,  99, 101,   0,   0,   0,
     99, 111, 112, 121,   0,   0,   0,   0,
    108, 111,  99, 107,   0,   0,   0,   0,
    109, 107,  99, 111, 108,   0,   0,   0,
    109, 111, 118, 101,   0,   0,   0,   0,
    112, 114, 111, 112, 102, 105, 110, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 112, 112,  97, 116,  99,
    104,   0,   0,   0,   0,   0,   0,   0,
    115, 101,  97, 114,  99, 104,   0,   0,
    117, 110, 108, 111,  99, 107,   0,   0,
     97,  99, 108,   0,   0,   0,   0,   0,
    114, 101, 112, 111, 114, 116,   0,   0,
    109, 107,  97,  99, 116, 105, 118, 105,
    116, 121,   0,   0,   0,   0,   0,   0,
     99, 104, 101,  99, 107, 111, 117, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 114, 103, 101,   0,   0,   0,
    109, 115, 101,  97, 114,  99, 104,   0,
    110, 111, 116, 105, 102, 121,   0,   0,
    115, 117,  98, 115,  99, 114, 105,  98,
    101,   0,   0,   0,   0,   0,   0,   0,
    117, 110, 115, 117,  98, 115,  99, 114,
    105,  98, 101,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8dbd3c007383731e = b_8dbd3c007383731e.words;
#if !CAPNP_LITE
static const uint16_t m_8dbd3c007383731e[] = {17, 20, 9, 4, 0, 1, 10, 21, 19, 11, 12, 22, 23, 7, 5, 2, 13, 14, 6, 3, 18, 15, 24, 8, 16, 25};
const ::capnp::_::RawSchema s_8dbd3c007383731e = {
  0x8dbd3c007383731e, b_8dbd3c007383731e.words, 129, nullptr, m_8dbd3c007383731e,
  0, 26, nullptr, nullptr, nullptr, { &s_8dbd3c007383731e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(HttpMethod_8dbd3c007383731e, 8dbd3c007383731e);
static const ::capnp::_::AlignedData<22> b_857745131db6fc83 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
     22,   0,   0,   0,   5,   0,   8,   0,
     50, 230, 242, 175,  10,  40, 101, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   0,   0,   0,   3,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  99, 111,
    109, 109, 111, 110,  84, 101, 120, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_857745131db6fc83 = b_857745131db6fc83.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_857745131db6fc83 = {
  0x857745131db6fc83, b_857745131db6fc83.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_857745131db6fc83, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<714> b_ee4db03aab7fb4be = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190, 180, 127, 171,  58, 176,  77, 238,
     22,   0,   0,   0,   2,   0,   0,   0,
     50, 230, 242, 175,  10,  40, 101, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 135,   4,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  67, 111,
    109, 109, 111, 110,  72, 101,  97, 100,
    101, 114,  78,  97, 109, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
    192,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   2,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     49,   2,   0,   0, 114,   0,   0,   0,
     53,   2,   0,   0,  31,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     85,   2,   0,   0, 122,   0,   0,   0,
     89,   2,   0,   0,  31,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    121,   2,   0,   0, 122,   0,   0,   0,
    125,   2,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    157,   2,   0,   0, 106,   0,   0,   0,
    161,   2,   0,   0,  31,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    193,   2,   0,   0,  58,   0,   0,   0,
    193,   2,   0,   0,  31,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    221,   2,   0,   0, 202,   0,   0,   0,
    233,   2,   0,   0,  31,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     17,   3,   0,   0,  34,   0,   0,   0,
     17,   3,   0,   0,  31,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     45,   3,   0,   0,  50,   0,   0,   0,
     45,   3,   0,   0,  31,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     73,   3,   0,   0, 114,   0,   0,   0,
     77,   3,   0,   0,  31,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    109,   3,   0,   0, 106,   0,   0,   0,
    113,   3,   0,   0,  31,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
    145,   3,   0,   0, 154,   0,   0,   0,
    153,   3,   0,   0,  31,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
    189,   3,   0,   0, 130,   0,   0,   0,
    193,   3,   0,   0,  31,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
    229,   3,   0,   0, 130,   0,   0,   0,
    233,   3,   0,   0,  31,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
     13,   4,   0,   0, 114,   0,   0,   0,
     17,   4,   0,   0,  31,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     49,   4,   0,   0, 130,   0,   0,   0,
     53,   4,   0,   0,  31,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     89,   4,   0,   0, 106,   0,   0,   0,
     93,   4,   0,   0,  31,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    125,   4,   0,   0,  98,   0,   0,   0,
    129,   4,   0,   0,  31,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
    161,   4,   0,   0,  58,   0,   0,   0,
    161,   4,   0,   0,  31,   0,   0,   0,
     19,   0,   0,   0,   0,   0,   0,   0,
    189,   4,   0,   0,  42,   0,   0,   0,
    189,   4,   0,   0,  31,   0,   0,   0,
     20,   0,   0,   0,   0,   0,   0,   0,
    217,   4,   0,   0,  42,   0,   0,   0,
    217,   4,   0,   0,  31,   0,   0,   0,
     21,   0,   0,   0,   0,   0,   0,   0,
    245,   4,   0,   0,  58,   0,   0,   0,
    245,   4,   0,   0,  31,   0,   0,   0,
     22,   0,   0,   0,   0,   0,   0,   0,
     17,   5,   0,   0,  66,   0,   0,   0,
     17,   5,   0,   0,  31,   0,   0,   0,
     23,   0,   0,   0,   0,   0,   0,   0,
     45,   5,   0,   0,  42,   0,   0,   0,
     45,   5,   0,   0,  31,   0,   0,   0,
     24,   0,   0,   0,   0,   0,   0,   0,
     73,   5,   0,   0,  42,   0,   0,   0,
     73,   5,   0,   0,  31,   0,   0,   0,
     25,   0,   0,   0,   0,   0,   0,   0,
    101,   5,   0,   0,  66,   0,   0,   0,
    101,   5,   0,   0,  31,   0,   0,   0,
     26,   0,   0,   0,   0,   0,   0,   0,
    133,   5,   0,   0, 130,   0,   0,   0,
    137,   5,   0,   0,  31,   0,   0,   0,
     27,   0,   0,   0,   0,   0,   0,   0,
    173,   5,   0,   0,  98,   0,   0,   0,
    177,   5,   0,   0,  31,   0,   0,   0,
     28,   0,   0,   0,   0,   0,   0,   0,
    209,   5,   0,   0,  66,   0,   0,   0,
    209,   5,   0,   0,  31,   0,   0,   0,
     29,   0,   0,   0,   0,   0,   0,   0,
    241,   5,   0,   0, 146,   0,   0,   0,
    249,   5,   0,   0,  31,   0,   0,   0,
     30,   0,   0,   0,   0,   0,   0,   0,
     29,   6,   0,   0, 106,   0,   0,   0,
     33,   6,   0,   0,  31,   0,   0,   0,
     31,   0,   0,   0,   0,   0,   0,   0,
     65,   6,   0,   0,  42,   0,   0,   0,
     65,   6,   0,   0,  31,   0,   0,   0,
     32,   0,   0,   0,   0,   0,   0,   0,
     93,   6,   0,   0,  74,   0,   0,   0,
     97,   6,   0,   0,  31,   0,   0,   0,
     33,   0,   0,   0,   0,   0,   0,   0,
    129,   6,   0,   0,  98,   0,   0,   0,
    133,   6,   0,   0,  31,   0,   0,   0,
     34,   0,   0,   0,   0,   0,   0,   0,
    165,   6,   0,   0, 146,   0,   0,   0,
    173,   6,   0,   0,  31,   0,   0,   0,
     35,   0,   0,   0,   0,   0,   0,   0,
    209,   6,   0,   0, 154,   0,   0,   0,
    217,   6,   0,   0,  31,   0,   0,   0,
     36,   0,   0,   0,   0,   0,   0,   0,
    253,   6,   0,   0,  50,   0,   0,   0,
    253,   6,   0,   0,  31,   0,   0,   0,
     37,   0,   0,   0,   0,   0,   0,   0,
     25,   7,   0,   0,  66,   0,   0,   0,
     25,   7,   0,   0,  31,   0,   0,   0,
     38,   0,   0,   0,   0,   0,   0,   0,
     53,   7,   0,   0,  66,   0,   0,   0,
     53,   7,   0,   0,  31,   0,   0,   0,
     39,   0,   0,   0,   0,   0,   0,   0,
     81,   7,   0,   0,  90,   0,   0,   0,
     85,   7,   0,   0,  31,   0,   0,   0,
     40,   0,   0,   0,   0,   0,   0,   0,
    117,   7,   0,   0,  58,   0,   0,   0,
    117,   7,   0,   0,  31,   0,   0,   0,
     41,   0,   0,   0,   0,   0,   0,   0,
    145,   7,   0,   0,  82,   0,   0,   0,
    149,   7,   0,   0,  31,   0,   0,   0,
     42,   0,   0,   0,   0,   0,   0,   0,
    181,   7,   0,   0, 194,   0,   0,   0,
    189,   7,   0,   0,  31,   0,   0,   0,
     43,   0,   0,   0,   0,   0,   0,   0,
    229,   7,   0,   0, 138,   0,   0,   0,
    237,   7,   0,   0,  31,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   0,   0,
     17,   8,   0,   0,  82,   0,   0,   0,
     21,   8,   0,   0,  31,   0,   0,   0,
     45,   0,   0,   0,   0,   0,   0,   0,
     53,   8,   0,   0,  42,   0,   0,   0,
     53,   8,   0,   0,  31,   0,   0,   0,
     46,   0,   0,   0,   0,   0,   0,   0,
     81,   8,   0,   0,  34,   0,   0,   0,
     81,   8,   0,   0,  31,   0,   0,   0,
     47,   0,   0,   0,   0,   0,   0,   0,
    109,   8,   0,   0, 130,   0,   0,   0,
    113,   8,   0,   0,  31,   0,   0,   0,
    105, 110, 118,  97, 108, 105, 100,   0,
     97,  99,  99, 101, 112, 116,  67, 104,
     97, 114, 115, 101, 116,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 122,   0,   0,   0,
     65,  99,  99, 101, 112, 116,  45,  67,
    104,  97, 114, 115, 101, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99,  99, 101, 112, 116,  69, 110,
     99, 111, 100, 105, 110, 103,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 130,   0,   0,   0,
     65,  99,  99, 101, 112, 116,  45,  69,
    110,  99, 111, 100, 105, 110, 103,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99,  99, 101, 112, 116,  76,  97,
    110, 103, 117,  97, 103, 101,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 130,   0,   0,   0,
     65,  99,  99, 101, 112, 116,  45,  76,
     97, 110, 103, 117,  97, 103, 101,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99,  99, 101, 112, 116,  82,  97,
    110, 103, 101, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 114,   0,   0,   0,
     65,  99,  99, 101, 112, 116,  45,  82,
     97, 110, 103, 101, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99,  99, 101, 112, 116,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  58,   0,   0,   0,
     65,  99,  99, 101, 112, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99,  99, 101, 115, 115,  67, 111,
    110, 116, 114, 111, 108,  65, 108, 108,
    111, 119,  79, 114, 105, 103, 105, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     28,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 226,   0,   0,   0,
     65,  99,  99, 101, 115, 115,  45,  67,
    111, 110, 116, 114, 111, 108,  45,  65,
    108, 108, 111, 119,  45,  79, 114, 105,
    103, 105, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 103, 101,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  34,   0,   0,   0,
     65, 103, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 108, 108, 111, 119,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  50,   0,   0,   0,
     65, 108, 108, 111, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 117, 116, 104, 111, 114, 105, 122,
     97, 116, 105, 111, 110,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 114,   0,   0,   0,
     65, 117, 116, 104, 111, 114, 105, 122,
     97, 116, 105, 111, 110,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97,  99, 104, 101,  67, 111, 110,
    116, 114, 111, 108,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 114,   0,   0,   0,
     67,  97,  99, 104, 101,  45,  67, 111,
    110, 116, 114, 111, 108,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,  68,
    105, 115, 112, 111, 115, 105, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 162,   0,   0,   0,
     67, 111, 110, 116, 101, 110, 116,  45,
     68, 105, 115, 112, 111, 115, 105, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,  69,
    110,  99, 111, 100, 105, 110, 103,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 138,   0,   0,   0,
     67, 111, 110, 116, 101, 110, 116,  45,
     69, 110,  99, 111, 100, 105, 110, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,  76,
     97, 110, 103, 117,  97, 103, 101,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 138,   0,   0,   0,
     67, 111, 110, 116, 101, 110, 116,  45,
     76,  97, 110, 103, 117,  97, 103, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,  76,
    101, 110, 103, 116, 104,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 122,   0,   0,   0,
     67, 111, 110, 116, 101, 110, 116,  45,
     76, 101, 110, 103, 116, 104,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,  76,
    111,  99,  97, 116, 105, 111, 110,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 138,   0,   0,   0,
     67, 111, 110, 116, 101, 110, 116,  45,
     76, 111,  99,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,  82,
     97, 110, 103, 101,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 114,   0,   0,   0,
     67, 111, 110, 116, 101, 110, 116,  45,
     82,  97, 110, 103, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,  84,
    121, 112, 101,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 106,   0,   0,   0,
     67, 111, 110, 116, 101, 110, 116,  45,
     84, 121, 112, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 111, 107, 105, 101,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  58,   0,   0,   0,
     67, 111, 111, 107, 105, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116, 101,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  42,   0,   0,   0,
     68,  97, 116, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 116,  97, 103,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  42,   0,   0,   0,
     69,  84,  97, 103,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 120, 112, 101,  99, 116,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  58,   0,   0,   0,
     69, 120, 112, 101,  99, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 120, 112, 105, 114, 101, 115,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  66,   0,   0,   0,
     69, 120, 112, 105, 114, 101, 115,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 114, 111, 109,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  42,   0,   0,   0,
     70, 114, 111, 109,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 115, 116,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  42,   0,   0,   0,
     72, 111, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 102,  77,  97, 116,  99, 104,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  74,   0,   0,   0,
     73, 102,  45,  77,  97, 116,  99, 104,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 102,  77, 111, 100, 105, 102, 105,
    101, 100,  83, 105, 110,  99, 101,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 146,   0,   0,   0,
     73, 102,  45,  77, 111, 100, 105, 102,
    105, 101, 100,  45,  83, 105, 110,  99,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 102,  78, 111, 110, 101,  77,  97,
    116,  99, 104,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 114,   0,   0,   0,
     73, 102,  45,  78, 111, 110, 101,  45,
     77,  97, 116,  99, 104,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 102,  82,  97, 110, 103, 101,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  74,   0,   0,   0,
     73, 102,  45,  82,  97, 110, 103, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 102,  85, 110, 109, 111, 100, 105,
    102, 105, 101, 100,  83, 105, 110,  99,
    101,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 162,   0,   0,   0,
     73, 102,  45,  85, 110, 109, 111, 100,
    105, 102, 105, 101, 100,  45,  83, 105,
    110,  99, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,  97, 115, 116,  77, 111, 100, 105,
    102, 105, 101, 100,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 114,   0,   0,   0,
     76,  97, 115, 116,  45,  77, 111, 100,
    105, 102, 105, 101, 100,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 110, 107,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  42,   0,   0,   0,
     76, 105, 110, 107,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 111,  99,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  74,   0,   0,   0,
     76, 111,  99,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 120,  70, 111, 114, 119,  97,
    114, 100, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 106,   0,   0,   0,
     77,  97, 120,  45,  70, 111, 114, 119,
     97, 114, 100, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 120, 121,  65, 117, 116,
    104, 101, 110, 116, 105,  99,  97, 116,
    101,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 154,   0,   0,   0,
     80, 114, 111, 120, 121,  45,  65, 117,
    116, 104, 101, 110, 116, 105,  99,  97,
    116, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 111, 120, 121,  65, 117, 116,
    104, 111, 114, 105, 122,  97, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 162,   0,   0,   0,
     80, 114, 111, 120, 121,  45,  65, 117,
    116, 104, 111, 114, 105, 122,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114,  97, 110, 103, 101,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  50,   0,   0,   0,
     82,  97, 110, 103, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 102, 101, 114, 101, 114,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  66,   0,   0,   0,
     82, 101, 102, 101, 114, 101, 114,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 102, 114, 101, 115, 104,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  66,   0,   0,   0,
     82, 101, 102, 114, 101, 115, 104,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 116, 114, 121,  65, 102, 116,
    101, 114,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  98,   0,   0,   0,
     82, 101, 116, 114, 121,  45,  65, 102,
    116, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 101, 114,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  58,   0,   0,   0,
     83, 101, 114, 118, 101, 114,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 116,  67, 111, 111, 107, 105,
    101,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  90,   0,   0,   0,
     83, 101, 116,  45,  67, 111, 111, 107,
    105, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 105,  99, 116,  84, 114,
     97, 110, 115, 112, 111, 114, 116,  83,
    101,  99, 117, 114, 105, 116, 121,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     28,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 210,   0,   0,   0,
     83, 116, 114, 105,  99, 116,  45,  84,
    114,  97, 110, 115, 112, 111, 114, 116,
     45,  83, 101,  99, 117, 114, 105, 116,
    121,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114,  97, 110, 115, 102, 101, 114,
     69, 110,  99, 111, 100, 105, 110, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 146,   0,   0,   0,
     84, 114,  97, 110, 115, 102, 101, 114,
     45,  69, 110,  99, 111, 100, 105, 110,
    103,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 115, 101, 114,  65, 103, 101, 110,
    116,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  90,   0,   0,   0,
     85, 115, 101, 114,  45,  65, 103, 101,
    110, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 114, 121,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  42,   0,   0,   0,
     86,  97, 114, 121,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 105,  97,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  34,   0,   0,   0,
     86, 105,  97,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 119, 119,  65, 117, 116, 104, 101,
    110, 116, 105,  99,  97, 116, 101,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     24,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 138,   0,   0,   0,
     87,  87,  87,  45,  65, 117, 116, 104,
    101, 110, 116, 105,  99,  97, 116, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ee4db03aab7fb4be = b_ee4db03aab7fb4be.words;
#if !CAPNP_LITE
static const uint16_t m_ee4db03aab7fb4be[] = {5, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47};
const ::capnp::_::RawSchema s_ee4db03aab7fb4be = {
  0xee4db03aab7fb4be, b_ee4db03aab7fb4be.words, 714, nullptr, m_ee4db03aab7fb4be,
  0, 48, nullptr, nullptr, nullptr, { &s_ee4db03aab7fb4be, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(CommonHeaderName_ee4db03aab7fb4be, ee4db03aab7fb4be);
static const ::capnp::_::AlignedData<38> b_83e5f307c4d3785f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95, 120, 211, 196,   7, 243, 229, 131,
     22,   0,   0,   0,   2,   0,   0,   0,
     50, 230, 242, 175,  10,  40, 101, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  67, 111,
    109, 109, 111, 110,  72, 101,  97, 100,
    101, 114,  86,  97, 108, 117, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  98,   0,   0,   0,
     13,   0,   0,   0,  31,   0,   0,   0,
    105, 110, 118,  97, 108, 105, 100,   0,
    103, 122, 105, 112,  68, 101, 102, 108,
     97, 116, 101,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    131, 252, 182,  29,  19,  69, 119, 133,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 114,   0,   0,   0,
    103, 122, 105, 112,  44,  32, 100, 101,
    102, 108,  97, 116, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_83e5f307c4d3785f = b_83e5f307c4d3785f.words;
#if !CAPNP_LITE
static const uint16_t m_83e5f307c4d3785f[] = {1, 0};
const ::capnp::_::RawSchema s_83e5f307c4d3785f = {
  0x83e5f307c4d3785f, b_83e5f307c4d3785f.words, 38, nullptr, m_83e5f307c4d3785f,
  0, 2, nullptr, nullptr, nullptr, { &s_83e5f307c4d3785f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(CommonHeaderValue_83e5f307c4d3785f, 83e5f307c4d3785f);
static const ::capnp::_::AlignedData<47> b_b39047580b6fd228 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     40, 210, 111,  11,  88,  71, 144, 179,
     22,   0,   0,   0,   1,   0,   2,   0,
     50, 230, 242, 175,  10,  40, 101, 182,
      1,   0,   7,   0,   0,   0,   2,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  72, 101,  97, 100, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    117,   3, 188,  26, 196,  52,  83, 237,
      1,   0,   0,   0,  82,   0,   0,   0,
     78,  97, 109, 101,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     42,  74, 222,  74,  30,   0, 113, 233,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     28,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 109, 109, 111, 110,   0,   0,
    117, 110,  99, 111, 109, 109, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    117,   3, 188,  26, 196,  52,  83, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b39047580b6fd228 = b_b39047580b6fd228.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b39047580b6fd228[] = {
  &s_e971001e4ade4a2a,
  &s_ed5334c41abc0375,
};
static const uint16_t m_b39047580b6fd228[] = {0, 1};
static const uint16_t i_b39047580b6fd228[] = {0, 1};
const ::capnp::_::RawSchema s_b39047580b6fd228 = {
  0xb39047580b6fd228, b_b39047580b6fd228.words, 47, d_b39047580b6fd228, m_b39047580b6fd228,
  2, 2, i_b39047580b6fd228, nullptr, nullptr, { &s_b39047580b6fd228, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_ed5334c41abc0375 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    117,   3, 188,  26, 196,  52,  83, 237,
     33,   0,   0,   0,   1,   0,   0,   0,
     40, 210, 111,  11,  88,  71, 144, 179,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  72, 101,  97, 100, 101, 114,
     46,  78,  97, 109, 101,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed5334c41abc0375 = b_ed5334c41abc0375.words;
#if !CAPNP_LITE
static const uint16_t m_ed5334c41abc0375[] = {0, 1};
static const uint16_t i_ed5334c41abc0375[] = {0, 1};
const ::capnp::_::RawSchema s_ed5334c41abc0375 = {
  0xed5334c41abc0375, b_ed5334c41abc0375.words, 50, nullptr, m_ed5334c41abc0375,
  0, 2, i_ed5334c41abc0375, nullptr, nullptr, { &s_ed5334c41abc0375, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_e971001e4ade4a2a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     42,  74, 222,  74,  30,   0, 113, 233,
     33,   0,   0,   0,   1,   0,   2,   0,
     40, 210, 111,  11,  88,  71, 144, 179,
      1,   0,   7,   0,   1,   0,   2,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 116, 116, 112,  45, 111, 118, 101,
    114,  45,  99,  97, 112, 110, 112,  46,
     99,  97, 112, 110, 112,  58,  72, 116,
    116, 112,  72, 101,  97, 100, 101, 114,
     46,  99, 111, 109, 109, 111, 110,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 255, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    190, 180, 127, 171,  58, 176,  77, 238,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  86,  97,
    108, 117, 101,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     95, 120, 211, 196,   7, 243, 229, 131,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e971001e4ade4a2a = b_e971001e4ade4a2a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e971001e4ade4a2a[] = {
  &s_83e5f307c4d3785f,
  &s_b39047580b6fd228,
  &s_ee4db03aab7fb4be,
};
static const uint16_t m_e971001e4ade4a2a[] = {1, 0, 2};
static const uint16_t i_e971001e4ade4a2a[] = {1, 2, 0};
const ::capnp::_::RawSchema s_e971001e4ade4a2a = {
  0xe971001e4ade4a2a, b_e971001e4ade4a2a.words, 64, d_e971001e4ade4a2a, m_e971001e4ade4a2a,
  3, 3, i_e971001e4ade4a2a, nullptr, nullptr, { &s_e971001e4ade4a2a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace capnp {

#if !CAPNP_LITE
::capnp::Request< ::capnp::HttpService::StartRequestParams,  ::capnp::HttpService::StartRequestResults>
HttpService::Client::startRequestRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp::HttpService::StartRequestParams,  ::capnp::HttpService::StartRequestResults>(
      0x92963bfdad2beb6aull, 0, sizeHint);
}
::kj::Promise<void> HttpService::Server::startRequest(StartRequestContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "http-over-capnp.capnp:HttpService", "startRequest",
      0x92963bfdad2beb6aull, 0);
}
::capnp::Capability::Server::DispatchCallResult HttpService::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x92963bfdad2beb6aull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("http-over-capnp.capnp:HttpService", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult HttpService::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        startRequest(::capnp::Capability::Server::internalGetTypedContext<
             ::capnp::HttpService::StartRequestParams,  ::capnp::HttpService::StartRequestResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "http-over-capnp.capnp:HttpService",
          0x92963bfdad2beb6aull, methodId);
  }
}
#endif  // !CAPNP_LITE

// HttpService
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpService::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpService::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::capnp::HttpService::ClientRequestContext::StartResponseParams,  ::capnp::HttpService::ClientRequestContext::StartResponseResults>
HttpService::ClientRequestContext::Client::startResponseRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp::HttpService::ClientRequestContext::StartResponseParams,  ::capnp::HttpService::ClientRequestContext::StartResponseResults>(
      0xea3256705c0b63baull, 0, sizeHint);
}
::kj::Promise<void> HttpService::ClientRequestContext::Server::startResponse(StartResponseContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "http-over-capnp.capnp:HttpService.ClientRequestContext", "startResponse",
      0xea3256705c0b63baull, 0);
}
::capnp::Request< ::capnp::HttpService::ClientRequestContext::StartWebSocketParams,  ::capnp::HttpService::ClientRequestContext::StartWebSocketResults>
HttpService::ClientRequestContext::Client::startWebSocketRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp::HttpService::ClientRequestContext::StartWebSocketParams,  ::capnp::HttpService::ClientRequestContext::StartWebSocketResults>(
      0xea3256705c0b63baull, 1, sizeHint);
}
::kj::Promise<void> HttpService::ClientRequestContext::Server::startWebSocket(StartWebSocketContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "http-over-capnp.capnp:HttpService.ClientRequestContext", "startWebSocket",
      0xea3256705c0b63baull, 1);
}
::capnp::Capability::Server::DispatchCallResult HttpService::ClientRequestContext::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xea3256705c0b63baull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("http-over-capnp.capnp:HttpService.ClientRequestContext", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult HttpService::ClientRequestContext::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        startResponse(::capnp::Capability::Server::internalGetTypedContext<
             ::capnp::HttpService::ClientRequestContext::StartResponseParams,  ::capnp::HttpService::ClientRequestContext::StartResponseResults>(context)),
        false
      };
    case 1:
      return {
        startWebSocket(::capnp::Capability::Server::internalGetTypedContext<
             ::capnp::HttpService::ClientRequestContext::StartWebSocketParams,  ::capnp::HttpService::ClientRequestContext::StartWebSocketResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "http-over-capnp.capnp:HttpService.ClientRequestContext",
          0xea3256705c0b63baull, methodId);
  }
}
#endif  // !CAPNP_LITE

// HttpService::ClientRequestContext
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpService::ClientRequestContext::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpService::ClientRequestContext::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpService::ClientRequestContext::StartResponseParams
constexpr uint16_t HttpService::ClientRequestContext::StartResponseParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpService::ClientRequestContext::StartResponseParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpService::ClientRequestContext::StartResponseParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpService::ClientRequestContext::StartResponseParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpService::ClientRequestContext::StartResponseResults
constexpr uint16_t HttpService::ClientRequestContext::StartResponseResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpService::ClientRequestContext::StartResponseResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpService::ClientRequestContext::StartResponseResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpService::ClientRequestContext::StartResponseResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpService::ClientRequestContext::StartWebSocketParams
constexpr uint16_t HttpService::ClientRequestContext::StartWebSocketParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpService::ClientRequestContext::StartWebSocketParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpService::ClientRequestContext::StartWebSocketParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpService::ClientRequestContext::StartWebSocketParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpService::ClientRequestContext::StartWebSocketResults
constexpr uint16_t HttpService::ClientRequestContext::StartWebSocketResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpService::ClientRequestContext::StartWebSocketResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpService::ClientRequestContext::StartWebSocketResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpService::ClientRequestContext::StartWebSocketResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Capability::Server::DispatchCallResult HttpService::ServerRequestContext::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x99ae26bfd34f3f3bull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("http-over-capnp.capnp:HttpService.ServerRequestContext", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult HttpService::ServerRequestContext::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "http-over-capnp.capnp:HttpService.ServerRequestContext",
          0x99ae26bfd34f3f3bull, methodId);
  }
}
#endif  // !CAPNP_LITE

// HttpService::ServerRequestContext
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpService::ServerRequestContext::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpService::ServerRequestContext::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpService::StartRequestParams
constexpr uint16_t HttpService::StartRequestParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpService::StartRequestParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpService::StartRequestParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpService::StartRequestParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpService::StartRequestResults
constexpr uint16_t HttpService::StartRequestResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpService::StartRequestResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpService::StartRequestResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpService::StartRequestResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::StreamingRequest< ::capnp::WebSocket::SendTextParams>
WebSocket::Client::sendTextRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newStreamingCall< ::capnp::WebSocket::SendTextParams>(
      0xb09c33a9f4caa823ull, 0, sizeHint);
}
::kj::Promise<void> WebSocket::Server::sendText(SendTextContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "http-over-capnp.capnp:WebSocket", "sendText",
      0xb09c33a9f4caa823ull, 0);
}
::capnp::StreamingRequest< ::capnp::WebSocket::SendDataParams>
WebSocket::Client::sendDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newStreamingCall< ::capnp::WebSocket::SendDataParams>(
      0xb09c33a9f4caa823ull, 1, sizeHint);
}
::kj::Promise<void> WebSocket::Server::sendData(SendDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "http-over-capnp.capnp:WebSocket", "sendData",
      0xb09c33a9f4caa823ull, 1);
}
::capnp::Request< ::capnp::WebSocket::CloseParams,  ::capnp::WebSocket::CloseResults>
WebSocket::Client::closeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp::WebSocket::CloseParams,  ::capnp::WebSocket::CloseResults>(
      0xb09c33a9f4caa823ull, 2, sizeHint);
}
::kj::Promise<void> WebSocket::Server::close(CloseContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "http-over-capnp.capnp:WebSocket", "close",
      0xb09c33a9f4caa823ull, 2);
}
::capnp::Capability::Server::DispatchCallResult WebSocket::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb09c33a9f4caa823ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("http-over-capnp.capnp:WebSocket", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult WebSocket::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        kj::evalNow([&]() {
          return sendText(::capnp::Capability::Server::internalGetTypedStreamingContext<
               ::capnp::WebSocket::SendTextParams>(context));
        }),
        true
      };
    case 1:
      return {
        kj::evalNow([&]() {
          return sendData(::capnp::Capability::Server::internalGetTypedStreamingContext<
               ::capnp::WebSocket::SendDataParams>(context));
        }),
        true
      };
    case 2:
      return {
        close(::capnp::Capability::Server::internalGetTypedContext<
             ::capnp::WebSocket::CloseParams,  ::capnp::WebSocket::CloseResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "http-over-capnp.capnp:WebSocket",
          0xb09c33a9f4caa823ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// WebSocket
#if !CAPNP_LITE
constexpr ::capnp::Kind WebSocket::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* WebSocket::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// WebSocket::SendTextParams
constexpr uint16_t WebSocket::SendTextParams::_capnpPrivate::dataWordSize;
constexpr uint16_t WebSocket::SendTextParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind WebSocket::SendTextParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* WebSocket::SendTextParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// WebSocket::SendDataParams
constexpr uint16_t WebSocket::SendDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t WebSocket::SendDataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind WebSocket::SendDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* WebSocket::SendDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// WebSocket::CloseParams
constexpr uint16_t WebSocket::CloseParams::_capnpPrivate::dataWordSize;
constexpr uint16_t WebSocket::CloseParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind WebSocket::CloseParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* WebSocket::CloseParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// WebSocket::CloseResults
constexpr uint16_t WebSocket::CloseResults::_capnpPrivate::dataWordSize;
constexpr uint16_t WebSocket::CloseResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind WebSocket::CloseResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* WebSocket::CloseResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpRequest
constexpr uint16_t HttpRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpRequest::BodySize
constexpr uint16_t HttpRequest::BodySize::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpRequest::BodySize::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpRequest::BodySize::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpRequest::BodySize::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpResponse
constexpr uint16_t HttpResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpResponse::BodySize
constexpr uint16_t HttpResponse::BodySize::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpResponse::BodySize::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpResponse::BodySize::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpResponse::BodySize::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpHeader
constexpr uint16_t HttpHeader::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpHeader::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpHeader::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpHeader::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpHeader::NameValue
constexpr uint16_t HttpHeader::NameValue::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpHeader::NameValue::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpHeader::NameValue::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpHeader::NameValue::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// HttpHeader::Common
constexpr uint16_t HttpHeader::Common::_capnpPrivate::dataWordSize;
constexpr uint16_t HttpHeader::Common::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind HttpHeader::Common::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HttpHeader::Common::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace

