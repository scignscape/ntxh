// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: byte-stream.capnp

#include "byte-stream.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<55> b_d2e7d8a0dc0a9766 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    102, 151,  10, 220, 160, 216, 231, 210,
     18,   0,   0,   0,   3,   0,   0,   0,
    141, 115, 115, 194, 225,  20,  93, 143,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 199,   0,   0,   0,
    173,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    110, 195, 101, 207,  19,  10,  60, 178,
      1,   0,   0,   0, 146,   0,   0,   0,
     83, 117,  98, 115, 116, 114, 101,  97,
    109,  67,  97, 108, 108,  98,  97,  99,
    107,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    210,  54, 187,   7,  76, 140,  93, 164,
    110, 177, 192, 119,  51, 154,  95, 153,
     81,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     68,   1,  92, 148,  71,  32, 211, 203,
    148, 213,  99,  60, 188, 221, 226, 231,
     57,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    248, 217, 128, 252, 128, 142, 177, 197,
    106, 117,  39, 109, 222, 142,  25, 141,
     33,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
    119, 114, 105, 116, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 110, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  83, 117,  98, 115, 116,
    114, 101,  97, 109,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d2e7d8a0dc0a9766 = b_d2e7d8a0dc0a9766.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d2e7d8a0dc0a9766[] = {
  &s_8d198ede6d27756a,
  &s_995f9a3377c0b16e,
  &s_a45d8c4c07bb36d2,
  &s_c5b18e80fc80d9f8,
  &s_cbd32047945c0144,
  &s_e7e2ddbc3c63d594,
};
static const uint16_t m_d2e7d8a0dc0a9766[] = {1, 2, 0};
const ::capnp::_::RawSchema s_d2e7d8a0dc0a9766 = {
  0xd2e7d8a0dc0a9766, b_d2e7d8a0dc0a9766.words, 55, d_d2e7d8a0dc0a9766, m_d2e7d8a0dc0a9766,
  6, 3, nullptr, nullptr, nullptr, { &s_d2e7d8a0dc0a9766, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_b23c0a13cf65c36e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    110, 195, 101, 207,  19,  10,  60, 178,
     29,   0,   0,   0,   3,   0,   0,   0,
    102, 151,  10, 220, 160, 216, 231, 210,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 135,   0,   0,   0,
    121,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46,  83, 117,  98,
    115, 116, 114, 101,  97, 109,  67,  97,
    108, 108,  98,  97,  99, 107,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    231, 251, 202, 138, 202, 142, 177, 204,
     45, 146, 182, 181,  86, 235, 143, 186,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     68,  95,  88, 113,  86, 243,  11, 216,
     83,  67,  20, 237,  56, 102, 208, 221,
     25,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
    101, 110, 100, 101, 100,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101,  97,  99, 104, 101, 100,  76,
    105, 109, 105, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b23c0a13cf65c36e = b_b23c0a13cf65c36e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b23c0a13cf65c36e[] = {
  &s_ba8feb56b5b6922d,
  &s_ccb18eca8acafbe7,
  &s_d80bf35671585f44,
  &s_ddd06638ed144353,
};
static const uint16_t m_b23c0a13cf65c36e[] = {0, 1};
const ::capnp::_::RawSchema s_b23c0a13cf65c36e = {
  0xb23c0a13cf65c36e, b_b23c0a13cf65c36e.words, 42, d_b23c0a13cf65c36e, m_b23c0a13cf65c36e,
  4, 2, nullptr, nullptr, nullptr, { &s_b23c0a13cf65c36e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ccb18eca8acafbe7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    231, 251, 202, 138, 202, 142, 177, 204,
     47,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46,  83, 117,  98,
    115, 116, 114, 101,  97, 109,  67,  97,
    108, 108,  98,  97,  99, 107,  46, 101,
    110, 100, 101, 100,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     98, 121, 116, 101,  67, 111, 117, 110,
    116,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ccb18eca8acafbe7 = b_ccb18eca8acafbe7.words;
#if !CAPNP_LITE
static const uint16_t m_ccb18eca8acafbe7[] = {0};
static const uint16_t i_ccb18eca8acafbe7[] = {0};
const ::capnp::_::RawSchema s_ccb18eca8acafbe7 = {
  0xccb18eca8acafbe7, b_ccb18eca8acafbe7.words, 37, nullptr, m_ccb18eca8acafbe7,
  0, 1, i_ccb18eca8acafbe7, nullptr, nullptr, { &s_ccb18eca8acafbe7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_ba8feb56b5b6922d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     45, 146, 182, 181,  86, 235, 143, 186,
     47,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46,  83, 117,  98,
    115, 116, 114, 101,  97, 109,  67,  97,
    108, 108,  98,  97,  99, 107,  46, 101,
    110, 100, 101, 100,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba8feb56b5b6922d = b_ba8feb56b5b6922d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ba8feb56b5b6922d = {
  0xba8feb56b5b6922d, b_ba8feb56b5b6922d.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ba8feb56b5b6922d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_d80bf35671585f44 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68,  95,  88, 113,  86, 243,  11, 216,
     47,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46,  83, 117,  98,
    115, 116, 114, 101,  97, 109,  67,  97,
    108, 108,  98,  97,  99, 107,  46, 114,
    101,  97,  99, 104, 101, 100,  76, 105,
    109, 105, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d80bf35671585f44 = b_d80bf35671585f44.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d80bf35671585f44 = {
  0xd80bf35671585f44, b_d80bf35671585f44.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d80bf35671585f44, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ddd06638ed144353 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83,  67,  20, 237,  56, 102, 208, 221,
     47,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46,  83, 117,  98,
    115, 116, 114, 101,  97, 109,  67,  97,
    108, 108,  98,  97,  99, 107,  46, 114,
    101,  97,  99, 104, 101, 100,  76, 105,
    109, 105, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110, 101, 120, 116,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    102, 151,  10, 220, 160, 216, 231, 210,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ddd06638ed144353 = b_ddd06638ed144353.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ddd06638ed144353[] = {
  &s_d2e7d8a0dc0a9766,
};
static const uint16_t m_ddd06638ed144353[] = {0};
static const uint16_t i_ddd06638ed144353[] = {0};
const ::capnp::_::RawSchema s_ddd06638ed144353 = {
  0xddd06638ed144353, b_ddd06638ed144353.words, 37, d_ddd06638ed144353, m_ddd06638ed144353,
  1, 1, i_ddd06638ed144353, nullptr, nullptr, { &s_ddd06638ed144353, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a45d8c4c07bb36d2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    210,  54, 187,   7,  76, 140,  93, 164,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46, 119, 114, 105,
    116, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     98, 121, 116, 101, 115,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a45d8c4c07bb36d2 = b_a45d8c4c07bb36d2.words;
#if !CAPNP_LITE
static const uint16_t m_a45d8c4c07bb36d2[] = {0};
static const uint16_t i_a45d8c4c07bb36d2[] = {0};
const ::capnp::_::RawSchema s_a45d8c4c07bb36d2 = {
  0xa45d8c4c07bb36d2, b_a45d8c4c07bb36d2.words, 34, nullptr, m_a45d8c4c07bb36d2,
  0, 1, i_a45d8c4c07bb36d2, nullptr, nullptr, { &s_a45d8c4c07bb36d2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_cbd32047945c0144 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68,   1,  92, 148,  71,  32, 211, 203,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46, 101, 110, 100,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_cbd32047945c0144 = b_cbd32047945c0144.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cbd32047945c0144 = {
  0xcbd32047945c0144, b_cbd32047945c0144.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cbd32047945c0144, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_e7e2ddbc3c63d594 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148, 213,  99,  60, 188, 221, 226, 231,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46, 101, 110, 100,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e7e2ddbc3c63d594 = b_e7e2ddbc3c63d594.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e7e2ddbc3c63d594 = {
  0xe7e2ddbc3c63d594, b_e7e2ddbc3c63d594.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e7e2ddbc3c63d594, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_c5b18e80fc80d9f8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    248, 217, 128, 252, 128, 142, 177, 197,
     29,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46, 103, 101, 116,
     83, 117,  98, 115, 116, 114, 101,  97,
    109,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 108, 108,  98,  97,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    110, 195, 101, 207,  19,  10,  60, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 109, 105, 116,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    255, 255, 255, 255, 255, 255, 255, 255,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c5b18e80fc80d9f8 = b_c5b18e80fc80d9f8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c5b18e80fc80d9f8[] = {
  &s_b23c0a13cf65c36e,
};
static const uint16_t m_c5b18e80fc80d9f8[] = {0, 1};
static const uint16_t i_c5b18e80fc80d9f8[] = {0, 1};
const ::capnp::_::RawSchema s_c5b18e80fc80d9f8 = {
  0xc5b18e80fc80d9f8, b_c5b18e80fc80d9f8.words, 51, d_c5b18e80fc80d9f8, m_c5b18e80fc80d9f8,
  1, 2, i_c5b18e80fc80d9f8, nullptr, nullptr, { &s_c5b18e80fc80d9f8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_8d198ede6d27756a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    106, 117,  39, 109, 222, 142,  25, 141,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 121, 116, 101,  45, 115, 116, 114,
    101,  97, 109,  46,  99,  97, 112, 110,
    112,  58,  66, 121, 116, 101,  83, 116,
    114, 101,  97, 109,  46, 103, 101, 116,
     83, 117,  98, 115, 116, 114, 101,  97,
    109,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  98, 115, 116, 114, 101,  97,
    109,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    102, 151,  10, 220, 160, 216, 231, 210,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8d198ede6d27756a = b_8d198ede6d27756a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8d198ede6d27756a[] = {
  &s_d2e7d8a0dc0a9766,
};
static const uint16_t m_8d198ede6d27756a[] = {0};
static const uint16_t i_8d198ede6d27756a[] = {0};
const ::capnp::_::RawSchema s_8d198ede6d27756a = {
  0x8d198ede6d27756a, b_8d198ede6d27756a.words, 36, d_8d198ede6d27756a, m_8d198ede6d27756a,
  1, 1, i_8d198ede6d27756a, nullptr, nullptr, { &s_8d198ede6d27756a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace capnp {

#if !CAPNP_LITE
::capnp::StreamingRequest< ::capnp::ByteStream::WriteParams>
ByteStream::Client::writeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newStreamingCall< ::capnp::ByteStream::WriteParams>(
      0xd2e7d8a0dc0a9766ull, 0, sizeHint);
}
::kj::Promise<void> ByteStream::Server::write(WriteContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "byte-stream.capnp:ByteStream", "write",
      0xd2e7d8a0dc0a9766ull, 0);
}
::capnp::Request< ::capnp::ByteStream::EndParams,  ::capnp::ByteStream::EndResults>
ByteStream::Client::endRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp::ByteStream::EndParams,  ::capnp::ByteStream::EndResults>(
      0xd2e7d8a0dc0a9766ull, 1, sizeHint);
}
::kj::Promise<void> ByteStream::Server::end(EndContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "byte-stream.capnp:ByteStream", "end",
      0xd2e7d8a0dc0a9766ull, 1);
}
::capnp::Request< ::capnp::ByteStream::GetSubstreamParams,  ::capnp::ByteStream::GetSubstreamResults>
ByteStream::Client::getSubstreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp::ByteStream::GetSubstreamParams,  ::capnp::ByteStream::GetSubstreamResults>(
      0xd2e7d8a0dc0a9766ull, 2, sizeHint);
}
::kj::Promise<void> ByteStream::Server::getSubstream(GetSubstreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "byte-stream.capnp:ByteStream", "getSubstream",
      0xd2e7d8a0dc0a9766ull, 2);
}
::capnp::Capability::Server::DispatchCallResult ByteStream::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd2e7d8a0dc0a9766ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("byte-stream.capnp:ByteStream", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult ByteStream::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        kj::evalNow([&]() {
          return write(::capnp::Capability::Server::internalGetTypedStreamingContext<
               ::capnp::ByteStream::WriteParams>(context));
        }),
        true
      };
    case 1:
      return {
        end(::capnp::Capability::Server::internalGetTypedContext<
             ::capnp::ByteStream::EndParams,  ::capnp::ByteStream::EndResults>(context)),
        false
      };
    case 2:
      return {
        getSubstream(::capnp::Capability::Server::internalGetTypedContext<
             ::capnp::ByteStream::GetSubstreamParams,  ::capnp::ByteStream::GetSubstreamResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "byte-stream.capnp:ByteStream",
          0xd2e7d8a0dc0a9766ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// ByteStream
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::capnp::ByteStream::SubstreamCallback::EndedParams,  ::capnp::ByteStream::SubstreamCallback::EndedResults>
ByteStream::SubstreamCallback::Client::endedRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp::ByteStream::SubstreamCallback::EndedParams,  ::capnp::ByteStream::SubstreamCallback::EndedResults>(
      0xb23c0a13cf65c36eull, 0, sizeHint);
}
::kj::Promise<void> ByteStream::SubstreamCallback::Server::ended(EndedContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "byte-stream.capnp:ByteStream.SubstreamCallback", "ended",
      0xb23c0a13cf65c36eull, 0);
}
::capnp::Request< ::capnp::ByteStream::SubstreamCallback::ReachedLimitParams,  ::capnp::ByteStream::SubstreamCallback::ReachedLimitResults>
ByteStream::SubstreamCallback::Client::reachedLimitRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::capnp::ByteStream::SubstreamCallback::ReachedLimitParams,  ::capnp::ByteStream::SubstreamCallback::ReachedLimitResults>(
      0xb23c0a13cf65c36eull, 1, sizeHint);
}
::kj::Promise<void> ByteStream::SubstreamCallback::Server::reachedLimit(ReachedLimitContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "byte-stream.capnp:ByteStream.SubstreamCallback", "reachedLimit",
      0xb23c0a13cf65c36eull, 1);
}
::capnp::Capability::Server::DispatchCallResult ByteStream::SubstreamCallback::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb23c0a13cf65c36eull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("byte-stream.capnp:ByteStream.SubstreamCallback", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult ByteStream::SubstreamCallback::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        ended(::capnp::Capability::Server::internalGetTypedContext<
             ::capnp::ByteStream::SubstreamCallback::EndedParams,  ::capnp::ByteStream::SubstreamCallback::EndedResults>(context)),
        false
      };
    case 1:
      return {
        reachedLimit(::capnp::Capability::Server::internalGetTypedContext<
             ::capnp::ByteStream::SubstreamCallback::ReachedLimitParams,  ::capnp::ByteStream::SubstreamCallback::ReachedLimitResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "byte-stream.capnp:ByteStream.SubstreamCallback",
          0xb23c0a13cf65c36eull, methodId);
  }
}
#endif  // !CAPNP_LITE

// ByteStream::SubstreamCallback
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::SubstreamCallback::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::SubstreamCallback::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ByteStream::SubstreamCallback::EndedParams
constexpr uint16_t ByteStream::SubstreamCallback::EndedParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::SubstreamCallback::EndedParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::SubstreamCallback::EndedParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::SubstreamCallback::EndedParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ByteStream::SubstreamCallback::EndedResults
constexpr uint16_t ByteStream::SubstreamCallback::EndedResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::SubstreamCallback::EndedResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::SubstreamCallback::EndedResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::SubstreamCallback::EndedResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ByteStream::SubstreamCallback::ReachedLimitParams
constexpr uint16_t ByteStream::SubstreamCallback::ReachedLimitParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::SubstreamCallback::ReachedLimitParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::SubstreamCallback::ReachedLimitParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::SubstreamCallback::ReachedLimitParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ByteStream::SubstreamCallback::ReachedLimitResults
constexpr uint16_t ByteStream::SubstreamCallback::ReachedLimitResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::SubstreamCallback::ReachedLimitResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::SubstreamCallback::ReachedLimitResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::SubstreamCallback::ReachedLimitResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ByteStream::WriteParams
constexpr uint16_t ByteStream::WriteParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::WriteParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::WriteParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::WriteParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ByteStream::EndParams
constexpr uint16_t ByteStream::EndParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::EndParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::EndParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::EndParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ByteStream::EndResults
constexpr uint16_t ByteStream::EndResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::EndResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::EndResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::EndResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ByteStream::GetSubstreamParams
constexpr uint16_t ByteStream::GetSubstreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::GetSubstreamParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::GetSubstreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::GetSubstreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ByteStream::GetSubstreamResults
constexpr uint16_t ByteStream::GetSubstreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t ByteStream::GetSubstreamResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ByteStream::GetSubstreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ByteStream::GetSubstreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace

