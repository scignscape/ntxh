/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Regis Clouard - 1994-10-13
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file poutrangefiltering.cpp
 * eps= Valeur d'ecart toleree.
 * Affecter comme valeur du pixel courant 
 * la moyenne des 8 voisins si moyenne > eps
 * l'ancienne valeur sinon.
 */
##begin POutRangeFilteringIG < TIN, LOOPP, POINT, VOISL >
Errc POutRangeFiltering( const TIN &ims, TIN &imd, float eps ) {
   int n;
   float s;
   POINT p;
   Float val;

##LOOPP(ims,p)
   {
      s=0.0F; n=0;
      for (int v=0; v<$VOISL; v++) {
	 if (ims.Hold(p+v$VOISL[v])) {
	    s += (float)ims[p+v$VOISL[v]];
	    n++;
	 }
      }
      val = s / n;
      imd[p] = ((ABS(val-(float)ims[p]) <= eps) ? (TIN::ValueType)val : ims[p]);
   }

   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type()==Po_$TIN) {
      TIN* const ims=(TIN*)objs[0];
      objd[0]=new TIN(ims->Size());
      TIN * const imd=(TIN*)objd[0];
      
      result=POutRangeFiltering(*ims,*imd,(Float)atof(parv[0]));
      goto end;
   }
## end
##end

##forall(POutRangeFilteringIG,/Img[23]d/)

/*
 * Modify only the following constants, and the function call.
 */
#ifdef MAIN
#define	USAGE	"usage: %s difference [-m mask] [im_in|-] [im_out|-]"
#define	PARC	1
#define	FINC	1
#define	FOUTC	1
#define	MASK	3

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
