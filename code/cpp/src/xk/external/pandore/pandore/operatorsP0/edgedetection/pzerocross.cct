/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 1999-02-19
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pzerocross.cpp
 * Localisation des passages par une valeur donnee.
 * Pour chaque point, si l'un de ses voisins n'est pas
 * du meme signe (i.e. inferieur ou superieur)
 * mettre le point a VRAI, sinon a FAUX.
 */

##begin PZeroCrossIG < TIN1, TIN2, LOOPP, POINT, VOISS, VOISL>
Errc PZeroCross( const TIN1 &ims, TIN2 &imd, int connexite, TIN1::ValueType valeur ) {
   int v;
   POINT p;

   if (connexite == VOISS) {
##LOOPP(ims,p)
      {
	 imd[p]=0;
	 for (v=0; v<VOISS/2; v++) {
	    if (ims.Hold(p+v$VOISS[v]) &&
		(
		 ((ims[p]<=valeur) && (ims[p+v$VOISS[v]]>valeur) && (imd[p+v$VOISS[v]]==0))
		 ||
		 ((ims[p]>valeur) && (ims[p+v$VOISS[v]]<=valeur) && (imd[p+v$VOISS[v]]==0))
		 )
		) {
	       imd[p] = Limits<TIN2::ValueType>::max();
	       break;
	    }
	 }
      }
   }  else {
##LOOPP(ims,p)
      {
	 imd[p]=0;
	 for (v=0; v<VOISL/2; v++) {
	    if (ims.Hold(p+v$VOISL[v]) &&
		(((ims[p]<=valeur) && (ims[p+v$VOISL[v]]>valeur) && (imd[p+v$VOISL[v]] == 0))
		 ||
		 ((ims[p]>valeur) && (ims[p+v$VOISL[v]]<=valeur) && (imd[p+v$VOISL[v]] == 0))
		 )) {
	       imd[p] = Limits<TIN2::ValueType>::max();
	       break;
	    }
	 }
      }
   }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN1) {
      TIN1* const ims=(TIN1*)objs[0];
      objd[0]=new TIN2(ims->Size());
      TIN2* const imd=(TIN2*)objd[0];
      
      result=PZeroCross(*ims,*imd,atoi(parv[0]), (TIN1::ValueType)atof(parv[1]));
      goto end;
   }
## end
##end

##begin PZeroCrossG(TIN)
Errc PZeroCross( const TIN &grs, TIN &grd, int /*connexite*/, TIN::ValueType valeur ) {
   Long i;
   GEdge *ptr;
   TIN::ValueType u;
   
   grd=grs;
   // Initialisation a 0
   // sauf les points terminaux qui sont donc sur la bordure.
   for (i=0;i<grs.Size();i++) {
      if ((grd[i])) {
	 grd[i]->value=0;
      }
   }
   
   for (i=0;i<grs.Size();i++) {
      if ((grs[i])) {
	 u=grs[i]->value;
	 for (ptr=grs[i]->Neighbours();ptr;ptr=ptr->Next())
	    if (( (u> valeur) && (grs[ptr->Node()]->value<valeur) && (grd[ptr->Node()]->value==0))
		||
		(( (u< valeur) && (grs[ptr->Node()]->value>valeur) && (grd[ptr->Node()]->value==0))))
	       grd[i]->value=255.0;
      }
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const grs=(TIN*)objs[0];
      objd[0]=new TIN(grs->Size());
      TIN* const grd=(TIN*)objd[0];
      
      result=PZeroCross(*grs,*grd,atoi(parv[0]),(TIN::ValueType)atof(parv[1]));
      goto end;
   }
## end
##end

##forall(PZeroCrossIG,/Img2d/,Img2duc)
##forall(PZeroCrossIG,/Img3d/,Img3duc)
##forall(PZeroCrossG,/Graph/)

#ifdef MAIN
#define	USAGE	"usage: %s connectivity threshold [-m mask] [im_in|-] [im_out|-]"
#define	PARC	2
#define	FINC	1
#define	FOUTC	1
#define	MASK	2

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
