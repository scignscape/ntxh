/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pand.cpp
 * Images and graphs: Binary and operator. Operation: (pix1 & pix2)
 * Regions = Intersection.
 */

Errc PAnd( const Imx3d<Float> &ims1, const Imx3d<Float> &ims2, Imx3d<Float> &imd ) {
   if (ims1.Size() != ims2.Size()) {
      std::cerr << "Error pand: Incompatible size" << std::endl;
      return FAILURE;
   }
   for (int b = 0; b < ims1.Bands(); b++) {
      Float *ps1 = ims1.Vector(b);
      Float *ps2 = ims2.Vector(b);
      Float *pd = imd.Vector(b);
      for (; ps1 < ims1.Vector(b) + ims1.VectorSize(); ps1++, ps2++, pd++) {
	 *pd = *ps1 * *ps2;
      }
   }
   return SUCCESS;
}

template<typename T>
Errc PAnd(const Imx3d<T> &ims1, const Imx3d<T> &ims2, Imx3d<T> &imd) {
   if (ims1.Size() != ims2.Size()) {
      std::cerr << "Error pand: Incompatible size" << std::endl;
      return FAILURE;
   }
   for (int b = 0; b < ims1.Bands(); b++) {
      T *ps1 = ims1.Vector(b);
      T *ps2 = ims2.Vector(b);
      T *pd = imd.Vector(b);
      for (; ps1 < ims1.Vector(b) + ims1.VectorSize(); ps1++, ps2++, pd++) {
	 *pd = (T)(*ps1 & *ps2);
      }
   }
   return SUCCESS;
}

##begin PAnd < TIN, LOOP, VARS, ACC >
## append loadcases
   if (objs[0]->Type() == Po_$TIN && objs[1]->Type() == Po_$TIN) {
      TIN* const ims1 = (TIN*)objs[0];
      TIN* const ims2 = (TIN*)objs[1];
      objd[0] = new TIN(ims1->Props());
      TIN* const imd = (TIN*)objd[0];
      
      result = PAnd(*ims1, *ims2, *imd);
      goto end;
   }
## end
##end


##begin PAndGraph TYPE
Errc PAnd( const TYPE &grs1, const TYPE &grs2, TYPE &grd ) {
   grd = grs1;
   for (int i = 0; i < grd.Size(); i++) {
      if (grs1[i] && grs2[i]) {
	 grd[i]->value = grs1[i]->value * grs2[i]->value;
      } else {
	 if ((grd[i])) {
	    grd[i]->value = 0;
	 }
      }
   }
   return SUCCESS;
}
## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const gs1 = (TYPE*)objs[0];
      TYPE* const gs2 = (TYPE*)objs[1];
      objd[0] = new TYPE(gs1->Size());
      TYPE* const gd = (TYPE*)objd[0];
      
      result = PAnd(*gs1, *gs2, *gd);
      goto end;
   }
## end
##end

##begin PAndReg < TYPE , VOISL>
/**
 * Intersection between 2 regions.
 * Algorithm:  if (rgs1!=0 et rgs2 != 0)
 *                rgs= Region(ims1)*rgs1.Labels() + Region (ims2);
 */
Errc PAnd( const TYPE &rgs1, const TYPE &rgs2, TYPE &rgd ) {
   if (rgs1.Size() != rgs2.Size()) {
      std::cerr << "Error pand: Incompatible size" << std::endl;
      return FAILURE;
   }

   std::map<double, TYPE::ValueType> colors;
   Ulong nbreg = 0;

   TYPE::ValueType* prgs1 = rgs1.Vector();
   TYPE::ValueType* prgs2 = rgs2.Vector();
   TYPE::ValueType* prgd  = rgd.Vector();
   const double offset = (double)rgs1.Labels();

   for (; prgs1 < rgs1.Vector() + rgs1.VectorSize(); prgs1++, prgs2++) {
      if (*prgs1 * *prgs2) {
	 double val = *prgs1 + *prgs2 * offset; 
	 if (!colors[val]) {
	    colors[val] = ++nbreg;
	 }
	 *(prgd++) = colors[val];
      } else {
	 *(prgd++) = 0;
      }
   }

   rgd.Labels(nbreg);
   return nbreg;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1 = (TYPE*)objs[0];
      TYPE* const ims2 = (TYPE*)objs[1];
      objd[0] = new TYPE(ims1->Size());
      
      TYPE* const imd = (TYPE*)objd[0];
      
      result = PAnd(*ims1, *ims2, *imd);
      goto end;
   }
## end
##end

##forall(PAnd, /Im.[23]d/)

##forall(PAndGraph, /Graph/)
##forall(PAndReg, /Reg[23]d/)

#ifdef MAIN
#define	USAGE	"usage: %s [-m mask] [im_in1|-] [im_in2|-] [im_out|-]"
#define	PARC	0
#define	FINC	2
#define	FOUTC	1
#define	MASK	1
##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
