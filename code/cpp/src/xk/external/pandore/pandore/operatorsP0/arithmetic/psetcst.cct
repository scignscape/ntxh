/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file psetcst.cpp
 * @brief  Set all image pixels to the given constant.
 */

/**
 * Gray image (pixels).
 */
template <typename T>
Errc PSetCst( const Imx3d<T> &, Imx3d<T> &imd, T value ) {
   imd = value;
   return SUCCESS;
}

##begin PSetCst < TYPE, LOOP, VARS, ACC >
## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const ims = (TYPE*)objs[0];
      objd[0] = new TYPE(ims->Props());
      TYPE* imd = (TYPE*)objd[0];
      
      result = PSetCst(*ims, *imd, (TYPE::ValueType)atof(parv[0]));
      goto end;
   } 
## end
##end

##begin PSetCstR < TYPE, LOOP, VARS, ACC >
/**
 * Region maps.
 */
Errc PSetCst( const TYPE &, TYPE &rgd, TYPE::ValueType value ) {
   rgd = value;
   if (value > 0) {
      rgd.Labels(1);
   } else {
      rgd.Labels(0);
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const rgs = (TYPE*)objs[0];
      objd[0] = new TYPE(rgs->Size());
      TYPE* rgd = (TYPE*)objd[0];
      
      result = PSetCst(*rgs, *rgd, (TYPE::ValueType)atof(parv[0]));
      goto end;
   }
## end
##end

##begin PSetCstGraph TYPE
/**
 * Graph (nodes).
 */
Errc PSetCst( const TYPE &grs, TYPE &grd, TYPE::ValueType value ) {   
   grd = grs;
   int deb = (grs[0]->value) ? 0 : 1;
   for (int i = deb; i < grs.Size(); i++) {
      if ((grd[i])) {
	 grd[i]->value = value;
      }
   }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const grs = (TYPE*)objs[0];
      objd[0] = new TYPE(grs->Size());
      TYPE* const grd = (TYPE*)objd[0];
      
      result = PSetCst(*grs, *grd, (float)atof(parv[0]));
      goto end;
   }
## end
##end

##forall(PSetCst, /Im..d../)
##forall(PSetCstR, /Reg2d/)
##forall(PSetCstR, /Reg3d/)
##forall(PSetCstGraph, /Graph/)

#ifdef MAIN
#define	USAGE	"usage: %s value [-m mask] [im_in|-] [im_out|-]"
#define	PARC	1
#define	FINC	1
#define	FOUTC	1
#define	MASK	3

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
