/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pclipvalues.cpp
 * Clips pixel values in the range [low .. high ].
 */
template <typename T>
Errc PClipValues( const Imx3d<T> &ims, Imx3d<T> &imd, float low, float high ) {   
   if (low<(float)Limits<T>::min() || high>(float)Limits<T>::max()) {
      std::cerr << "Error pclipvalues: Bad parameter values: "<< low << ", "<< high << std::endl;
      return FAILURE;
   }
   if (high < low) {
      high = (float)Limits<T>::max();
   }

   
   for (int b = 0; b < ims.Bands(); b++) {
      T *ps = ims.Vector(b);
      T *pd = imd.Vector(b);
      for ( ; ps < ims.Vector(b) + ims.VectorSize(); ps++, pd++) {
	 if (*ps < (T)low) {
	    *pd = (T)low;
	 } else if (*ps > (T)high) {
	    *pd = (T)high;
	 } else {
	    *pd = *ps;
	 }
      }
   }
   return SUCCESS;
}

##begin ClipValuesI < TIN   >
## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const ims = (TIN*)objs[0];
      objd[0] = new TIN(ims->Props());
      
      TIN* const imd = (TIN*)objd[0];
      
      result = PClipValues(*ims, *imd, (float)atof(parv[0]), (float)atof(parv[1]));
      goto end;
   }
## end
##end

##begin ClipValuesG < TIN >
Errc PClipValues( const TIN &grs, TIN &grd, TIN::ValueType low, TIN::ValueType high ) {
   grd = grs;
   for (int i = 1; i < grs.Size(); i++) {
      if (grs[i]->value<low) {
	 grd[i]->value = low;
      } else if (grs[i]->value > high) {
	 grd[i]->value = high;
      } else {
	 grd[i]->value = grs[i]->value;}
   }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const grs=(TIN*)objs[0];
      objd[0]=new TIN(grs->Size());
      
      TIN* const grd=(TIN*)objd[0];
      
      result = PClipValues(*grs, *grd, (TIN::ValueType)atof(parv[0]), (TIN::ValueType)atof(parv[1]));
      goto end;
   }
## end
##end

##forall(ClipValuesI, /Im/)
##forall(ClipValuesG, /Graph/)

#ifdef MAIN
#define	USAGE	"usage: %s low high [-m mask] [im_in|-][im_out|-]"
#define	PARC	2
#define	FINC	1
#define	FOUTC	1
#define	MASK	1

##main(PARC, FINC, FOUTC, MASK, USAGE)

#endif
