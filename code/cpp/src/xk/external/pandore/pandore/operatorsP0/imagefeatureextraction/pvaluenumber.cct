/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 1997-07-23
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pvaluenumber.cpp
 * Calculates the number of non null pixel values.
 */
##begin PValueNumberG < TYPE >
Ulong PValueNumber( const TYPE &ims ) {
   TYPE::ValueType *ps=ims.Vector();
   const TYPE::ValueType *pf=ims.Vector()+ims.VectorSize();
   
   Ulong nb=0;
   
   for ( ; ps<pf ; ) {
      if ((*ps++)) nb++;
   }
   return nb;
}

##append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const ims=(TYPE*)objs[0];
      
      result= PValueNumber(*ims);
      goto end;
   }
## end 
##end 

##begin PValueNumberC < TYPE >
Ulong PValueNumber( const TYPE &ims ) {
   Ulong nb=0;
   TYPE::ValueType *px=ims.VectorX();
   TYPE::ValueType *py=ims.VectorY();
   TYPE::ValueType *pz=ims.VectorZ();
   const TYPE::ValueType *pf=ims.VectorX()+ims.VectorSize();
   
   for (;px<pf; px++,py++,pz++) {
      if ((*px) && (py) && (pz)) nb++;
   }
   return nb;
}

##append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const ims=(TYPE*)objs[0];
      
      result= PValueNumber(*ims);
      goto end;
   }
## end 
##end 

##begin PValueNumberGr < TYPE >
Ulong PValueNumber( const TYPE &grs ) {
   Ulong som =0;  
   
   for (int i=0;i<grs.Size();i++)
      if ((grs[i]) && (grs[i]->value))
	 som++;
   
   return som;
}

##append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const grs=(TYPE*)objs[0];
      
      result= PValueNumber(*grs);
      goto end;
   }
## end 
##end

##forall(PValueNumberG,/Img/)
##forall(PValueNumberG,/Reg/)
##forall(PValueNumberC,/Imc/)
##forall(PValueNumberGr,/Graph/)

#ifdef MAIN
#define USAGE	"usage: %s [-m mask] [im_in|-]"
#define PARC	0
#define FINC	1
#define FOUTC	0
#define MASK	1

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
