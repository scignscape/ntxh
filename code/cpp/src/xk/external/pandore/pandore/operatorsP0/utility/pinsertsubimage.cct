/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 1995-10-12
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pinsertsubimage.cpp
 * Insert subimage into image.
 */

##begin PInsertSubImage1G < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cx ) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx;
   
##LOOPP(ims2,p)
   {
      imd[p+q] = ims2[p];
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ( atoi(parv[0])+ims2->Width()>ims1->Width()) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[0]));
      }
      goto end;
   }

## end
##end 

##begin PInsertSubImage1C < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cx ) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx;

##LOOPP(ims2,p)
   {
      imd.X[p+q] = ims2.X[p];
      imd.Y[p+q] = ims2.Y[p];
      imd.Z[p+q] = ims2.Z[p];
   }

   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ( atoi(parv[0])+ims2->Width()>ims1->Width() ) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[0]));
      }
      goto end;
   }

## end
##end 

##begin PInsertSubImage1X < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cx ) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx;
   
##LOOPP(ims2,p)
   {
      for (int b=0; b<ims2.Bands();b++) {
	 imd[b][p+q] = ims2[b][p];
      }
   }

   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ( atoi(parv[0])+ims2->Width()>ims1->Width() ) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[0]));
      }
      goto end;
   }

## end
##end 

##begin PInsertSubImage2G < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cy, Long cx ) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx; q.y=cy;
   
##LOOPP(ims2,p)
   {
      imd[p+q] = ims2[p];
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ( (atoi(parv[0])+ims2->Width()>ims1->Width()) || (atoi(parv[1])+ims2->Height()>ims1->Height())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[1]),atol(parv[0]));
      }
      goto end;
   }

## end
##end 

##begin PInsertSubImage2C < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cy, Long cx ) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx; q.y=cy;

##LOOPP(ims2,p)
   {
      imd.X[p+q] = ims2.X[p];
      imd.Y[p+q] = ims2.Y[p];
      imd.Z[p+q] = ims2.Z[p];
   }

   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ( (atoi(parv[0])+ims2->Width()>ims1->Width()) || (atoi(parv[1])+ims2->Height()>ims1->Height())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[1]),atol(parv[0]));
      }
      goto end;
   }

## end
##end 

##begin PInsertSubImage2X < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cy, Long cx ) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx; q.y=cy;
   
##LOOPP(ims2,p)
   {
      for (int b=0; b<ims2.Bands();b++) {
	 imd[b][p+q] = ims2[b][p];
      }
   }

   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ( (atoi(parv[0])+ims2->Width()>ims1->Width()) || (atoi(parv[1])+ims2->Height()>ims1->Height())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[1]),atol(parv[0]));
      }
      goto end;
   }

## end
##end 

##begin PInsertSubImage2R < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cy, Long cx ) {
   POINT p,q;

   imd = ims1;
   q.x=cx; q.y=cy;
   
##LOOPP(ims2,p)
   {
      imd[p+q] = ims2[p]+ims1.Labels();
   }
   
   return imd.Labels(ims1.Labels()+ims2.Labels());
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ( (atoi(parv[0])+ims2->Width()>ims1->Width()) || (atoi(parv[1])+ims2->Height()>ims1->Height())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[1]),atol(parv[0]));
      }
      goto end;
   }

## end
##end 

##begin PInsertSubImage3G < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cz, Long cy, Long cx ) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx; q.y=cy; q.z=cz;
   
##LOOPP(ims2,p)
   {
      imd[p+q] = ims2[p];
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ((atoi(parv[0])+ims2->Width()>ims1->Width()) || (atoi(parv[1])+ims2->Height()>ims1->Height()) || (atoi(parv[2])+ims2->Depth()>ims1->Depth())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[2]),atol(parv[1]),atol(parv[0]));
      }
      goto end;
   }

## end
##end 


##begin PInsertSubImage3C < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cz, Long cy, Long cx ) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx; q.y=cy; q.z=cz;
   
##LOOPP(ims2,p)
   {
      imd.X[p+q] = ims2.X[p];
      imd.Y[p+q] = ims2.Y[p];
      imd.Z[p+q] = ims2.Z[p];
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ((atoi(parv[0])+ims2->Width()>ims1->Width()) || (atoi(parv[1])+ims2->Height()>ims1->Height()) || (atoi(parv[2])+ims2->Depth()>ims1->Depth())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[2]),atol(parv[1]),atol(parv[0]));
      }
      goto end;
   }

## end
##end 

##begin PInsertSubImage3X < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cz, Long cy, Long cx ) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx; q.y=cy; q.z=cz;
   
##LOOPP(ims2,p)
   {
      for (int b=0; b<ims2.Bands();b++) {
	 imd[b][p+q] = ims2[b][p];
      }
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ((atoi(parv[0])+ims2->Width()>ims1->Width()) || (atoi(parv[1])+ims2->Height()>ims1->Height()) || (atoi(parv[2])+ims2->Depth()>ims1->Depth())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[2]),atol(parv[1]),atol(parv[0]));
      }
      goto end;
   }

## end
##end 

##begin PInsertSubImage3R < TYPE, LOOPP, POINT >
Errc PInsertSubImage( const TYPE &ims1, const TYPE &ims2, TYPE &imd, Long cz, Long cy, Long cx) {
   POINT p,q;
   
   imd = ims1;
   q.x=cx; q.y=cy; q.z=cz;
   
##LOOPP(ims2,p)
   {
      imd[p+q] = ims2[p]+ims1.Labels();
   }
   
   return imd.Labels(ims1.Labels()+ims2.Labels());
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const ims1=(TYPE*)objs[0];
      TYPE* const ims2=(TYPE*)objs[1];
      if ((atoi(parv[0])+ims2->Width()>ims1->Width()) || (atoi(parv[1])+ims2->Height()>ims1->Height()) || (atoi(parv[2])+ims2->Depth()>ims1->Depth())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TYPE(ims1->Props());
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PInsertSubImage(*ims1,*ims2,*imd,atol(parv[2]),atol(parv[1]),atol(parv[0]));
      }
      goto end;
   }

## end
##end

##forall(PInsertSubImage1G,/Img1d/)
##forall(PInsertSubImage2G,/Img2d/)
##forall(PInsertSubImage3G,/Img3d/)

##forall(PInsertSubImage1C,/Imc1d/)
##forall(PInsertSubImage2C,/Imc2d/)
##forall(PInsertSubImage3C,/Imc3d/)

##forall(PInsertSubImage1X,/Imx1d/)
##forall(PInsertSubImage2X,/Imx2d/)
##forall(PInsertSubImage3X,/Imx3d/)

##forall(PInsertSubImage2R,/Reg2d/)
##forall(PInsertSubImage3R,/Reg3d/)

#ifdef MAIN
#define	USAGE	"usage: %s x y z [im_in1|-] [im_in2|-] [im_out|-]"
#define	PARC	3
#define	FINC	2
#define	FOUTC	1
#define	MASK	0

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
