/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pdivcst.cpp
 * Processes the unary diviply operator.
 */

template <typename T>
Errc PDivCst( const Imx3d<T> &ims, Imx3d<T> &imd, float val ) {
   Double nval;
	
   if (val == 0.0F) {
      printf("Error: Bad parameter 0");
      return FAILURE;
   }

   for (int b = 0; b < ims.Bands(); b++) {
      T *ps = ims.Vector(b);
      T *pd = imd.Vector(b);
      for (; ps < ims.Vector(b) + ims.VectorSize();ps++, pd++) {
	 nval = *ps / val;
	 if (nval > (Double)Limits<T>::max()) {
	    *pd = Limits<T>::max();
	 } else if (nval < (Double)Limits<T>::min()) {
	    *pd = Limits<T>::min();
	 } else {
	    *pd = (T)nval;
	 }
      }
   }   
   return SUCCESS;
}

##begin PDivCst < TYPE, LOOP, VARS, ACC >
## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const ims = (TYPE*)objs[0];
      objd[0] = new TYPE(ims->Props());
      TYPE* imd = (TYPE*)objd[0];
   
      result = PDivCst(*ims, *imd, (float)atof(parv[0]));
      goto end;
   } 
## end
##end

##begin PDivCstR < TYPE, LOOP, VARS, ACC >
/**
 * Gray image (pixels).
 */
Errc PDivCst( const TYPE &rgs, TYPE &rgd, float val ) {
   register int VARS;
   Double nval;

   if (val == 0.0F) {
      printf("Error: Bad parameter 0");
      return FAILURE;
   }

##LOOP(rgs, VARS)
   {
      nval = rgs[ACC] / val;
      if (nval > (Double)Limits<TYPE::ValueType>::max()) {
	 rgd[ACC] = Limits<TYPE::ValueType>::max();
      } else if (nval < (Double)Limits<TYPE::ValueType>::min()) {
	 rgd[ACC] = Limits<TYPE::ValueType>::min();
      } else {
	 rgd[ACC] = (TYPE::ValueType)nval;
      }
   }

   if ((float)(rgs.Labels() / val) > (float)Limits<TYPE::ValueType>::max()) {
      rgd.Labels(Limits<TYPE::ValueType>::max());
   } else {
      rgd.Labels((Ulong)(rgs.Labels() / val));
   }
   return rgd.Labels();
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const rgs = (TYPE*)objs[0];
      objd[0] = new TYPE(rgs->Size());
      TYPE* rgd = (TYPE*)objd[0];
   
      result = PDivCst(*rgs, *rgd, (float)atof(parv[0]));
      goto end;
   } 
## end
##end

##begin PDivCstGraph TYPE
/**
 * Graph (nodes).
 */
Errc PDivCst( const TYPE &grs, TYPE &grd, TYPE::ValueType val ) {
   int i;
   int deb;
   
   if (val == 0.0F) {
      printf("Error: Bad parameter 0");
      return FAILURE;
   }

   grd = grs;
   deb = (grs[0]->value)? 0 : 1;
   for (i = deb; i < grs.Size(); i++)
      if ((grd[i])) {
	 if ((grd[i]->value / val) > (TYPE::ValueType)MAXLONG) {
	    grd[i]->value=(TYPE::ValueType)MAXLONG;
	 } else {
	    if ((grd[i]->value / val) < (TYPE::ValueType)(-MAXLONG)) {
	       grd[i]->value = (TYPE::ValueType)(-MAXLONG);
	    } else {
	       grd[i]->value /= (TYPE::ValueType)val;
	    }
	 }
      }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const grs = (TYPE*)objs[0];
      objd[0] = new TYPE(grs->Size());
      TYPE* const grd = (TYPE*)objd[0];

      result = PDivCst(*grs, *grd, (TYPE::ValueType)atof(parv[0]));
      goto end;
   }
## end
##end

##forall(PDivCst, /Im..d../)
##forall(PDivCstR, /Reg2d/)
##forall(PDivCstR, /Reg3d/)
##forall(PDivCstGraph, /Graph/)

#ifdef MAIN
#define	USAGE	"usage: %s value [-m mask] [im_in|-] [im_out|-]"
#define	PARC	1
#define	FINC	1
#define	FOUTC	1
#define	MASK	1

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
