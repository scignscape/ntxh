/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Abder Elmoataz - 1994-10-13
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file psnnfiltering.cpp
 * Filtre adaptatif : Symetric Nearest Neighbourghood
 * Prendre comme point central la moyenne des
 * points de valeur de moindre ecart avec celle
 * du centre par rapport a celui de son voisin oppose.
 */

##begin PSNNFILTERINGIG < TIN, LOOPPB, POINT, VOISL >
Errc PSNNFiltering( const TIN &ims, TIN &imd ) {
   POINT p;
   int demivois=VOISL/2;
   imd.Frame(ims,1);
   
##LOOPPB(ims,p,1)
   {
      Float s=0.0F;
      for (int v=0; v<demivois;v++) {
	 if ((ABS(ims[p]-ims[p+v$VOISL[v]])<(ABS(ims[p]-ims[p+v$VOISL[v+demivois]])))) {
	    s += ims[p+v$VOISL[v]];
	 } else {
	    s += ims[p+v$VOISL[v+demivois]];
	 }
      }
      imd[p] = (TIN::ValueType)(s/demivois);
   }  
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type()==Po_$TIN) {
      TIN* const ims=(TIN*)objs[0];
      objd[0]=new TIN(ims->Props());
      TIN * const imd=(TIN*)objd[0];
      
      result=PSNNFiltering(*ims,*imd);
      goto end;
   }
## end
##end

##forall(PSNNFILTERINGIG,/Img[23]d/)

/*
 * Modify only the following constants, and the function call.
 */
#ifdef MAIN
#define	USAGE	"usage: %s [-m mask] [im_in|-] [im_out|-]"
#define	PARC	0
#define	FINC	1
#define	FOUTC	1
#define	MASK	3

##main(PARC,FINC,FOUTC,MASK,USAGE)

#endif
