/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 2006-01-09
 */

#include <map>
#include <pandore.h>
#include <math.h>
using namespace pandore;

/**
 * @file phistogramspecification.cpp
 * @brief Histogram specification.
 *
 * Use a specified histogram to transform the histogram of the input image.
 * 1. computes normalized cumulated histogram of input image.
 * 2. computes normalized cumulated histogram of the reference image.
 * 3.  for ecah pixel of the input image.
 *		a. Computes the s=hc1[pixel]
 *		b. Search for i such as hc2[i]=s;
 */
template <typename T>
Errc PHistogramSpecification( const Imx3d<T> &ims1, const Imx3d<T> &ims2, Imx3d <T> &imd ) {   
   std::map<T, float> h;
   std::map<T, float> hc1;
   std::map<T, float> hc2;
   std::map<float, T> lut;
   typename std::map<T, float>::const_iterator hi;
   
   for (int b=0; b<ims1.Bands(); b++) {
      // 1. Compute histogram of the input image.
      T* ps=ims1.Vector(b);
      for (;ps<ims1.Vector(b)+ims1.VectorSize();ps++) {
	 h[*ps]++;
      }
      
      // Compute cumulated histogram.
      // (discard h[min] -> set histoc[min]=0)
      // This is usefull to begin exactly the output histogram at 0.
      float sum=0.0F;
      
      hi=h.begin();
      float hdeb=h[hi->first];
      hc1[hi->first]=0.0F;
      hi++;
      float total=ims1.VectorSize()-hdeb;
      for ( ; hi != h.end(); hi++ ) {
	 sum=hc1[hi->first]=sum+hi->second;
	 hc1[hi->first]=hc1[hi->first] / total;
      }
      h.clear();
      
      // 2. Compute histogram of the reference image.
      ps=ims2.Vector(b);
      for (;ps<ims2.Vector(b)+ims2.VectorSize();ps++) {
	 h[*ps]++;
      }
      
      // Compute cumulated histogram.
      // (discard h[min] -> set histoc[min]=0)
      // This is usefull to begin exactly the output histogram at 0.
      sum=0;

      hi=h.begin();
      hdeb=h[hi->first];
      hc2[hi->first]=0.0F;
      hi++;
      total=ims2.VectorSize()-hdeb;
      for ( ; hi != h.end(); hi++ ) {
	 sum=hc2[hi->first]=sum+hi->second;
	 hc2[hi->first]=hc2[hi->first] / total;
      }
      h.clear();

      // 3. Search for zk such as hc2[zk]=sk.
      ps=ims1.Vector(b);
      T* pd=imd.Vector(b);
      for (;ps<ims1.Vector(b)+ims1.VectorSize();ps++, pd++) {
 	 float sk=hc1[*ps];
	 if (lut[sk]==0) {
	    hi=hc2.begin();
	    for ( ; hi != hc2.end(); hi++ ) {
	       if (hi->second>=sk) break;
	    }
	    lut[sk]=hi->first;
	 }
 	 *pd=lut[sk];
      }
      hc1.clear();
      hc2.clear();
      lut.clear();
   }
   return SUCCESS;
}

##begin PHistogramSpecification < TIN >
## append loadcases
   if (objs[0]->Type()==Po_$TIN && objs[1]->Type()==Po_$TIN) {
      TIN* const ims1=(TIN*)objs[0];
      TIN* const ims2=(TIN*)objs[1];
      objd[0]=new TIN(ims1->Props());
      TIN* const imd=(TIN*)objd[0];
      
      result=PHistogramSpecification(*ims1, *ims2, *imd);
      goto end;
   }
## end
##end


##forall(PHistogramSpecification, /Im.[23]d/)

#ifdef MAIN
#define	USAGE	"usage: %s  [-m mask] [im_in1|-] [im_in2|-] [im_out|-]"
#define	PARC	0
#define	FINC	2
#define	FOUTC	1
#define	MASK	1

##main(PARC, FINC, FOUTC, MASK, USAGE)

#endif
