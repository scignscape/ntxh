/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Sophie Schupp - 2003-01-08
 */

#include <math.h>
#include <pandore.h>
using namespace pandore;

/**
 * @file pmalikperonafiltering.cpp
 * Operateur de diffusion non lineaire qui lisse les
 * regions tout en preservant les contours.
 */

##begin PMalikPeronaFiltering < TIN, TINI, LOOPP, LOOPPB, POINT, VOISS >
Errc PMalikPeronaFiltering( const TIN &ims, TIN &imd, int iterations, int edgethreshold ) {
   const float t=0.2F;
   int k=edgethreshold;
   POINT p;

   TINI *im1 = new TINI(ims.Size());
   TINI *im2 = new TINI(ims.Size());
   TINI *im3;

   (*im1)=ims;

   // Les iterations.
   for (; iterations>0; iterations--) {
##LOOPPB(ims,p,1)
      {
	 float accu=0;
	 for (int v=0; v<$VOISS; v++) {
	    float dif=(*im1)[p+v$VOISS[v]] - (*im1)[p];
	    accu += exp(-ABS(dif)/k) * dif;
	 }
	 (*im2)[p]=(*im1)[p]+(t* accu);
      }
      
      im3=im2;
      im2=im1;
      im1=im3;
   }
##LOOPP(imd,p)
   imd[p]=(TIN::ValueType)(*im2)[p];
   
   delete im1;
   delete im2;
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type()==Po_$TIN) {
      TIN* const ims=(TIN*)objs[0];
      objd[0]=new TIN(ims->Props());
      TIN * const imd=(TIN*)objd[0];
      
      result=PMalikPeronaFiltering(*ims,*imd, atoi(parv[0]),atoi(parv[1]));
      goto end;
   }
## end
##end

##forall(PMalikPeronaFiltering,/Img2d/, Img2dsf)
##forall(PMalikPeronaFiltering,/Img3d/, Img3dsf)

#ifdef MAIN
#define USAGE	"usage: %s iterations edgethreshold [-m mask] [im_in|-] [im_out|-]"
#define PARC	2
#define FINC	1
#define FOUTC	1
#define MASK	1

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
