/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file psubval.cpp
 *
 * Subtracts values stored in a collection to 
 * to each band of the input image.
 */
template <typename T>
Errc PSubVal( const Collection &cols, const Imx3d<T> &ims, Imx3d<T> &imd ) {
   const Float* p = cols.GETARRAY("internal_array", Float);
   Long size = cols.GETARRAYSIZE("internal_array", Float);

   if ( size != ims.Bands() ) {
      std::cerr << "Error psubval: Bad value array size: " << size<<std::endl;
      return FAILURE;
   }

   for (int b = 0; b < ims.Bands(); b++) {
      T *ps = ims.Vector(b);
      T *pd = imd.Vector(b);
 
      for ( ;ps < ims.Vector(b) + ims.VectorSize(); ps++, pd++) {
	 Float val = *ps - p[b];
	 if (val > Limits<T>::max()) {
	    *pd = Limits<T>::max();
	 } else if (val < Limits<T>::min()) {
	    *pd = Limits<T>::min();
	 } else {
	    *pd = (T)val;
	 }
      }
   }
   return SUCCESS;
}

##begin PSubVal < TIN, LOOP, VARS, ACC >
## append loadcases
   if ((objs[0]->Type() == Po_Collection) && (objs[1]->Type() == Po_$TIN)) {
      Collection* const cols = (Collection*)objs[0];
      TIN* const ims = (TIN*)objs[1];
      objd[0] = new TIN(ims->Props());
      TIN* const imd = (TIN*)objd[0];
      
      result = PSubVal(*cols, *ims, *imd);
      goto end;
   }
## end
##end


##forall(PSubVal, /Im..d../)

#ifdef MAIN
#define	USAGE	"usage: %s [-m mask] [col_in|-] [im_in|-] [im_out|-]"
#define	PARC	0
#define	FINC	2
#define	FOUTC	1
#define	MASK	1

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
