/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Francois Angot - 1997-07-08
 * @author Regis Clouard - 2002-06-07
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pmaxprojection.cpp
 * Transforme une image 3d en une image 2d par
 * projection de la valeur maximale selon une direction.
 */

#define PLANX 0
#define PLANY 1
#define PLANZ 2

##begin Projection2I < TYPE, LOOPP, POINT >
Errc PMaxProjection( const TYPE &ims, Img1d<TYPE::ValueType> &imd, int plan ) {
   POINT p;
   TYPE::ValueType m;
   
   switch (plan) {
      case PLANY:
	 imd.New(ims.Width());
	 for (p.x = 0; p.x < ims.Width(); p.x++) {
	    p.y = 0;
	    m = ims[p];
	    for (p.y = 1; p.y < ims.Height(); p.y++) {
	       m = MAX(m, ims[p]);
	    }
	    imd[p.x] = m;
	 }
	 break;
      case PLANX:
	 imd.New(ims.Height());
	 for (p.y = 0; p.y < ims.Height(); p.y++) {
	    p.x = 0;
	    m = ims[p];
	    for (p.x = 1; p.x < ims.Width(); p.x++) {
	       m = MAX(m, ims[p]);
	    }
	    imd[p.y] = m;
	 }
	 break;
      default: {
	 std::cerr << "PMaxProject: bad parameter value: "<< plan <<std::endl;
	 return FAILURE;
      }
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const ims =(TYPE*)objs[0];
      objd[0] = new Img1d<TYPE::ValueType>;
      Img1d<TYPE::ValueType>* const imd = (Img1d<TYPE::ValueType>*)objd[0];
      result = PMaxProjection(*ims, *imd, atoi(parv[0]));
      goto end;
   }

## end
##end

##begin Projection3I < TYPE, LOOPP, POINT >
Errc PMaxProjection( const TYPE &ims, Img2d<TYPE::ValueType> &imd, int plan ) {
   POINT p;
   TYPE::ValueType m;
   
   switch(plan) {
      case PLANZ:
	 imd.New(ims.Height(), ims.Width());
	 for (p.y = 0 ;p.y < ims.Height(); p.y++) {
	    for (p.x = 0; p.x < ims.Width(); p.x++) {
	       p.z = 0;
	       m = ims[p];
	       for (p.z = 1; p.z < ims.Depth(); p.z++) {
		  m = MAX(m, ims[p]);
	       }
	       imd[p.y][p.x] = m;
	    }
	 }
	 break;
      case PLANY:
	 imd.New(ims.Depth(), ims.Width());
	 for (p.z = 0; p.z < ims.Depth(); p.z++) {
	    for (p.x = 0;p.x < ims.Width(); p.x++) {
	       p.y = 0;
	       m = ims[p];
	       for (p.y = 1; p.y < ims.Height(); p.y++) {
		  m = MAX(m, ims[p]);
	       }
	       imd[p.z][p.x] = m;
	    }
	 }
	 break;
      case PLANX:
	 imd.New(ims.Depth(), ims.Height());
	 for (p.z = 0; p.z < ims.Depth(); p.z++) {
	    for (p.y = 0;p.y < ims.Height(); p.y++) {
	       p.x = 0;
	       m = ims[p];
	       for (p.x = 1; p.x < ims.Width(); p.x++) {
		  m=MAX(m, ims[p]);
	       }
	       imd[p.z][p.y] = m;
	    }
	 }
	 break;
      default: {
	 std::cerr << "PMaxProject: bad parameter value: "<< plan  <<std::endl;
	 return FAILURE;
      }
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const ims = (TYPE*)objs[0];
      objd[0] = new Img2d<TYPE::ValueType>;
      Img2d<TYPE::ValueType>* const imd = (Img2d<TYPE::ValueType>*)objd[0];
      result = PMaxProjection(*ims, *imd, atoi( parv[0]));
      goto end;
   }

## end
##end

##forall(Projection2I, /Img2d/)
##forall(Projection3I, /Img3d/)

#ifdef MAIN
#define USAGE	"usage: %s axis [im_in|-] [im_out|-]"
#define PARC	1
#define FINC	1
#define FOUTC	1
#define MASK	0

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
