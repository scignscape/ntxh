/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <math.h>
#include <pandore.h>
using namespace pandore;

/**
 * @file plog.cpp
 * Natural logarithm of an image.
 */

template <typename T1, typename T2>
Errc PLog( const Imx3d<T1> &ims, Imx3d<T2> &imd ) {
   for (int b = 0; b < ims.Bands(); b++) {
      T1 *ps = ims.Vector(b);
      T2 *pd = imd.Vector(b);

      const T1* end = ps + ims.VectorSize();
      for (; ps < end; ps++, pd++) {
	 if (*ps == 0) {
	    *pd = (T2)log((double)DBL_EPSILON);
	 } else {
	    *pd = (T2)log((double)*ps);
	 }
      }
   }
   return SUCCESS;
}

##begin PLOGI < TIN, TOUT >
## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const ims = (TIN*)objs[0];
      objd[0] = new TOUT(ims->Props());
      TOUT* const imd = (TOUT*)objd[0];
      
      result = PLog(*ims, *imd);
      goto end;
   }
## end
##end

##begin PLOGGraph TYPE
/**
 * Graph (nodes).
 */
Errc PLog( const TYPE &grs, TYPE &grd ) {
   grd = grs;
   for (int i = 0; i < grs.Size(); i++) {
      if ((grd[i])) {
	 if (grd[i]->value == 0) {
	    grd[i]->value = (TYPE::ValueType)log(DBL_EPSILON);
	 } else {
	    grd[i]->value = (TYPE::ValueType)log((double)grd[i]->value);
	 }
      }
   }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const grs = (TYPE*)objs[0];
      objd[0] = new TYPE(grs->Props());
      TYPE* const grd = (TYPE*)objd[0];
      
      result = PLog(*grs, *grd);
      goto end;
   }
## end
##end

##forall(PLOGI, /Img2d/, Img2dsf)
##forall(PLOGI, /Img3d/, Img3dsf)

##forall(PLOGI, /Imc2d/, Imc2dsf)
##forall(PLOGI, /Imc3d/, Imc3dsf)

##forall(PLOGI, /Imx2d/, Imx2dsf)
##forall(PLOGI, /Imx3d/, Imx3dsf)

##forall(PLOGGraph, /Graph/)

#ifdef MAIN
#define	USAGE	"usage: %s [-m mask] [im_in|-] [im_out|-]"
#define	PARC	0
#define	FINC	1
#define	FOUTC	1
#define	MASK	1

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
