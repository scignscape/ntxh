/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <math.h>
#include <pandore.h>
using namespace pandore;

/**
 * @file pfftdeconvolution.cpp
 * Deconvolution is performed by division of 2 complex images.
 */

#ifdef MAIN
#undef MAIN
namespace pfft{
#include "pfft.cpp"
}
namespace pifft{
#include "pifft.cpp"
}
namespace pfftshift{
#include "pfftshift.cpp"
}
#define MAIN

#else
namespace pfft{
#include "pfft.cpp"
}
namespace pifft{
#include "pifft.cpp"
}
namespace pfftshift{
#include "pfftshift.cpp"
}
#endif

##begin PFFTDeconvolution < TIN, TOUT, LOOPP, POINT >
Errc PFFTDeconvolution( const TIN &ims1, const TIN &ims2, TOUT &imd ) {
   POINT pt;
   
   if (ims2.Height() > ims1.Height() || ims2.Width() > ims1.Width()) {
      std::cerr << "Error pfftdeconvolution: Images size mismatch" << std::endl;
      return FAILURE;
   }
   // Use intermediate images (size next pow 2)
   int nrow = pfft::nextpow2(ims1.Height());
   int ncol = pfft::nextpow2(ims1.Width());
   TIN imsr1(nrow, ncol);
   TIN imsi(nrow, ncol);
   TIN imsr2(nrow, ncol);
   TOUT imdr1(nrow, ncol);
   TOUT imdi1(nrow, ncol);
   TOUT imdr2(nrow, ncol);
   TOUT imdi2(nrow, ncol);

   // Build real and imaginary input images (Filled with 0).
   imsi = 0;
   imsr1 = 0;
   for (pt.y = 0; pt.y < ims1.Height(); pt.y++) {
      for (pt.x = 0; pt.x < ims1.Width(); pt.x++) {
	 imsr1[pt] = ims1[pt];
      }
   }
   
   // Build the mask image data.
   // Mask is CENTERED in the result image.
   imsr2 = 0;
   Point2d shift((imsr2.Height() - ims2.Height()) / 2, (imsr2.Width() - ims2.Width()) / 2);
   for (pt.y = 0; pt.y < ims2.Height(); pt.y++) {
      for (pt.x = 0; pt.x < ims2.Width(); pt.x++) {
	 imsr2[pt + shift] = ims2[pt];
      }
   }
   pfft::PFFT(imsr1, imsi, imdr1, imdi1);
   pfft::PFFT(imsr2, imsi, imdr2, imdi2);

#define EPS 2.2204e-16

   // Deconvolution is simply a division.
##LOOPP(imdr1, pt)
   {
      double a, b, c, d, denom;
      a = imdr1[pt];
      c = imdr2[pt] + EPS;
      b = imdi1[pt];
      d = imdi2[pt];
      denom = (c * c + d * d);
      imdr1[pt] = float((a * c + b * d) / denom);
      imdi1[pt] = float((c * b - a * d) / denom);
   }

   pifft::PIFFT(imdr1, imdi1, imdr2, imdi2);

   // Create output image.
   pfftshift::PFFTShift(imdr2, imdi2, imdr1, imdi1);
##LOOPP(imd, pt)
      imd[pt] = imdr1[pt];
   
   return SUCCESS;   
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN && objs[1]->Type() == Po_$TIN) {
      TIN* const ims1 = (TIN*)objs[0];
      TIN* const ims2 = (TIN*)objs[1];
      objd[0] = new TOUT(ims1->Size());
      TOUT* const imd = (TOUT*)objd[0];

      result = PFFTDeconvolution(*ims1, *ims2, *imd);

      goto end;
   }
## end
##end

##forall(PFFTDeconvolution, /Img2d/, Img2dsf)

#ifdef MAIN
#define USAGE "usage: %s [im_in1|-] [im_in2|-] [im_out|-]"
#define PARC  0 // Number of parameters.
#define FINC  2 // Number of input images.
#define FOUTC 1 // Number of output images.
#define MASK  0 // No masking allowed.

##main(PARC, FINC, FOUTC, MASK, USAGE)

#endif
