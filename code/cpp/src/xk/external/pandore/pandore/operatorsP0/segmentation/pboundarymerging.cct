/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 2002-07-24
 * @author Regis Clouard - 2002-12-12 (GarbageCollector)
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pboundarymerging.cpp
 * @brief  Fusion de regions en utilisant le contraste aux frontieres:
 * calcule par:
 * contraste(R1,R2)= sum(max(C(s,t)))/N
 * avec C(s,t)= |ims[s]-ims[t]|
 * t i V(s), t in R2 et s in R1.
 */

struct Arete {
   Ulong ex1;
   Ulong ex2;
};


struct Region {
   Ulong no;
   Ulong no_node;
};

/*
 * A MODIFIER SELON LE CRITERE
 */

double valuation( double sum, double nbr ) {
   if (nbr == 0) return (double)MAXULONG;
   return (double)sum / nbr;
}

/*
 * Initialisation de la lut
 */
void initialisation( Region *lut, Ulong nb_lut ) {
   for (Ulong a=0; a < nb_lut; a++)
      lut[a].no=lut[a].no_node=a;
}

/*
 * Modification de la lut
 */
void modification( Region * /*lut*/, Ulong /*R12*/, Ulong /*R1*/, Ulong /*R2*/ ) {
}

/*
 *    INVARIANT SELON LE CRITERE
 */


/*
 * Permet d'eliminer du tas, toutes les aretes
 * entre deux regions qui sont maintenant fusionnees
 * de maniere a recuprer de la place.
 */
void GarbageCollector( Heap<Arete,float,int> &tas, Region *lut ) {
   Arete* tab = new Arete[tas.Nrank()];
   float* cle = new float[tas.Nrank()];
   Ulong i=0;
   while(!tas.Empty()) {
      tab[i]=tas.Pop(&cle[i]);
      Ulong R1=tab[i].ex1;
      Ulong R2=tab[i].ex2;
      
      // L'une des regions a deja ete fusionnee -> on passe.
      if (!((lut[R1].no!=R1) || (lut[R2].no!=R2))) {
	 i++;
      }
   }

   for (Ulong j=0; j<i;j++) {
      tas.Push(tab[j],cle[j]);
   }
   delete tab;
}

##begin PBOUNDARYMERGING < TIN0, TIN1, TIN2 , LOOPPB, POINT, VOISL >
/**
 *Remplissage de la lut
 */
void remplissage( const TIN0 &rgs, const TIN2 &ims, TIN1 &gs, TIN1 &gn ) {
   POINT p;
   Ulong r1,r2;
   GEdge *ptr_s, *ptr_n;
  
   // Initialisation
   for (int i=0; i<gs.Size(); i++)
      if ((gs[i]))
	 for (ptr_s=gs[i]->Neighbours(), ptr_n=gn[i]->Neighbours(); ptr_n!=NULL; ptr_s=ptr_s->Next(), ptr_n=ptr_n->Next())
	    ptr_s->weight= ptr_n->weight=0.0F;

##LOOPPB(ims,p,1)
   {
      if (rgs[p] == 0) continue;
    
      for (int v=0; v<VOISL; v++) {
	 r1=rgs[p];
	 r2=rgs[p+v$VOISL[v]];
	 if (r2 && (r1 != r2)) {
	    gn.Link(r1,r2,1.0F,true);
	    gs.Link(r1,r2,(float)ABS(ims[p]-ims[p+v$VOISL[v]]),true);
	 }
      }
   }
}

/**
 *  Code invariant par rapport au critere
 */
Errc PBoundaryMerging( const TIN0 &rgs, const TIN1 &gs, const TIN2 &ims, TIN0 &rgd, TIN1 &gd, Long number, float threshold ) {
 Region *lut;
   Ulong *p_rgd = rgd.Vector();
   Ulong *p_rgs = rgs.Vector();
   GEdge *ptr_s, *ptr_n;
   double min_0=0;
   Arete tmp;
   Ulong nb_lut=(rgs.Labels()+1);
   TIN1 gi;
   int i;
   Heap <Arete,float,int> tas(26*gs.Size());

   // supprimer le controle du nombre d'iterations
   if (number<0) 
      number=MAXLONG;
  
   gi=gs;
   gd=gs;

   // 1ere partie : Initialisation.
   lut = new Region [2*nb_lut-1];
   initialisation(lut,2*nb_lut-1);
   remplissage(rgs,ims,gd,gi);
   
   // on calcule la valuation des aretes, si valuation<=threshold alors on empile
   for (i=1;i<gs.Size();i++) {
      // si le noeud n'existe pas, on passe
      if (gd[i]==NULL) {
	 continue;
      }
      for (ptr_s=gd[i]->Neighbours(), ptr_n=gi[i]->Neighbours();ptr_s!=NULL;ptr_s=ptr_s->Next(),ptr_n=ptr_n->Next()) {
	 min_0=valuation(ptr_s->weight,ptr_n->weight);
	 if (min_0<=threshold) {
	    tmp.ex1=i;
	    tmp.ex2=ptr_s->Node();
	    tas.Push(tmp,(float) (min_0));
	 }
      }
   } // fin du parcours des noeuds du graphe
   
   // 2eme partie : fusion 
   Long nbre=0;
   while (nbre<number && !tas.Empty()) {
      // On fusionne l'arc minimum du graphe precedent
      // s'il repond au critere        
      tmp=tas.Pop();
      Ulong R1=tmp.ex1;
      Ulong R2=tmp.ex2;
      
      // L'une des regions a deja ete fusionnee -> on passe.
      if ((lut[R1].no!=R1) || (lut[R2].no!=R2)) continue;
      
      // on ne conserve que le sommet de numero minimum
      Ulong G1=MIN(lut[R1].no_node,lut[R2].no_node);
      Ulong G2=MAX(lut[R1].no_node,lut[R2].no_node);
      
      // on incremente le nombre de regions fusionnees
      // on met a jour la lut.
      Ulong R12=nb_lut+ ++nbre;
      modification(lut,R12,R1,R2);
      lut[R12].no_node=G1;
      lut[R12].no=R12;
      lut[R2].no_node=G1;
      lut[G1].no=R12;
      lut[R1].no=R12;
      lut[R2].no=R12;
      
      // on met le graphe a jour
      gd[G1]->seed=(gd[G1]->seed+gd[G2]->seed)/2;
      gd.Merge(G1,G2); // G1 reste, G2 disparait.
      gi.Merge(G1,G2); // G1 reste, G2 disparait.
      for (ptr_s=gd[G1]->Neighbours(),ptr_n=gi[G1]->Neighbours();ptr_s!=NULL;ptr_s=ptr_s->Next(), ptr_n=ptr_n->Next()) {
	 // on met le tas a jour
	 min_0=valuation(ptr_s->weight,ptr_n->weight);
	 if (min_0<=threshold) {
	    tmp.ex1=R12;
	    tmp.ex2=lut[ptr_s->Node()].no;
	    tas.Push(tmp,(float) (min_0));
	    if (tas.Full()) GarbageCollector(tas,lut);
	 }
      }
   } // fin du while
   
   // 3eme partie : reetiquetage des regions 

   // Minimisation des etiquettes.
   for (i=1;i<(int)(nb_lut+nbre);i++) {
      Ulong j=i;
      while (lut[j].no!=j) { j=lut[j].no;} 
      lut[i].no=lut[j].no_node;
   }
   // fusion dans la carte de region
   for (unsigned int f=0; f < rgd.VectorSize(); f++) {
      // pour la region qui correspond au voisin qui a fusionne, on donne le Label du 1er sommet
      p_rgd[f]=(Ulong)lut[p_rgs[f]].no;
   }
   
   gi.Delete();
   rgd.Labels(rgs.Labels());
   
   delete [] lut;
   
   return nbre; // retourne le nombre de regions fusionnees
}


## append loadcases
   // verifier toutes les entrees
   if (objs[0]->Type()==Po_$TIN0 && objs[1]->Type()==Po_$TIN1 && objs[2]->Type() == Po_$TIN2) {
      TIN0* const rgs=(TIN0*)objs[0];  
      TIN1* const gs=(TIN1*)objs[1];  
      TIN2* const ims=(TIN2*)objs[2];
      objd[0]=new TIN0(rgs->Size());
      TIN0* const rgd=(TIN0*)objd[0];
      objd[1]=new TIN1(gs->Size());
      TIN1* const gd=(TIN1*)objd[1];
      
      result = PBoundaryMerging(*rgs,*gs,*ims,*rgd,*gd,(Long)atoi(parv[0]),(float)atof(parv[1]));
      goto end;
   }
## end
##end

##forall(PBOUNDARYMERGING, Reg2d, Graph2d, /Img2d/)
##forall(PBOUNDARYMERGING, Reg3d, Graph3d, /Img3d/)

#ifdef MAIN

/*
 * Modify only the following constants, and the operator switches.
 */
#define	USAGE	"usage: %s number threshold [-m mask] [rg_in|-] [gr_in|-] [im_in|-] [rg_out|-] [gr_out|-]"
#define	PARC	2  // Number of parameters
#define	FINC	3  // Number of input images
#define	FOUTC	2  // Number of output images
#define	MASK	1  // Level of masking

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif

