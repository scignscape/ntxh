/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Regis Clouard - 2006-05-31
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pimx2imc.cpp
 * Converts multispectral image with 3 bands to one color image.
 */
template <typename T>
Errc PImx2Imc( const Imx3d<T> &ims, Imx3d<T> &imd, int colorspace ) {
   if (ims.Bands() > 3) {
      fprintf(stderr, "Error pimx2imc: Input image with too many bands.\n");
      return FAILURE;
   }
   if (colorspace <0 || colorspace>=UNKNOWN) {
      fprintf(stderr, "Error pimx2imc: unknow colorspace: %d\n", colorspace);
      return FAILURE;
   }

   int b;
   for (b = 0; b < ims.Bands(); b++) {
      T *px = ims.Vector(b);
      T *pc = imd.Vector(b);
      T* pe = px + ims.VectorSize();
      for (; px<pe; ) {
	 *(pc++) = *(px++);
      }
   }

   for (; b < 3; b++) {
      T *pc = imd.Vector(b);
      T* pe = pc + ims.VectorSize();
      for (; pc < pe; *(pc++) = 0) ;
   }

   imd.ColorSpace((PColorSpace)colorspace);
   return SUCCESS;
}

##begin PImx2Imc < TIN1, TIN2 >
## append loadcases
   if (objs[0]->Type() == Po_$TIN1) {
      TIN1* const ims = (TIN1*)objs[0];
      objd[0] = new TIN2(ims->Props());
      TIN2* const imd = (TIN2*)objd[0];
      
      result = PImx2Imc(*ims, *imd, atoi(parv[0]));
      goto end;
   }
## end
##end

##forall(PImx2Imc, Imx2duc, Imc2duc)
##forall(PImx2Imc, Imx2dsl, Imc2dsl)
##forall(PImx2Imc, Imx2dsf, Imc2dsf)

##forall(PImx2Imc, Imx3duc, Imc3duc)
##forall(PImx2Imc, Imx3dsl, Imc3dsl)
##forall(PImx2Imc, Imx3dsf, Imc3dsf)

#ifdef MAIN
#define	USAGE	"usage: %s colorspace [-m mask] [im_in|-] [im_out|-]"
#define	PARC	1
#define	FINC	1
#define	FOUTC	1
#define	MASK	2

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
