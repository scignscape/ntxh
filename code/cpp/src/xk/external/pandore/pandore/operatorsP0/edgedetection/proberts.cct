/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Regis Clouard - 1997-07-16
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file proberts.cpp
 * Approximation du gradient par la methode de Roberts.
 *
 * Parametres	:	-
 * Consult	:	Masque.
 * Fonction	:	Utilise la masque de Roberts pour faire la roberts.
 *			L'image d'amplitude est l'amplitude maximum.
 */

#define DIRECTION 2
static short tab[DIRECTION][2][2] = { {{0, -1}, 
				       {1, 0}}, 
				      {{1, 0}, 
				       {0, -1}}};

template <typename T>
Errc PRoberts( const Img2d<T> &ims, Img2d<T> &ima ) {
   register int k, l;
   int v;
   Point2d p;
   double g, amplitude;	// Valeur d'amplitude.
   
   ima.Frame(0, 1, 1);
   for (p.y = 1; p.y < ims.Height() - 1; p.y++) {
      for (p.x = 1; p.x < ims.Width() - 1; p.x++) {
	 amplitude = 0.0;
	 for (v = 0; v < DIRECTION; v++) {
	    g = 0.0;
	    for (k = -1; k <= 0; k++) {
	       for (l = -1; l <= 0; l++) {
		  g += ims[p.y + k][p.x + l] * (double)tab[v][k + 1][l + 1];
	       }
	    }
	    g = ABS(g) / 2;
	    if (g > amplitude) {
	       amplitude = g;
	    }
	 }
	 ima[p] = (T)amplitude;
      }
   }
   return SUCCESS;
}

##begin PRoberts < TIN >
## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const ims = (TIN*)objs[0];
      objd[0] = new TIN(ims->Size());		  
      TIN* const imd = (TIN*)objd[0];
      
      result = PRoberts(*ims, *imd);
      goto end;
   }

## end
##end

##forall(PRoberts, /Img2d/)

#ifdef MAIN
#define	USAGE	"usage: %s [-m mask] [im_src|-] [im_out|-]"
#define	PARC	0
#define	FINC	1
#define	FOUTC	1
#define MASK	2

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
