/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 1999-02-19
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file plocalextrema.cpp
 * Localisation des extremas des regions.
 * Un point extrema est un point dont
 * l'un de ses voisins a une valeur inferieure.
 */
##begin PLocalExtremaIG < TIN1, LOOPP, POINT, VOISS, VOISL>
Errc PLocalExtrema( const TIN1 &ims, TIN1 &imd, int connexite ) {
   int v;
   POINT p;
      
   if (connexite == VOISS) {
      int demiv=VOISS/2;
##LOOPP(ims,p)
      {
	 imd[p]=0;
	 for (v=0; v<demiv; v++) {
	    if (ims.Hold(p+v$VOISS[v]) && ims.Hold(p+v$VOISS[v+demiv]) &&
		(((ims[p] >= ims[p+v$VOISS[v]]) && (ims[p] > ims[p+v$VOISS[v+demiv]])) ||
		 ((ims[p] > ims[p+v$VOISS[v]]) && (ims[p] >= ims[p+v$VOISS[v+demiv]])))) {
	       imd[p] = ims[p];
	    }
	    break;
	 }
      } 
   } else {
      int demiv = VOISL / 2;
##LOOPP(ims,p)
      {
	 imd[p] = 0;
	 for (v = 0; v < demiv; v++) {
	    if (ims.Hold(p+v$VOISL[v]) && ims.Hold(p+v$VOISL[v+demiv]) &&
		(((ims[p] >= ims[p+v$VOISL[v]]) && (ims[p] > ims[p+v$VOISL[v+demiv]])) ||
		 ((ims[p] > ims[p+v$VOISL[v]]) && (ims[p] >= ims[p+v$VOISL[v+demiv]])))) {
	       imd[p] = ims[p];
	    }
	    break;
	 }
      }
   }
   
   return SUCCESS;
}
## append loadcases
   if (objs[0]->Type() == Po_$TIN1) {
      TIN1* const ims=(TIN1*)objs[0];
      objd[0]=new TIN1(ims->Props());
      TIN1* const imd=(TIN1*)objd[0];
      
      result=PLocalExtrema(*ims,*imd,atoi(parv[0]));
      goto end;
   }
## end
##end

##forall(PLocalExtremaIG,/Img./)

#ifdef MAIN
#define	USAGE	"usage: %s connectivity [-m mask] [im_in|-] [im_out|-]"
#define	PARC	1
#define	FINC	1
#define	FOUTC	1
#define	MASK	2

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
