/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <map>
#include <pandore.h>
using namespace pandore;

/**
 * @file pdif.cpp
 * Binary difference operator.
 */
template <typename T>
Errc PDif( const Imx3d<T> &ims1, const Imx3d<T> &ims2, Imx3d<T> &imd ) {
   if ( ims1.Size() != ims2.Size() || ims1.Bands() != ims2.Bands() ) {
      std::cerr << "Error pdif: Incompatible image size." << std::endl;
      return FAILURE;
   }
   for (int b = 0; b < ims1.Bands(); b++) {
      T *ps1 = ims1.Vector(b);
      T *ps2 = ims2.Vector(b);
      T *pd = imd.Vector(b);
      
      for (; ps1 < ims1.Vector(b) + ims1.VectorSize(); ps1++, ps2++, pd++) {
	 *pd = (T)ABS((double)*ps1 - *ps2);
      }
   }
   return SUCCESS;
}

##begin PDifI < TIN, LOOP, VARS, ACC >
## append loadcases
   if ((objs[0]->Type() == Po_$TIN) && (objs[1]->Type() == Po_$TIN)) {
      TIN* const ims1 = (TIN*)objs[0];
      TIN* const ims2 =  (TIN*)objs[1];
      objd[0] = new TIN(ims1->Props());
      
      TIN* const imd = (TIN*)objd[0];
      
      result = PDif(*ims1, *ims2, *imd);
      goto end;
   }
## end
##end

##begin PDifGraph TYPE
/**
 * Between 2 graphs
 */
Errc PDif( const TYPE &gs1, const TYPE &gs2, TYPE &gd ) {
   if (gs1.Size() > gs2.Size()) {
      gd = gs1;
   } else {
      gd = gs2;
   }

   for (int i = 0; i < gd.Size(); i++) {
      if (gs1[i] && gs2[i]) {
	 gd[i]->value = ABS(gs1[i]->value - gs2[i]->value);
      } else {
	 if ((gs1[i])) {
	    if ((gd[i])) {
	       gd[i]->value = gs1[i]->value;
	    } else {
	       gd.Add(i, gs1[i]->Item(), gs1[i]->seed);
	    }
	 } else {
	    if ((gs2[i])) {
	       if ((gd[i])) {
		  gd[i]->value = gs2[i]->value;
	       } else {
		  gd.Add(i, gs2[i]->Item(), gs2[i]->seed);
	       }
	    }
	 }
      }
   }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const gs1 = (TYPE*)objs[0];
      TYPE* const gs2 = (TYPE*)objs[1];
      objd[0] = new TYPE(MAX(gs1->Size(), gs2->Size()));
      TYPE* const gd = (TYPE*)objd[0];
      
      result = PDif(*gs1, *gs2, *gd);
      goto end;
   }
## end
##end

##begin PDifReg < TYPE, LOOPP, POINT >
Errc PDif( const TYPE &rgs1, const TYPE &rgs2, TYPE &rgd ) {
   std::map<Ulong, Ulong> t1;
   
   if ( rgs1.Size() != rgs2.Size() || rgs1.Bands() != rgs2.Bands() ) {
      std::cerr << "Error pdif: Incompatible image size." << std::endl;
      return FAILURE;
   }

   // Recherche du nombre de region.
   Ulong nbreg = 0;
   POINT p;
##LOOPP(rgs1, p)
   {
      Ulong v1 = rgs1[p];
      Ulong v2 = rgs2[p];
      if (v1 == 0 && v2 == 0) {
	 rgd[p] = 0;
      } else {
	 if (v1 == 0 || v2 == 0) {
	    if (v2 == 0) {
	       if (t1[v1]) {
		  rgd[p] = t1[v1];
	       } else {
		  rgd[p] = t1[v1] = (Ulong)++nbreg;
	       }
	    } else if (v1 == 0) {
	       if (t1[v1]) {
		  rgd[p] = t1[v1];
	       } else {
		  rgd[p] = t1[v1] = (Ulong)++nbreg;
	       }
	    } else {
	       rgd[p] = 0;
	    }
	 } else {
	    rgd[p] = 0;
	 }
      }
   }
   if (nbreg > (Ulong)MAXLONG) {
      return FAILURE;
   }
   return rgd.Labels(nbreg);
}

## append loadcases
   if ((objs[0]->Type() == Po_$TYPE) && (objs[1]->Type() == Po_$TYPE)) {
      TYPE* const rgs1 = (TYPE*)objs[0];
      TYPE* const rgs2 = (TYPE*)objs[1];
      objd[0] = new TYPE(rgs1->Size());
      
      TYPE* const rgd = (TYPE*)objd[0];
      
      result = PDif(*rgs1, *rgs2, *rgd);
      goto end;
   }
## end
##end

##forall(PDifI, /Im..d/)
##forall(PDifReg, /Reg/)
##forall(PDifGraph, /Graph/)

#ifdef MAIN
#define	USAGE	"usage: %s [-m mask] [im_in1|-] [im_in2|-] [im_out|-]"
#define	PARC	0
#define	FINC	2
#define	FOUTC	1
#define	MASK	1

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
