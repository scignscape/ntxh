/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Francois Angot - 1998-01-12
 * @author Philippe Belhomme - 2001-11-15
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pvarianceaggregation.cpp
 *
 * On affecte un point a une region si sa valeur est proche de la
 * variance de la region (si la difference entre la variance d'origine et la
 * valeur du point est inferieure au threshold).
 * La variance n'est pas recalculee pour eviter de trop s'eloigner de la
 * situation initiale.
 */

struct tvariance {
   double somme;
   double moment2;
   Long taille;
};

void AffecteCritere( tvariance &m, double val ) {
   m.somme += val;
   m.moment2 += val*val;
   m.taille++;
}

double ValeurCritere( tvariance m, double val ) {
   double moyenne1=m.somme/m.taille;
   double variance1= m.moment2/m.taille - SQR(moyenne1);
   double moyenne2=(m.somme+val)/(m.taille+1);
   double variance2=(m.moment2+val*val)/(m.taille+1) - SQR(moyenne2);
   
   return ABS(variance1-variance2);
}

##begin PVarianceAggregation < TIN1, TIN2, LOOPP, POINT, VOISS, VOISL >
Errc PVarianceAggregation( const TIN1 &rgs, const TIN2 &ims, TIN1 &rgd, int connexity, TIN2::ValueType threshold ) {
   int v,w;
   TIN1::ValueType r;
   tvariance* variance;
   POINT p, p1, pt;
   Fifo< POINT > F;
   Ulong nbpix=0;

   rgd.Labels(rgs.Labels());

   // Allocation et initialisation du tableau des variances.
   if (!(variance=(tvariance*)calloc(rgs.Labels()+1,sizeof(tvariance)))) {
      std::cerr << "Error pvarianceaggregation: Not enough memory." <<  std::endl;
      return FAILURE;
   }
   
   // Initialisation : recopie des regions d'entrée (rgs) vers la sortie (rgd) 
   // et calcul des taille et somme des niveaux de gris des régions. Les pixels
   // à 0 dans rgs sont considérés comme non traités, ceux qui appartiennent à
   // une région garderont le même label.
##LOOPP(ims,p)
   {
      r=rgd[p]=rgs[p];  // Les points de régions sont marqués comme traités 
      if (r) {          // On ne fait pas la variance de la région 0
	 AffecteCritere(variance[r],(double)ims[p]);
      } else {
	 // p est un point à 0 donc pas encore traité
	 // On va empiler p SI dans son voisinage IL Y A une région
	 if (connexity == VOISS) {
	    for (v=0;v<VOISS;v++) {
	       p1=p+v$VOISS[v];
	       if (rgs.Hold(p1) && rgs[p1]) {
		  F.Push(p); // On empile le point qui n'est pas encore traité
		  break ;    // Ce n'est pas la peine de voir les autres voisins
	       }
	    }
	 }
	 if (connexity == VOISL) {
	    for (v=0;v<VOISL;v++) {
	       p1=p+v$VOISL[v];
	       if (rgs.Hold(p1) && rgs[p1]) {
		  F.Push(p); // On empile le point qui n'est pas encore traité
		  break ;    // Ce n'est pas la peine de voir les autres voisins
	       }
	    }
	 }
      }
   } // Fin du balayage initial de l'image rgs
   
   // A ce stade tous les pixels voisins d'au moins une région sont empilés...
   
   // Nouveau mode de croissance
   // On dépile un point et on regarde si on peut l'attribuer à une région 
   // voisine en comparant son niveau de gris à la variance de la région 
   // (la différence doit être plus petite qu'un certain threshold pour que le
   // point soit aggrégé, sinon il disparaît définitivement de la pile).
   while (!F.Empty()) {
      p=F.Pop();      // On dépile un point p.

      if (connexity == VOISS) {
	 for (v=0;v<VOISS;v++) {
	    p1=p+v$VOISS[v];
	    if (rgd.Hold(p1)) {
	       if ((r=rgd[p1])) {          // Info lue dans la DESTINATION
		  TIN2::ValueType m;
		  m=(TIN2::ValueType)ValeurCritere(variance[r],(double)ims[p]);
		  if (m <= threshold) {
		     if (!rgd[p]) {  // il n'a pas été aggrégé depuis son empilement
			rgd[p]=r;     // il reçoit le label de sa région voisine
			nbpix++;
			// On empile alors tous ses voisins non encore traités 
			// (ceux à 0 dans rgd)
			for (w=0;w<VOISS;w++) {
			   pt=p+v$VOISS[w];
			   if (rgd.Hold(pt)) {
			      if (!rgd[pt]) {
				 F.Push(pt);
			      }
			   }
			}
		     }
		  }
	       }
	    }
	 }
      } else if (connexity == VOISL) {
	 for (v=0;v<VOISL;v++) {
	    p1=p+v$VOISL[v];
	    if (rgd.Hold(p1)) {
	       if ((r=rgd[p1])) {          // Info lue dans la DESTINATION
		  TIN2::ValueType m;
		  m=(TIN2::ValueType)ValeurCritere(variance[r],(double)ims[p]);
		  if (m <= threshold) {
		     if (!rgd[p]) {  // il n'a pas été aggrégé depuis son empilement
			rgd[p]=r;     // il reçoit le label de sa région voisine
			nbpix++;
			// On empile alors tous ses voisins non encore traités 
			// (ceux à 0 dans rgd)
			for (w=0;w<VOISL;w++) {
			   pt=p+v$VOISL[w];
			   if (rgd.Hold(pt)) {
			      if (!rgd[pt]) {
				 F.Push(pt);
			      }
			   }
			}
		     }
		  }
	       }
	    }
	 }
      }
   }
   free(variance);
   return nbpix;
}

## append loadcases
   if ((objs[0]->Type() == Po_$TIN1) && (objs[1]->Type() == Po_$TIN2)) {
      TIN1* const rgs=(TIN1*)objs[0];
      TIN2* const ims=(TIN2*)objs[1];
      objd[0]=new TIN1(rgs->Size());
      TIN1* const rgd=(TIN1*)objd[0];

      result=PVarianceAggregation(*rgs,*ims,*rgd,atoi(parv[0]),(TIN2::ValueType)atof(parv[1]));
      goto end;
   }

## end
##end 

##forall(PVarianceAggregation, Reg2d, /Img2d.[clf]/)
##forall(PVarianceAggregation, Reg3d, /Img3d.[clf]/)

#ifdef MAIN
#define USAGE   "usage: %s connexity threshold [-m mask] [rg_in|-] [im_in|-] [rg_out|-]"
#define PARC    2
#define FINC    2
#define FOUTC   1
#define MASK    1

##main(PARC,FINC,FOUTC,MASK,USAGE)

#endif
