/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pgetslice.cpp
 * Gets one slice from a 3D image.
 */

template <typename T>
Errc PGetSlice( const Imx3d<T> &ims, Imx2d<T> &imd, long slice ) {
   Point2d p;
   
   if (slice <0 || slice >= ims.Depth())
      slice = ims.Depth()-1;

   for (p.y=0;p.y<imd.Height();p.y++) {
      for (p.x=0;p.x<imd.Width();p.x++) {
	 for (int b=0; b<ims.Bands(); b++) {
	    imd[b][p]=ims[b][slice][p.y][p.x];
	 }
      }
   }
   return SUCCESS;
}

##begin PGetSlice < TIN, TOUT >
## append loadcases
   if (objs[0]->Type()==Po_$TIN) {
      TIN* const ims=(TIN*)objs[0];
      objd[0]=new TOUT(ims->Props());
      
      TOUT* const imd=(TOUT*)objd[0];
      
      result=PGetSlice(*ims,*imd,atol(parv[0]));
      goto end;
   }
## end
##end

##begin PGetSlicer < TIN, TOUT >
Errc PGetSlice( const TIN &rgs, TOUT &rgd, long slice ) {
   Point2d p;
   Ulong nlabels=0;

   if (slice <0 || slice >= rgs.Depth()) {
      slice = rgs.Depth()-1;
   }
   for (p.y=0;p.y<rgd.Height();p.y++) {
      for (p.x=0;p.x<rgd.Width();p.x++) {
	 if ((rgd[p]=rgs[slice][p.y][p.x])>nlabels)
	    nlabels=rgd[p];
      }
   }
   rgd.Labels(nlabels);
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type()==Po_$TIN) {
      TIN* const rgs=(TIN*)objs[0];
      objd[0]=new TOUT(rgs->Props());
      
      TOUT* const rgd=(TOUT*)objd[0];
      
      result=PGetSlice(*rgs,*rgd,atol(parv[0]));
      goto end;
   }
## end
##end

##forall(PGetSlice,/Img3duc/,/Img2duc/)
##forall(PGetSlice,/Img3dsl/,/Img2dsl/)
##forall(PGetSlice,/Img3dsf/,/Img2dsf/)

##forall(PGetSlice,/Imc3duc/,/Imc2duc/)
##forall(PGetSlice,/Imc3dsl/,/Imc2dsl/)
##forall(PGetSlice,/Imc3dsf/,/Imc2dsf/)

##forall(PGetSlice,/Imx3duc/,/Imx2duc/)
##forall(PGetSlice,/Imx3dsl/,/Imx2dsl/)
##forall(PGetSlice,/Imx3dsf/,/Imx2dsf/)

##forall(PGetSlicer,/Reg3d/,/Reg2d/)

#ifdef MAIN
#define	USAGE	"usage: %s slice [im_in|-] [im_out|-]"
#define	PARC	1
#define	FINC	1
#define	FOUTC	1
#define	MASK	0
##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
