/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - Feb 14, 2011
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file phermiterescale.cpp
 *
 * Rescales the image according to Hermite interpolation
 * algorithm.
 * This implementation uses convolution between the image
 * and a kernel.
 */

#include <cmath>

const float FilterRadius = 1.0f;

static inline float Kernel( float x ) {
   if (x < 0) x = - x;
   if (x < 1) return ((2*x - 3)*x*x + 1);
   return 0.0f;
}

// Include the convolution algorithm.
#include "convolution.h"

template <typename T>
inline Errc PHermiteRescale( const Imx2d<T> &ims, Imx2d<T> &imd, const float factory, const float factorx ) {
   return PConvolution(ims,imd,factory,factorx);
}

##begin PHermiteRescale2G < TYPE >
## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      const float scalex = (float)atof(parv[0]);
      const float scaley = (float)atof(parv[1]);
      if ( scalex<=0 || scaley<=0) {
	 result=FAILURE;
      } else {
	 TYPE* const ims=(TYPE*)objs[0];
	 objd[0]=new TYPE(Long(ims->Height()*scaley),Long(ims->Width()*scalex));
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PHermiteRescale(*ims,*imd, scaley, scalex);
      }
      goto end;
   }
## end
##end

##begin PHermiteRescale2X < TYPE >
## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      const float scalex = (float)atof(parv[0]);
      const float scaley = (float)atof(parv[1]);
      if ( scalex<=0 || scaley<=0) {
	 result=FAILURE;
      } else {
	 TYPE* const ims=(TYPE*)objs[0];
	 objd[0]=new TYPE(ims->Bands(), Long(ims->Height()*scaley),Long(ims->Width()*scalex));
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PHermiteRescale(*ims,*imd, scaley, scalex);
      }
      goto end;
   }
## end
##end

template <typename T>
inline Errc PHermiteRescale( const Imx3d<T> &ims, Imx3d<T> &imd, const float factorz, const float factory, const float factorx ) {
   return PConvolution(ims,imd,factorz,factory,factorx);
}

##begin PHermiteRescale3G < TYPE >
## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      const float scalex = (float)atof(parv[0]);
      const float scaley = (float)atof(parv[1]);
      const float scalez = (float)atof(parv[2]);
      if ( scalex<=0 || scaley<=0 || scalez<=0) {
	 result=FAILURE;
      } else {
	 TYPE* const ims=(TYPE*)objs[0];
	 objd[0]=new TYPE(Long(ims->Depth()*scalez),Long(ims->Height()*scaley),Long(ims->Width()*scalex));
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PHermiteRescale(*ims,*imd,scalez,scaley,scalex);
      }
      goto end;
   }
## end
##end

##begin PHermiteRescale3X < TYPE >
## append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      const float scalex = (float)atof(parv[0]);
      const float scaley = (float)atof(parv[1]);
      const float scalez = (float)atof(parv[2]);
      if ( scalex<=0 || scaley<=0 || scalez<=0) {
	 result=FAILURE;
      } else {
	 TYPE* const ims=(TYPE*)objs[0];
	 objd[0]=new TYPE(ims->Bands(), Long(ims->Depth()*scalez),Long(ims->Height()*scaley),Long(ims->Width()*scalex));
	 TYPE* const imd=(TYPE*)objd[0];
	 result=PHermiteRescale(*ims,*imd, scalez,scaley,scalex);
      }
      goto end;
   }
## end
##end

##forall(PHermiteRescale2G,/Img2d/)
##forall(PHermiteRescale2X,/Imc2d/)
##forall(PHermiteRescale2X,/Imx2d/)

##forall(PHermiteRescale3G,/Img3d/)
##forall(PHermiteRescale3X,/Imc3d/)
##forall(PHermiteRescale3X,/Imx3d/)

#ifdef MAIN
#define	USAGE	"usage: %s zoomx zoomy zoomz [im_in|-] [im_out|-]"
#define	PARC	3
#define	FINC	1
#define	FOUTC	1
#define	MASK	0

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
 
