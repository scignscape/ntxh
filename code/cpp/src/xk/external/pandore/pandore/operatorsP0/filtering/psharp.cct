/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 1997-07-19
 * @author Régis Clouard - 2001-05-09 (version 3.00)
 * @author Régis Clouard - 2006-01-13 (new version)
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file psharp.cpp
 * @brief Contrast sharp using mask:
 * sharp = image + k*laplacian image.
 *
 * Laplacian Masks:	 0  -1   0	    -1  -1  -1
 *		        -1   4  -1 pour 4V  -1   8 -1 pour 8V
 *		         0  -1   0	    -1  -1  -1
 */
##begin PSHARPG < TIN, LOOPPB, POINT, VOISS, VOISL >
Errc PSharp( const TIN &ims, TIN &imd, int connexity, float k ) {
   Float gx;
   POINT p;
   
   imd.Frame(ims, 1);
   
   if (connexity == VOISS) {
##LOOPPB(ims, p, 1)
      {
	 gx = 0.0F;
	 for (int v = 0; v < VOISS; v++) {
	    gx += (Float)ims[p+v$VOISS[v]];
	 }
 	 gx = (float)ims[p] + (k / VOISS) * (VOISS * ims[p] - gx);
	 if (gx > Limits<TIN::ValueType>::max()) {
	    imd[p]=Limits<TIN::ValueType>::max();
	 } else if (gx < 0) {
	    imd[p] = 0;
	 } else {
	    imd[p] = (TIN::ValueType)gx;
	 }
      }
   } else {
##LOOPPB(ims, p, 1)
      {
	 gx = 0.0F;
	 for (int v = 0; v < VOISL; v++) {
	    gx += (Float)ims[p + v$VOISL[v]];
	 }
 	 gx = (float)ims[p] + (k / VOISL) * (VOISL * ims[p] - gx);
	 if (gx > Limits<TIN::ValueType>::max()) {
	    imd[p] = Limits<TIN::ValueType>::max();
	 } else if (gx < Limits<TIN::ValueType>::min()) {
	    imd[p] = Limits<TIN::ValueType>::min();
	 } else {
	    imd[p] = (TIN::ValueType)gx;
	 }
      }
   }
   
   return SUCCESS;
}
## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const ims = (TIN*)objs[0];
      objd[0] = new TIN(ims->Props());
      TIN* const imd = (TIN*)objd[0];
      
      result = PSharp(*ims, *imd, atoi(parv[0]), (float)atof(parv[1]));
      goto end;
   }
## end
##end

##begin PSHARPX < TIN, LOOPPB, POINT, VOISS, VOISL >
Errc PSharp( const TIN &ims, TIN &imd, int connexity, float k ) {
   Float gx;
   POINT p;
   
   imd.Frame(ims, 1);
   
   if (connexity == VOISS) {
      for (int b = 0; b < ims.Bands(); b++) {
##LOOPPB(ims, p, 1)
	 {
	    gx = 0.0F;
	    for (int v = 0; v < VOISS; v++) {
	       gx += (Float)ims[b][p+v$VOISS[v]];
	    }
	    gx = (float)ims[b][p] + (k / VOISS) * (VOISS * ims[b][p] - gx);
	    if (gx > Limits<TIN::ValueType>::max()) {
	       imd[b][p] = Limits<TIN::ValueType>::max();
	    } else if (gx < 0) {
	       imd[b][p] = 0;
	    } else {
	       imd[b][p] = (TIN::ValueType)gx;
	    }
	 }
      }
   } else {
      for (int b = 0; b < ims.Bands(); b++) {
##LOOPPB(ims, p, 1)
	 {
	    gx = 0.0F;
	    for (int v = 0; v < VOISL; v++)
	       gx += (Float)ims[b][p + v$VOISL[v]];
	    gx = (float)ims[b][p] + (k / VOISL) * (VOISL * ims[b][p] - gx);
	    if (gx > Limits<TIN::ValueType>::max()) {
	       imd[b][p] = Limits<TIN::ValueType>::max();
	    } else if (gx < 0) {
	       imd[b][p] = 0;
	    } else {
	       imd[b][p] = (TIN::ValueType)gx;
	    }
	 }
      }
   }
   
   return SUCCESS;
}
## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const ims = (TIN*)objs[0];
      objd[0] = new TIN(ims->Props());
      TIN* const imd = (TIN*)objd[0];
      
      result = PSharp(*ims, *imd, atoi(parv[0]), (float)atof(parv[1]));
      goto end;
   }
## end
##end

##forall(PSHARPG, /Img[123]/)
##forall(PSHARPX, /Imx[23]/)
##forall(PSHARPX, /Imc[23]/)

#ifdef MAIN
#define	USAGE	"usage: %s connectivity degree [-m mask] [im_in|-] [im_out|-]"
#define	PARC	2
#define	FINC	1
#define	FOUTC	1
#define	MASK	3

##main(PARC, FINC, FOUTC, MASK, USAGE)

#endif
