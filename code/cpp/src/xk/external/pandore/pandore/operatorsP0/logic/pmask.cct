/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pmask.cpp
 * Masking operation.
 * if (pixel(ims2)) != 0)
 *     pixel(imd) = pixel(ims1)
 * else
 *     pixel(imd) = 0;
 */

/**
 * T2 is a gray level image or a region map.
 */
template <typename T2>
Errc PMask( const Reg2d &ims1, const Imx2d<T2> &ims2, Reg2d &imd ) { 
   if (ims1.Size() != ims2.Size()) {
      std::cerr << "Error pmask: Incompatible size between input images." << std::endl;
      return FAILURE;
   }
   Ulong *ps1 = ims1.Vector();
   T2 *ps2 = ims2.Vector(0);
   Ulong *pd = imd.Vector();
   
   for (; ps1 < ims1.Vector() + ims1.VectorSize(); ps1++, ps2++, pd++) {
      if (*ps2) {
	 *pd = *ps1;
      } else {
	 *pd = 0;
      }
   }

   imd.Labels(ims1.Labels());
   return SUCCESS;
}

template <typename T2>
Errc PMask( const Reg3d &ims1, const Imx3d<T2> &ims2, Reg3d &imd ) { 
   if (ims1.Size() != ims2.Size()) {
      std::cerr << "Error pmask: Incompatible size between input images." << std::endl;
      return FAILURE;
   }
   Ulong *ps1 = ims1.Vector();
   T2 *ps2 = ims2.Vector(0);
   Ulong *pd = imd.Vector();
   
   for (; ps1 < ims1.Vector() + ims1.VectorSize(); ps1++, ps2++, pd++) {
      if (*ps2) {
	 *pd = *ps1;
      } else {
	 *pd = 0;
      }
   }

   imd.Labels(ims1.Labels());
   return SUCCESS;
}

template <typename T1, typename T2>
Errc PMask( const Imx3d<T1> &ims1, const Imx3d<T2> &ims2, Imx3d<T1> &imd ) { 
   if (ims1.Size() != ims2.Size()) {
      std::cerr << "Error pmask: Incompatible size between input images." << std::endl;
      return FAILURE;
   }
   for (int b = 0; b < ims1.Bands(); b++) {
      T1 *ps1 = ims1.Vector(b);
      T2 *ps2 = ims2.Vector(0);
      T1 *pd = imd.Vector(b);

      for (; ps1 < ims1.Vector(b) + ims1.VectorSize(); ps1++, ps2++, pd++) {
	 if (*ps2) {
	    *pd = *ps1;
	 } else {
	    *pd = (T1)0;
	 }
      }
   }

   return SUCCESS;
}

##begin PMask < TIN1, TIN2, LOOP, VARS, ACC >
## append loadcases
   if (objs[0]->Type() == Po_$TIN1 && objs[1]->Type() == Po_$TIN2) {
      TIN1* const ims1 = (TIN1*)objs[0];
      TIN2* const ims2 = (TIN2*)objs[1];
      objd[0] = new TIN1(ims1->Props());
      TIN1* const imd = (TIN1*)objd[0];
      
      result = PMask(*ims1, *ims2, *imd);
      goto end;
   }
## end
##end

##begin PMaskGraph TYPE
Errc PMask( const TYPE &grs1, const TYPE &grs2, TYPE &grd ) {
   grd = grs1;
   for (int i = 0; i < grd.Size(); i++) {
      if (grs2[i]) {
	 grd[i]->value = grs1[i]->value;
      } else {
	 if ((grd[i])) {
	    grd[i]->value = 0;
	 }
      }
   }
   return SUCCESS;
}
## append loadcases
   if (objs[0]->Type() == Po_$TYPE && objs[1]->Type() == Po_$TYPE) {
      TYPE* const gs1 = (TYPE*)objs[0];
      TYPE* const gs2 = (TYPE*)objs[1];
      objd[0] = new TYPE(gs1->Size());
      TYPE* const gd = (TYPE*)objd[0];
      
      result = PMask(*gs1, *gs2, *gd);
      goto end;
   }
## end
##end


##forall(PMask, /Img1d/, /Img1d/)

##forall(PMask, /Img2d/, /Img2d/)
##forall(PMask, /Img2d/, /Reg2d/)

##forall(PMask, /Img3d/, /Img3d/)
##forall(PMask, /Img3d/, /Reg3d/)

##forall(PMask, /Imc2d/, /Img2d/)
##forall(PMask, /Imc2d/, /Reg2d/)

##forall(PMask, /Imc3d/, /Img3d/)
##forall(PMask, /Imc3d/, /Reg3d/)

##forall(PMask, /Imx2d/, /Img2d/)
##forall(PMask, /Imx2d/, /Reg2d/)

##forall(PMask, /Imx3d/, /Img3d/)
##forall(PMask, /Imx3d/, /Reg3d/)

##forall(PMask, /Reg2d/, /Reg2d/)
##forall(PMask, /Reg3d/, /Reg3d/)

##forall(PMask, /Reg2d/, /Img2duc/)
##forall(PMask, /Reg3d/, /Img3duc/)

##forall(PMaskGraph, /Graph/)

#ifdef MAIN
#define	USAGE	"usage: %s [-m mask] [im_in1|-] [im_in2|-] [im_out|-]"
#define	PARC	0
#define	FINC	2
#define	FOUTC	1
#define	MASK	1
##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
