/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 2006-05-30
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file psetslice.cpp
 * Sets one slice to a 3D image.
 */

template <typename T>
Errc PSetSlice( const Imx3d<T> &ims1, const Imx2d<T> &ims2, Imx3d<T> &imd, long slice ) {
   Point2d p;
   
   if (slice < 0 || slice >= ims1.Depth()) {
      return FAILURE;
   }

   imd = ims1;
   for (p.y = 0;p.y < ims2.Height(); p.y++) {
      for (p.x = 0; p.x < ims2.Width(); p.x++) {
	 for (int b = 0; b < ims2.Bands(); b++) {
	    imd[b][slice][p.y][p.x] = ims2[b][p];
	 }
      } 
   }
   return SUCCESS;
}

##begin PSetSlice < TIN1, TIN2 >
## append loadcases
   if (objs[0]->Type() == Po_$TIN1 && objs[1]->Type() == Po_$TIN2) {
      TIN1* const ims1 = (TIN1*)objs[0];
      TIN2* const ims2 = (TIN2*)objs[1];

      objd[0] = new TIN1(ims1->Props());      
      TIN1* const imd = (TIN1*)objd[0];

      result = PSetSlice(*ims1, *ims2, *imd, atol(parv[0]));
      goto end;
   }
## end
##end

##begin PSetSlicer < TIN1, TIN2 >
Errc PSetSlice( const TIN1 &rgs1, const TIN2 &rgs2, TIN1 &rgd, long slice ) {
   Point2d p;
   Ulong nlabels = 0;

   if (slice < 0 || slice >= rgs1.Depth()) {
      return FAILURE;
   }

   rgd = rgs1;
   for (p.y = 0;p.y < rgd.Height();p.y++) {
      for (p.x = 0;p.x < rgd.Width();p.x++) {
	 if ((rgd[slice][p.y][p.x] = rgs2[p])>nlabels) {
	    nlabels = rgs2[p];
	 }
      }
   }
   rgd.Labels(nlabels);
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN1 && objs[1]->Type() == Po_$TIN2) {
      TIN1* const rgs1 = (TIN1*)objs[0];
      TIN2* const rgs2 = (TIN2*)objs[1];

      objd[0] = new TIN1(rgs1->Props());
      TIN1* const imd = (TIN1*)objd[0];
      
      result = PSetSlice(*rgs1, *rgs2, *imd, atol(parv[0]));
      goto end;
   }
## end
##end

##forall(PSetSlice,/Img3duc/,/Img2duc/)
##forall(PSetSlice,/Img3dsl/,/Img2dsl/)
##forall(PSetSlice,/Img3dsf/,/Img2dsf/)

##forall(PSetSlice,/Imc3duc/,/Imc2duc/)
##forall(PSetSlice,/Imc3dsl/,/Imc2dsl/)
##forall(PSetSlice,/Imc3dsf/,/Imc2dsf/)

##forall(PSetSlice,/Imx3duc/,/Imx2duc/)
##forall(PSetSlice,/Imx3dsl/,/Imx2dsl/)
##forall(PSetSlice,/Imx3dsf/,/Imx2dsf/)

##forall(PSetSlicer,/Reg3d/,/Reg2d/)

#ifdef MAIN
#define	USAGE	"usage: %s slice [im_in1|-] [im_in2|-] [im_out|-]"
#define	PARC	1
#define	FINC	2
#define	FOUTC	1
#define	MASK	0
##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
