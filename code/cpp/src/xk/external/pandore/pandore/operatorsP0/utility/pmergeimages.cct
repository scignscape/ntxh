/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 1995-10-12
 * @author Régis Clouard - 2004-08-04 (add types)
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pmergeimages.cpp
 * Insertion de 4 sous-images en 1 seule.
 */
##begin PMergeImagesG < TIN, LOOPP, POINT >
Errc PMergeImages( const TIN &ims0, const TIN &ims1, const TIN &ims2, const TIN &ims3, TIN &imd ) {
   int h=ims0.Height();
   int w=ims0.Width();
   
   for (int y=0; y<h; y++) {
      for (int x=0; x<w; x++) {
	 imd[y][x]=ims0[y][x];
	 imd[y][x+w]=ims1[y][x];
	 imd[y+h][x]=ims2[y][x];
	 imd[y+h][x+w]=ims3[y][x];
      }
   }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type()==Po_$TIN) {
      TIN* const ims0=(TIN*)objs[0];
      TIN* const ims1=(TIN*)objs[1];
      TIN* const ims2=(TIN*)objs[2];
      TIN* const ims3=(TIN*)objs[3];
      
      if (( ims1->Width()!=ims0->Width()) || (ims0->Height()!=ims1->Height())
	  || ( ims2->Width()!=ims0->Width()) || (ims0->Height()!=ims2->Height())
	  || ( ims3->Width()!=ims0->Width()) || (ims0->Height()!=ims3->Height())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TIN(2*ims1->Height(), 2*ims1->Width());
	 TIN* const imd=(TIN*)objd[0];
	 result=PMergeImages(*ims0, *ims1, *ims2, *ims3, *imd);
      }
      goto end;
   }
## end
##end

##begin PMergeImagesC < TIN, LOOPP, POINT >
Errc PMergeImages( const TIN &ims0, const TIN &ims1, const TIN &ims2, const TIN &ims3, TIN &imd) {
   int h=ims0.Height();
   int w=ims0.Width();
   
   imd.ColorSpace(ims0.ColorSpace());
   for (int y=0; y<h; y++)
      for (int x=0; x<w; x++) {
	 for (int b=0;b<ims0.Bands();b++) {
	    imd[b][y][x]=ims0[b][y][x];
	    imd[b][y][x+w]=ims1[b][y][x];
	    imd[b][y+h][x]=ims2[b][y][x];
	    imd[b][y+h][x+w]=ims3[b][y][x];
	 }
      }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type()==Po_$TIN) {
      TIN* const ims0=(TIN*)objs[0];
      TIN* const ims1=(TIN*)objs[1];
      TIN* const ims2=(TIN*)objs[2];
      TIN* const ims3=(TIN*)objs[3];
      
      if (( ims1->Width()!=ims0->Width()) || (ims0->Height()!=ims1->Height())
	  || ( ims2->Width()!=ims0->Width()) || (ims0->Height()!=ims2->Height())
	  || ( ims3->Width()!=ims0->Width()) || (ims0->Height()!=ims3->Height())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TIN(2*ims1->Height(), 2*ims1->Width());
	 TIN* const imd=(TIN*)objd[0];
	 result=PMergeImages(*ims0, *ims1, *ims2, *ims3, *imd);
      }
      goto end;
   }
## end
##end

##begin PMergeImagesX < TIN, LOOPP, POINT >
Errc PMergeImages( const TIN &ims0, const TIN &ims1, const TIN &ims2, const TIN &ims3, TIN &imd) {
   int h=ims0.Height();
   int w=ims0.Width();
   
   for (int y=0; y<h; y++) {
      for (int x=0; x<w; x++) {
	 for (int b=0;b<ims0.Bands();b++) {
	    imd[b][y][x]=ims0[b][y][x];
	    imd[b][y][x+w]=ims1[b][y][x];
	    imd[b][y+h][x]=ims2[b][y][x];
	    imd[b][y+h][x+w]=ims3[b][y][x];
	 }
      }
   }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type()==Po_$TIN) {
      TIN* const ims0=(TIN*)objs[0];
      TIN* const ims1=(TIN*)objs[1];
      TIN* const ims2=(TIN*)objs[2];
      TIN* const ims3=(TIN*)objs[3];
      
      if (( ims1->Width()!=ims0->Width()) || (ims0->Height()!=ims1->Height())
	  || ( ims2->Width()!=ims0->Width()) || (ims0->Height()!=ims2->Height())
	  || ( ims3->Width()!=ims0->Width()) || (ims0->Height()!=ims3->Height())) {
	 result = FAILURE;
      } else {
	 objd[0]=new TIN(ims0->Bands(),2*ims1->Height(), 2*ims1->Width());
	 TIN* const imd=(TIN*)objd[0];
	 result=PMergeImages(*ims0, *ims1, *ims2, *ims3, *imd);
      }
      goto end;
   }
## end
##end

##forall(PMergeImagesG,/Img2d/)
##forall(PMergeImagesC,/Imc2d/)
##forall(PMergeImagesX,/Imx2d/)

#ifdef MAIN
#define	USAGE	"usage: %s [im_in0|-] [im_in1|-] [im_in2|-] [im_in3|-] [im_out|-]"
#define	PARC	0
#define	FINC	4
#define	FOUTC	1
#define	MASK	0

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
