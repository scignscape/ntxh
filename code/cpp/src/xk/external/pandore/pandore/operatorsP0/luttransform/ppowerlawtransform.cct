/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 2006-01-09
 * @author Régis Clouard - 2007-02-16 (color : use the vectorial approach)
 */

#include <pandore.h>
#include <math.h>
using namespace pandore;

/**
 * @file ppowerlawtransform.cpp
 * @brief Gray level transformation using power law transform.
 *
 * s = c. r^gamma
 */
template <typename T>
Errc PPowerLawTransform( const Imx3d<T> &ims, const Imx3d<T> &imd, float gamma, float min, float max ) {
   if (min > max) {
      printf("ICI\n");
      min=(float)Limits<T>::min();
      max=(float)Limits<T>::max();
   } else if (min < (float)Limits<T>::min() || max > (float)Limits<T>::max()) {
      std::cerr<< "Error ppowerlawtransform: Bad parameter values out of bound"<<std::endl;
      return FAILURE;
   }
   if ( gamma <=0 ) {
      std::cerr<< "Error ppowerlawtransform: Bad parameter values out of bound"<<std::endl;
      return FAILURE;
   }

   float smin, smax;
   smin = smax = (float) *(ims.Vector(0));
   T* ps;
   int b;
   for (b=0; b<ims.Bands(); b++) {
      // Get min, max.
      ps=ims.Vector(b);
      for ( ; ps<ims.Vector(b)+ims.VectorSize(); ps++ ) {  
	 if (smax < (float)*ps) smax = (float)*ps;
	 if (smin > (float)*ps) smin = (float)*ps;
      }
   }

   for (b=0; b<ims.Bands(); b++) {
      ps=ims.Vector(b);
      T* pd=imd.Vector(b);
      // power law transformation.
      double c=0.0;
#ifdef DEBUG
      printf("min=%f max %f smin=%f, smax=%f ; gamma = %f\n", min, max, smin, smax, gamma);
#endif

      if (smax != smin)
	 c=((double)max-min) / (pow(smax-smin, gamma));
      for (;ps<ims.Vector(b)+ims.VectorSize();ps++, pd++)
	 *pd=(T)((c*pow(*ps-smin, gamma)) + min);
   }
   return SUCCESS;
}

##begin PPowerLawTransform < TIN >
## append loadcases
   if (objs[0]->Type()==Po_$TIN) {
      TIN* const ims=(TIN*)objs[0];
      objd[0]=new TIN(ims->Props());
      TIN* const imd=(TIN*)objd[0];
      
      result=PPowerLawTransform(*ims, *imd, (float)atof(parv[0]), (float)atof(parv[1]), (float)atof(parv[2]));
      goto end;
   }
## end
##end

##forall(PPowerLawTransform, /Im.[23]d/)

/*
 * Modify only the following constants, and the function call.
 */
#ifdef MAIN
#define	USAGE	"usage: %s gamma min max [-m mask] [im_in|-] [im_out|-]"
#define	PARC	3
#define	FINC	1
#define	FOUTC	1
#define	MASK	3
##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
