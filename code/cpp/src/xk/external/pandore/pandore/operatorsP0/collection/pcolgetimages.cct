/* -*- mode: c++; c-basic-offset: 3 -*-
 * 
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Nicolas Briand - 2005-25-07
 * @bug 
 * @todo
 */

#include <iostream>
#include <list>

#include <pandore.h>
using namespace pandore;

#if (defined _MSC_VER) && (!defined snprintf)
#define snprintf _snprintf
#endif

/**
 * @file pcolgetimages.cpp
 * @brief Extracts an array of images from in a collection.
 *
 * Extracts the different Pobjects from a collection and saves these
 * them in different files with the name specified in the collection.
 * @param c_in The Collection.
 */
Errc PColGetImages( Collection &c_in ) {
  std::list<std::string> l = c_in.List();
  std::list<std::string>::iterator i = l.begin();
  for (i = l.begin(); i != l.end(); i++) {
    std::string type = c_in.GetType(*i);
##begin MA TYPE
   if (type == "Pobject:TYPE") {
      Pobject *out = c_in.GETPOBJECT(*i,TYPE);
      const char *c = i->c_str();
      char t[64];
      snprintf(t, sizeof(t), "%s.pan", c);
      t[sizeof(t) - 1] = 0;
#ifdef DEBUG
      fprintf(stderr, "%s -> %s\n", type.c_str(), t);
#endif
      if (out->SaveFile(t) == FAILURE) {
	 return FAILURE;
      }
   } else if (type == "PArray:TYPE") {
      TYPE **out = c_in.GETPARRAY(*i, TYPE);
      int nb = (int)(c_in.GETPARRAYSIZE(*i, TYPE));
      const char *c = i->c_str();
      for (int j = 0; j < nb; j++) {
	 char t[64];
	 snprintf(t, sizeof(t), "%s.%d.pan", c, j + 1);
	 t[sizeof(t) - 1] = 0;
#ifdef DEBUG
	 fprintf(stderr,"%s -> %s\n", type.c_str(), t);
#endif
	 if (out[j]->SaveFile(t) == FAILURE) {
	    return FAILURE;
	 }
      }
   } else
##end
##forall(MA, /./)
   continue;
  }
  return SUCCESS;
}

#ifdef MAIN

#define USAGE  "usage: %s [col_in|-]"
#define PARC   0 // Number of parameters
#define FINC   1 // Number of input images
#define FOUTC  0 // Number of output images
#define MASK   0 // Level of masking

int main( int argc, char *argv[] ) {
   Errc result;                // The result code of the execution.
   Pobject *mask;              // The mask.
   Pobject *objin[FINC + 1];   // The input objects.
   Pobject *objs[FINC + 1];    // The source objects masked by the mask.
   Pobject *objout[FOUTC + 1]; // The output object.
   Pobject *objd[FOUTC + 1];   // The result object of the execution.
   char* parv[PARC + 1];       // The input parameters.
   
   ReadArgs(argc, argv, PARC, FINC, FOUTC, &mask, objin, objs, objout, objd, parv, USAGE, MASK);
   
   switch (objs[0]->Type()) {
   case Po_Collection: {
      Collection *c = (Collection*)objs[0];
      result = PColGetImages(*c);
   } break;
   default:
      fprintf(stderr,"Error pcolgetimages: Pandore type not supported by this operator\n");
      result = FAILURE;
   }
   
   if (result) {
      WriteArgs(argc, argv, PARC, FINC, FOUTC, &mask, objin, objs, objout, objd, MASK);
   }
   Exit(result);
   return 0;
}

#endif
