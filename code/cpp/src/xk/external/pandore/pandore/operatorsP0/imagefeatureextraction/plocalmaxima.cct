/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 1997-07-15
 * @author Régis Clouard - 2002-12-26
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file plocalmaximum.cpp
 *
 * Detecte les maxima locaux qui sont superieurs
 * a tous ses voisins selon la connexite.
 */
##begin PLocalMaximumIG < TIN, LOOPP, POINT, VOISS, VOISL>
Errc PLocalMaximum( const TIN &ims, TIN &imd, int connexity ) {
   POINT p;
   
   if (connexity == VOISS) {
##LOOPP(ims, p)
      {
	 imd[p] = ims[p];
	 for (int v = 0; v < VOISS; v++) {
	    if (ims.Hold(p + v$VOISS[v]) && ims[p + v$VOISS[v]] > ims[p]) {
	       imd[p] = 0;
	       break;
	    }
	 }
      }
   } else {
##LOOPP(ims, p)
      {
	 imd[p] = ims[p];
	 for (int v = 0; v < VOISL; v++) {
	    if (ims.Hold(p + v$VOISL[v]) && ims[p + v$VOISL[v]] > ims[p]) {
	       imd[p] = 0;
	       break;
	    }
	 }
      } 
   }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const ims = (TIN*)objs[0];
      objd[0] = new TIN(ims->Size());
      TIN* const imd = (TIN*)objd[0];
      
      result = PLocalMaximum(*ims, *imd, atoi(parv[0]));
      goto end;
   }
## end
##end


##begin PLocalMaximumG < TIN >
Errc PLocalMaximum( const TIN &grs, TIN &grd, int /*connexite*/ ) {
   grd = grs;
   for (int i = 0; i < grs.Size(); i++) {
      if ((grd[i])) {
	 TIN::ValueType u = grs[i]->value;
	 GEdge *ptr;
	 for (ptr = grs[i]->Neighbours(); ptr; ptr = ptr->Next()) {
	    if (grs[ptr->Node()]->value > u) {
	       grd[i]->value = 0;
	       break;
	    }
	 }
      }
   }
  
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const ims = (TIN*)objs[0];
      objd[0] = new TIN(ims->Size());
      TIN* const imd = (TIN*)objd[0];
      
      result = PLocalMaximum(*ims, *imd, atoi(parv[0]));
      goto end;
   }
## end
##end

##forall(PLocalMaximumIG, /Img1d/)
##forall(PLocalMaximumIG, /Img2d/)
##forall(PLocalMaximumIG, /Img3d/)
##forall(PLocalMaximumG, /Graph/)

#ifdef MAIN
#define	USAGE	"usage: %s connectivity [-m mask] [im_in|-] [im_out|-]"
#define	PARC	1
#define	FINC	1
#define	FOUTC	1
#define	MASK	2

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
