/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Alexandre Duret-Lutz - 1999-11-22
 */

#include <string.h>
#include <pandore.h>
using namespace pandore;

/**
 * @file parray2array.cpp
 * Convert the type of array items.
 */

#ifdef _MSC_VER
// Because Visual C++ does not support strcasecmp....
#include <ctype.h>
int strcasecmp( const char *s1, const char *s2 ) {
   int i;
   for (i = 0; s1[ i ] != '\0' && s2[ i ] != '\0'; ++i) {
      char ch1 = toupper(s1[i]);
      char ch2 = toupper(s2[i]);
      
      if (ch1 != ch2) {
	 return (int) (ch1 - ch2);
      }
   }
   
   return (int) (s1[i] - s2[i]);
}
#endif


##begin a2a_ TYPESRC TYPEDEST
Errc Array2Array_$TYPESRC$_$TYPEDEST( Collection &in, const std::string &name) {
  TYPESRC* s = in.GETARRAY(name, TYPESRC);
  Long size = in.GETARRAYSIZE(name, TYPESRC);
  TYPEDEST* d = new TYPEDEST[size];
  
  for (int i = 0; i < size; ++i) {
     d[i] = (TYPEDEST)s[i];
  }
  
  in.SETARRAY(name, TYPEDEST, d, size);
  return SUCCESS;
}
##end
##forallbase(a2a_, /./, /./)

Errc Array2Array( Collection &in, const std::string &name, const std::string &type_out ) {
  std::string type = in.GetType(name);
##begin typecase TYPESRC
  if (type == "Array:TYPESRC") {
##  begin sndtypecase TYPEDEST
    if (!strcasecmp(type_out.c_str(), "TYPEDEST")) {
      return Array2Array_$TYPESRC$_$TYPEDEST(in, name);
    }
##  end
##  forallbase(sndtypecase, /./)
  } 
##end
##forallbase(typecase, /./)
 {
    std::cerr << "Error parray2array: Invalid collection type" << std::endl;
    return FAILURE;
 }
}

#ifdef MAIN

/*
 * Modify only the following constants, and the function call.
 */
#define	USAGE	"usage: %s name type [col_in|-] [col_out|-]"
#define	PARC	2
#define	FINC	1
#define	FOUTC	1
#define	MASK	0

int main( int argc, char *argv[] ) {
   Errc	 result;	       // The result code of the execution.
   Pobject* mask;	       // The region map.
   Pobject* objin[FINC + 1];   // The input objects;
   Pobject* objs[FINC + 1];    // The source objects masked by the mask.
   Pobject* objout[FOUTC + 1]; // The output object.
   Pobject* objd[FOUTC + 1];   // The result object of the execution.
   char* parv[PARC + 1];       // The input parameters.
   
   ReadArgs(argc, argv, PARC, FINC, FOUTC, &mask, objin, objs, objout, objd, parv, USAGE, MASK);
   
   if (objs[0]->Type() == Po_Collection) {
      Collection* ims1 = (Collection*)objs[0];
      objd[0] = ims1;
      result = Array2Array(*ims1, parv[0], parv[1]);
   } else {
      PrintErrorFormat(objin, FINC);
      result = FAILURE;
   }
   
   if (result) {
      WriteArgs(argc, argv, PARC, FINC, FOUTC, &mask, objin, objs, objout, objd, MASK);
   }
   Exit(result);
   return 0;
}

#endif
