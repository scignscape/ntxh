/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 1997-07-23
 * @author Régis Clouard - 2010-04-30 (add multispectral images)
 * @author Régis Clouard - Jun 06, 2010 (add output vector)
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pmaximumvalue.cpp
 *
 * Returns the maximum pixel value of the image.
 */
template <typename T>
Float PMaximumValue( const Imx3d<T> &ims, Collection &col_out ) {
   Float *t = new Float[ims.Bands()];
   for (int b=0; b<ims.Bands(); ++b) {
      T *ps=ims.Vector(b);
      T max=*(ps++);
      const T *pf=ims.Vector(b)+ims.VectorSize();
      for ( ; ps<pf ; ps++) {
	 if (*ps>max) max=*ps;
      }
      t[b] = (Float)max;
   }
   col_out.SETARRAY("internal_array", Float, t, ims.Bands());

   return t[0];
}

##begin PMaximumValue < TYPE >
## append loadcases
   if (objs[0]->Type()==Po_$TYPE) {
      TYPE* const ims=(TYPE*)objs[0];
      objd[0]=new Collection;
      Collection* const cold=(Collection*)objd[0];
      
      result= PMaximumValue(*ims, *cold);
      goto end;
   }
## end
##end

##begin PMaximumValueG < TYPE >
Float PMaximumValue( const TYPE &grs, Collection &col_out ) {
   Float *t = new Float[1];
   TYPE::ValueType u,max;
   int i;
   
   max=Limits<TYPE::ValueType>::min();
   for (i=0;i<grs.Size();i++)
      if ((grs[i]) && ((u=grs[i]->value)>max))
	 max=u;
   
   t[0] = (Float)max;
   col_out.SETARRAY("internal_array", Float, t, 1);
   
   return t[0];
}

##append loadcases
   if (objs[0]->Type() == Po_$TYPE) {
      TYPE* const grs=(TYPE*)objs[0];      
      objd[0]=new Collection;
      Collection* const cold=(Collection*)objd[0];

      result= PMaximumValue(*grs, *cold);
      goto end;
   }
## end 
##end 

##forall(PMaximumValue,/Im/)
##forall(PMaximumValue,/Reg/)
##forall(PMaximumValueG,/Graph/)

#ifdef MAIN
#define USAGE	"usage: %s [-m mask] [im_in|-] [col_out|-]"
#define PARC	0
#define FINC	1
#define FOUTC	1
#define MASK	1

##main(PARC,FINC,FOUTC,MASK,USAGE)
#endif
