/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 2001-05-18
 * @author Régis Clouard - 2003-03-31
 * @author Régis Clouard - 2005-01-10 (+ 1d)
 */

#include <string.h>
#include <iostream>
#include <fstream>
#include <pandore.h>
using namespace pandore;

/**
 * @file ppan2txt.cpp
 * Creation a text file with non nul pixels of image.
 */
##begin PPan2Txt1d < TIN, LOOPP, POINT >
Errc PPan2Txt( const TIN &ims, char *filename ) {
   POINT p;
   std::ostream *fp;
   
   if (!filename || !strcmp(filename, "-")) {
      fp = &std::cout;
   } else {
      fp = new std::ofstream(filename);
   }
   
   if (filename && (!fp->good())) {
      std::cerr << "Error ppan2txt: cannot read into file: " << filename << std::endl;
      return FAILURE;
   }

##LOOPP(ims, p)
   if (ims[p]) {
      *fp << (float)ims[p] << " " << p.x << std::endl;
   }
   
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const ims = (TIN*)objs[0];
   
      result = PPan2Txt(*ims, (argc > 2) ? argv[2] : NULL);
      goto end;
   }
## end
##end

##begin PPan2Txt2d < TIN, LOOPP, POINT >
Errc PPan2Txt( const TIN &ims, char *filename ) {
   POINT p;
   std::ostream *fp;
   
   if (!filename || !strcmp(filename, "-")) {
      fp = &std::cout;
   } else {
      fp = new std::ofstream(filename);
   }
   
   if (filename && (!fp->good())) {
      std::cerr << "Error ppan2txt: cannot read into file: " << filename << std::endl;
      return FAILURE;
   }


##LOOPP(ims, p)
   if (ims[p]) {
      *fp << (float)ims[p] << " " << p.x << " " << p.y << std::endl;
   }
   
   return SUCCESS;
}

## append loadcases
if (objs[0]->Type() == Po_$TIN) {
   TIN* const ims = (TIN*)objs[0];
   
   result = PPan2Txt(*ims, (argc > 2) ? argv[2] : NULL);
   goto end;
}
## end
##end

##begin PPan2Txt3d < TIN, LOOPP, POINT>
Errc PPan2Txt( const TIN &ims, char *filename ) {
   POINT p;
   std::ostream *fp;
   
   if (!filename || !strcmp(filename, "-")) {
      fp = &std::cout;
   } else {
      fp = new std::ofstream(filename);
   }
   
   if (filename && (!fp->good())) {
      std::cerr << "Error ppan2txt: cannot read into file: " <<filename<< std::endl;
      return FAILURE;
   }

##LOOPP(ims, p)
   if (ims[p]) {
      *fp << (float)ims[p] << " " << p.x << " " << p.y <<" " << p.z << std::endl;
   }

   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const ims=(TIN*)objs[0];
      
      result = PPan2Txt(*ims, (argc > 2) ? argv[2] : NULL);
      goto end;
   }
## end
##end

##forall(PPan2Txt1d, /Img1d/)
##forall(PPan2Txt2d, /Img2d/)
##forall(PPan2Txt2d, /Reg2d/)
##forall(PPan2Txt3d, /Img3d/)
##forall(PPan2Txt3d, /Reg3d/)

#ifdef MAIN
#define	USAGE	"usage: %s [im_in|-] [file_out|-]"
#define	PARC	0
#define	FINC	1
#define	FOUTC	0
#define	MASK	0

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
