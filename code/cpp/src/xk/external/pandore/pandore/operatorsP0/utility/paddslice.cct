/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Régis Clouard - 2006-05-30
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file paddslice.cpp
 * Adds one slice at the beginning (if direction <=0)
 * or at the end (if direction >0) of a 3D image.
 */
template <typename T>
Errc PAddSlice( const Imx3d<T> &ims1, const Imx2d<T> &ims2, Imx3d<T> &imd, int direction ) {
   PobjectProps props=ims1.Props();
   props.ndep++;
   imd.New(props);
   
   Long shift=(direction <= 0)? 1: 0;

   Point3d p1;
   for (p1.z=0; p1.z<ims1.Depth(); p1.z++) {
      for (p1.y=0; p1.y<ims1.Height(); p1.y++) {
	 for (p1.x=0; p1.x<ims1.Width(); p1.x++) {
	    for (int b=0; b<ims1.Bands(); b++) {
	       imd[b][p1.z+shift][p1.y][p1.x]=ims1[b][p1];
	    }
	 }
      }
   }
   Long plane = (direction<=0)? 0: imd.Depth()-1;

   Point2d p2;
   for (p2.y=0; p2.y<ims2.Height(); p2.y++) {
      for (p2.x=0; p2.x<ims2.Width(); p2.x++) {
	 for (int b=0; b<ims2.Bands(); b++) {
	    imd[b][plane][p2.y][p2.x]=ims2[b][p2];
	 }
      }
   }
   
   return SUCCESS;
}

##begin PAddSlice < TIN1, TIN2 >
## append loadcases
   if (objs[0]->Type()==Po_$TIN1 && objs[1]->Type()==Po_$TIN2) {
      TIN1* const ims1=(TIN1*)objs[0];
      TIN2* const ims2=(TIN2*)objs[1];

      objd[0]=new TIN1;
      TIN1* const imd=(TIN1*)objd[0];

      result=PAddSlice(*ims1, *ims2, *imd, atol(parv[0]));
      goto end;
   }
## end
##end

##forall(PAddSlice, /Img3duc/, /Img2duc/)
##forall(PAddSlice, /Img3dsl/, /Img2dsl/)
##forall(PAddSlice, /Img3dsf/, /Img2dsf/)

##forall(PAddSlice, /Imc3duc/, /Imc2duc/)
##forall(PAddSlice, /Imc3dsl/, /Imc2dsl/)
##forall(PAddSlice, /Imc3dsf/, /Imc2dsf/)

##forall(PAddSlice, /Imx3duc/, /Imx2duc/)
##forall(PAddSlice, /Imx3dsl/, /Imx2dsl/)
##forall(PAddSlice, /Imx3dsf/, /Imx2dsf/)

#ifdef MAIN
#define	USAGE	"usage: %s direction [im_in1|-] [im_in2|-] [im_out|-]"
#define	PARC	1
#define	FINC	2
#define	FOUTC	1
#define	MASK	0
##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
