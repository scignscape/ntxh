/* -*- mode: c++; c-basic-offset: 3 -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pbinarization.cpp
 * Binary threshold of image.
 * If low <= high -> [low..high]
 * If low > high  -> [min..low[ U ]high..max]
 */
template <typename T1, typename T2>
Errc PBinarization( const Imx3d<T1> &ims, Imx3d<T2> &imd, float low, float high ) {
   if (low < (float)Limits<T1>::min()) {
      low = (float)Limits<T1>::min();
   } else if (low > (float)Limits<T1>::max()) {
      low = (float)Limits<T1>::max();
   }
   if (high > (float)Limits<T1>::max()) {
      high  =(float)Limits<T1>::max();
   } else if (high < (float)Limits<T1>::min()) {
      high = (float)Limits<T1>::min();
   }
   
   if (high < low) {
      T1 *ps = ims.Vector(0);
      T2 *pd = imd.Vector(0);
      const T1 *pe = ps + ims.VectorSize();
      for ( ; ps < pe; ps++, pd++) {
	 if (((float)*ps > low) || ((float)*ps < high)) {
	    *pd = 255;
	 } else {
	    *pd = 0;
	 }
      }
      for ( int b=1 ; b < ims.Bands(); b++ ) {
	 T1 *ps = ims.Vector(b);
	 T2 *pd = imd.Vector(0);
	 const T1 *pe = ps + ims.VectorSize();
	 for ( ; ps < pe; ps++, pd++) {
	    if (((float)*ps > low) || ((float)*ps < high)) {
	       *pd = 255;
	    }
	 }
      }
   } else {
      T1 *ps = ims.Vector(0);
      T2 *pd = imd.Vector(0);
      const T1 *pe = ps + ims.VectorSize();
      for ( ; ps < pe; ps++, pd++) {
	 if (((float)*ps >= low) && ((float)*ps <= high)) {
	    *pd = 255;
	 } else {
	    *pd = 0;
	 }
      }
      for (int b = 1; b < ims.Bands(); b++) {
	 T1 *ps = ims.Vector(b);
	 T2 *pd = imd.Vector(0);
	 const T1 *pe = ps + ims.VectorSize();
	 for ( ; ps < pe; ps++,pd++)  {
	    if (((float)*ps >= low) && ((float)*ps <= high)) {
	       *pd = 255;
	    }
	 }
      }
   }
   return SUCCESS;
}

##begin PBinarizationI < TIN1, TIN2 >
## append loadcases
   if (objs[0]->Type() == Po_$TIN1) {
      TIN1* const ims = (TIN1*)objs[0];
      objd[0] = new TIN2(ims->Props());
      
      TIN2* const imd = (TIN2*)objd[0];
      
      result = PBinarization(*ims,*imd,(float)atof(parv[0]), (float)atof(parv[1]));
      goto end;
   }
## end
##end

##begin PBinarizationG < TIN >
Errc PBinarization( const TIN &grs, TIN &grd, TIN::ValueType low, TIN::ValueType high ) {
   if (low < Limits<TIN::ValueType>::min()) {
      low = Limits<TIN::ValueType>::min();
   } else if (low > Limits<TIN::ValueType>::max()) {
      low = Limits<TIN::ValueType>::max();
   }
   if (high>Limits<TIN::ValueType>::max()) {
      high = Limits<TIN::ValueType>::max();
   } else if (high < Limits<TIN::ValueType>::min()) {
      high = Limits<TIN::ValueType>::min();
   }

   grd = grs;
   if (high < low) {
      for (int i = 1; i < grs.Size(); i++) {
	 if ((grs[i]->value > low) || (grs[i]->value > high)) {
	    grd[i]->value = 255;
	 } else {
	    grd[i]->value = 0;
	 }
      }
   } else {
      for (int i = 1; i < grs.Size(); i++) {
	 if ((grs[i]->value >= low) && (grs[i]->value <= high)) {
	    grd[i]->value = 255;
	 } else {
	    grd[i]->value = 0;
	 }
      }
   }
   return SUCCESS;
}

## append loadcases
   if (objs[0]->Type() == Po_$TIN) {
      TIN* const grs = (TIN*)objs[0];
      objd[0] = new TIN(grs->Size());
      
      TIN* const grd = (TIN*)objd[0];
      
      result = PBinarization(*grs, *grd, (TIN::ValueType)atof(parv[0]), (TIN::ValueType)atof(parv[1]));
      goto end;
   }
## end
##end

##forall(PBinarizationI, /Im.1d/, /Img1duc/)
##forall(PBinarizationI, /Im.2d/, /Img2duc/)
##forall(PBinarizationI, /Im.3d/, /Img3duc/)
##forall(PBinarizationI, /Reg2d/, /Img2duc/)
##forall(PBinarizationI, /Reg3d/, /Img3duc/)
##forall(PBinarizationG, /Graph/)

#ifdef MAIN
#define	USAGE	"usage: %s low high [-m mask] [im_in|-][im_out|-]"
#define	PARC	2
#define	FINC	1
#define	FOUTC	1
#define	MASK	1

##main(PARC, FINC, FOUTC, MASK, USAGE)

#endif
