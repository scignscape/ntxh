/* -*- c-basic-offset: 3; mode: c++ -*-
 *
 * Copyright (c), GREYC.
 * All rights reserved
 *
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of the GREYC, nor the name of its
 *     contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * 
 * For more information, refer to:
 * https://clouard.users.greyc.fr/Pandore
 */

/**
 * @author Regis Clouard - 2000-06-27
 */

#include <pandore.h>
using namespace pandore;

/**
 * @file pimc2img.cpp
 * Converts 3 graylevels images to color image.
 */
template <typename T>
Errc PImgs2Imc( const Imx3d<T> &imr, const Imx3d<T> &img, const Imx3d<T> &imb, Imx3d<T> &imd ) {

   if ((imr.Size() != img.Size()) || (imr.Size() != imb.Size())) {
      std::cerr << "Error pimgs2imc: Input image with different size\n" << std::endl;
      return FAILURE;
   }
   T *psr = imr.Vector();
   T *psg = img.Vector();
   T *psb = imb.Vector();

   T *pdr = imd.Vector(0);
   T *pdg = imd.Vector(1);
   T *pdb = imd.Vector(2);

   for ( ; psr< imr.Vector() + imr.VectorSize(); ) {
      *pdr++ = *psr++;
      *pdg++ = *psg++;
      *pdb++ = *psb++;
   }

   imd.ColorSpace((PColorSpace)0);
   return SUCCESS;
}

##begin PImgs2Imc < TIN, TOUT, LOOP, VARS, ACC >
## append loadcases
   if ((objs[0]->Type() == Po_$TIN) && (objs[1]->Type() == Po_$TIN) && (objs[2]->Type() == Po_$TIN)) {
      TIN* const imr = (TIN*)objs[0];
      TIN* const img = (TIN*)objs[1];
      TIN* const imb = (TIN*)objs[2];
      objd[0] = new TOUT(imr->Size());
      TOUT* const imd = (TOUT*)objd[0];
      
      result = PImgs2Imc(*imr,*img,*imb,*imd);
      goto end;
   }
## end
##end

##forall(PImgs2Imc, /Img2duc/, /Imc2duc/)
##forall(PImgs2Imc, /Img2dsl/, /Imc2dsl/)
##forall(PImgs2Imc, /Img2dsf/, /Imc2dsf/)
##forall(PImgs2Imc, /Img2dsd/, /Imc2dsd/)


##forall(PImgs2Imc,/Img3duc/,/Imc3duc/)
##forall(PImgs2Imc,/Img3dsl/,/Imc3dsl/)
##forall(PImgs2Imc,/Img3dsf/,/Imc3dsf/)
##forall(PImgs2Imc,/Img3dsd/,/Imc3dsd/)

#ifdef MAIN
#define	USAGE	"usage: %s [-m mask] [im_in1|-] [im_in2|-] [im_in3|-] [im_out|-]"
#define	PARC	0
#define	FINC	3
#define	FOUTC	1
#define	MASK	2

##main(PARC, FINC, FOUTC, MASK, USAGE)
#endif
