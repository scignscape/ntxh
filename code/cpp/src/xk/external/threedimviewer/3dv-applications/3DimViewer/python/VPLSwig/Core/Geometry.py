# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geometry')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geometry')
    _Geometry = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geometry', [dirname(__file__)])
        except ImportError:
            import _Geometry
            return _Geometry
        if fp is not None:
            try:
                _mod = imp.load_module('_Geometry', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Geometry = swig_import_helper()
    del swig_import_helper
else:
    import _Geometry
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import VPLSwig.Core.Core
class CCoordinates2_int(_object):
    """Proxy of C++ vpl::img::CCoordinates2<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCoordinates2_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCoordinates2_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CCoordinates2_int
        __init__(self, px, py) -> CCoordinates2_int
        __init__(self, p) -> CCoordinates2_int
        """
        this = _Geometry.new_CCoordinates2_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CCoordinates2_int
    __del__ = lambda self: None

    def getX(self):
        """getX(self) -> vpl::img::CCoordinates2< int >::tComponent const &"""
        return _Geometry.CCoordinates2_int_getX(self)


    def getY(self):
        """getY(self) -> vpl::img::CCoordinates2< int >::tComponent const &"""
        return _Geometry.CCoordinates2_int_getY(self)


    def x(self):
        """x(self) -> vpl::img::CCoordinates2< int >::tComponent const &"""
        return _Geometry.CCoordinates2_int_x(self)


    def y(self):
        """y(self) -> vpl::img::CCoordinates2< int >::tComponent const &"""
        return _Geometry.CCoordinates2_int_y(self)


    def setX(self, px):
        """setX(self, px) -> CCoordinates2_int"""
        return _Geometry.CCoordinates2_int_setX(self, px)


    def setY(self, py):
        """setY(self, py) -> CCoordinates2_int"""
        return _Geometry.CCoordinates2_int_setY(self, py)


    def setXY(self, px, py):
        """setXY(self, px, py) -> CCoordinates2_int"""
        return _Geometry.CCoordinates2_int_setXY(self, px, py)


    def __eq__(self, r):
        """__eq__(self, r) -> bool"""
        return _Geometry.CCoordinates2_int___eq__(self, r)


    def __ne__(self, r):
        """__ne__(self, r) -> bool"""
        return _Geometry.CCoordinates2_int___ne__(self, r)


    def __add__(self, r):
        """__add__(self, r) -> CCoordinates2_int"""
        return _Geometry.CCoordinates2_int___add__(self, r)


    def __sub__(self, r):
        """__sub__(self, r) -> CCoordinates2_int"""
        return _Geometry.CCoordinates2_int___sub__(self, r)


    def __mul__(self, r):
        """__mul__(self, r) -> CCoordinates2_int"""
        return _Geometry.CCoordinates2_int___mul__(self, r)


    def __div__(self, r):
        """__div__(self, r) -> CCoordinates2_int"""
        return _Geometry.CCoordinates2_int___div__(self, r)


    def __iadd__(self, *args):
        """
        __iadd__(self, p) -> CCoordinates2_int
        __iadd__(self, c) -> CCoordinates2_int
        """
        return _Geometry.CCoordinates2_int___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(self, p) -> CCoordinates2_int
        __isub__(self, c) -> CCoordinates2_int
        """
        return _Geometry.CCoordinates2_int___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(self, p) -> CCoordinates2_int
        __imul__(self, c) -> CCoordinates2_int
        """
        return _Geometry.CCoordinates2_int___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(self, p) -> CCoordinates2_int
        __idiv__(self, c) -> CCoordinates2_int
        """
        return _Geometry.CCoordinates2_int___idiv__(self, *args)


    def getSum(self):
        """getSum(self) -> vpl::img::CCoordinates2< int >::tComponent"""
        return _Geometry.CCoordinates2_int_getSum(self)


    def getMult(self):
        """getMult(self) -> vpl::img::CCoordinates2< int >::tComponent"""
        return _Geometry.CCoordinates2_int_getMult(self)

CCoordinates2_int_swigregister = _Geometry.CCoordinates2_int_swigregister
CCoordinates2_int_swigregister(CCoordinates2_int)

class CCoordinates2_tSize(_object):
    """Proxy of C++ vpl::img::CCoordinates2<(vpl::tSize)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCoordinates2_tSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCoordinates2_tSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CCoordinates2_tSize
        __init__(self, px, py) -> CCoordinates2_tSize
        __init__(self, p) -> CCoordinates2_tSize
        """
        this = _Geometry.new_CCoordinates2_tSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CCoordinates2_tSize
    __del__ = lambda self: None

    def getX(self):
        """getX(self) -> vpl::img::CCoordinates2< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates2_tSize_getX(self)


    def getY(self):
        """getY(self) -> vpl::img::CCoordinates2< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates2_tSize_getY(self)


    def x(self):
        """x(self) -> vpl::img::CCoordinates2< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates2_tSize_x(self)


    def y(self):
        """y(self) -> vpl::img::CCoordinates2< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates2_tSize_y(self)


    def setX(self, px):
        """setX(self, px) -> CCoordinates2_tSize"""
        return _Geometry.CCoordinates2_tSize_setX(self, px)


    def setY(self, py):
        """setY(self, py) -> CCoordinates2_tSize"""
        return _Geometry.CCoordinates2_tSize_setY(self, py)


    def setXY(self, px, py):
        """setXY(self, px, py) -> CCoordinates2_tSize"""
        return _Geometry.CCoordinates2_tSize_setXY(self, px, py)


    def __eq__(self, r):
        """__eq__(self, r) -> bool"""
        return _Geometry.CCoordinates2_tSize___eq__(self, r)


    def __ne__(self, r):
        """__ne__(self, r) -> bool"""
        return _Geometry.CCoordinates2_tSize___ne__(self, r)


    def __add__(self, r):
        """__add__(self, r) -> CCoordinates2_tSize"""
        return _Geometry.CCoordinates2_tSize___add__(self, r)


    def __sub__(self, r):
        """__sub__(self, r) -> CCoordinates2_tSize"""
        return _Geometry.CCoordinates2_tSize___sub__(self, r)


    def __mul__(self, r):
        """__mul__(self, r) -> CCoordinates2_tSize"""
        return _Geometry.CCoordinates2_tSize___mul__(self, r)


    def __div__(self, r):
        """__div__(self, r) -> CCoordinates2_tSize"""
        return _Geometry.CCoordinates2_tSize___div__(self, r)


    def __iadd__(self, *args):
        """
        __iadd__(self, p) -> CCoordinates2_tSize
        __iadd__(self, c) -> CCoordinates2_tSize
        """
        return _Geometry.CCoordinates2_tSize___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(self, p) -> CCoordinates2_tSize
        __isub__(self, c) -> CCoordinates2_tSize
        """
        return _Geometry.CCoordinates2_tSize___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(self, p) -> CCoordinates2_tSize
        __imul__(self, c) -> CCoordinates2_tSize
        """
        return _Geometry.CCoordinates2_tSize___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(self, p) -> CCoordinates2_tSize
        __idiv__(self, c) -> CCoordinates2_tSize
        """
        return _Geometry.CCoordinates2_tSize___idiv__(self, *args)


    def getSum(self):
        """getSum(self) -> vpl::img::CCoordinates2< __int32 >::tComponent"""
        return _Geometry.CCoordinates2_tSize_getSum(self)


    def getMult(self):
        """getMult(self) -> vpl::img::CCoordinates2< __int32 >::tComponent"""
        return _Geometry.CCoordinates2_tSize_getMult(self)

CCoordinates2_tSize_swigregister = _Geometry.CCoordinates2_tSize_swigregister
CCoordinates2_tSize_swigregister(CCoordinates2_tSize)

class CCoordinates2_float(_object):
    """Proxy of C++ vpl::img::CCoordinates2<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCoordinates2_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCoordinates2_float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CCoordinates2_float
        __init__(self, px, py) -> CCoordinates2_float
        __init__(self, p) -> CCoordinates2_float
        """
        this = _Geometry.new_CCoordinates2_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CCoordinates2_float
    __del__ = lambda self: None

    def getX(self):
        """getX(self) -> vpl::img::CCoordinates2< float >::tComponent const &"""
        return _Geometry.CCoordinates2_float_getX(self)


    def getY(self):
        """getY(self) -> vpl::img::CCoordinates2< float >::tComponent const &"""
        return _Geometry.CCoordinates2_float_getY(self)


    def x(self):
        """x(self) -> vpl::img::CCoordinates2< float >::tComponent const &"""
        return _Geometry.CCoordinates2_float_x(self)


    def y(self):
        """y(self) -> vpl::img::CCoordinates2< float >::tComponent const &"""
        return _Geometry.CCoordinates2_float_y(self)


    def setX(self, px):
        """setX(self, px) -> CCoordinates2_float"""
        return _Geometry.CCoordinates2_float_setX(self, px)


    def setY(self, py):
        """setY(self, py) -> CCoordinates2_float"""
        return _Geometry.CCoordinates2_float_setY(self, py)


    def setXY(self, px, py):
        """setXY(self, px, py) -> CCoordinates2_float"""
        return _Geometry.CCoordinates2_float_setXY(self, px, py)


    def __eq__(self, r):
        """__eq__(self, r) -> bool"""
        return _Geometry.CCoordinates2_float___eq__(self, r)


    def __ne__(self, r):
        """__ne__(self, r) -> bool"""
        return _Geometry.CCoordinates2_float___ne__(self, r)


    def __add__(self, r):
        """__add__(self, r) -> CCoordinates2_float"""
        return _Geometry.CCoordinates2_float___add__(self, r)


    def __sub__(self, r):
        """__sub__(self, r) -> CCoordinates2_float"""
        return _Geometry.CCoordinates2_float___sub__(self, r)


    def __mul__(self, r):
        """__mul__(self, r) -> CCoordinates2_float"""
        return _Geometry.CCoordinates2_float___mul__(self, r)


    def __div__(self, r):
        """__div__(self, r) -> CCoordinates2_float"""
        return _Geometry.CCoordinates2_float___div__(self, r)


    def __iadd__(self, *args):
        """
        __iadd__(self, p) -> CCoordinates2_float
        __iadd__(self, c) -> CCoordinates2_float
        """
        return _Geometry.CCoordinates2_float___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(self, p) -> CCoordinates2_float
        __isub__(self, c) -> CCoordinates2_float
        """
        return _Geometry.CCoordinates2_float___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(self, p) -> CCoordinates2_float
        __imul__(self, c) -> CCoordinates2_float
        """
        return _Geometry.CCoordinates2_float___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(self, p) -> CCoordinates2_float
        __idiv__(self, c) -> CCoordinates2_float
        """
        return _Geometry.CCoordinates2_float___idiv__(self, *args)


    def getSum(self):
        """getSum(self) -> vpl::img::CCoordinates2< float >::tComponent"""
        return _Geometry.CCoordinates2_float_getSum(self)


    def getMult(self):
        """getMult(self) -> vpl::img::CCoordinates2< float >::tComponent"""
        return _Geometry.CCoordinates2_float_getMult(self)

CCoordinates2_float_swigregister = _Geometry.CCoordinates2_float_swigregister
CCoordinates2_float_swigregister(CCoordinates2_float)

class CCoordinates2_double(_object):
    """Proxy of C++ vpl::img::CCoordinates2<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCoordinates2_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCoordinates2_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CCoordinates2_double
        __init__(self, px, py) -> CCoordinates2_double
        __init__(self, p) -> CCoordinates2_double
        """
        this = _Geometry.new_CCoordinates2_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CCoordinates2_double
    __del__ = lambda self: None

    def getX(self):
        """getX(self) -> vpl::img::CCoordinates2< double >::tComponent const &"""
        return _Geometry.CCoordinates2_double_getX(self)


    def getY(self):
        """getY(self) -> vpl::img::CCoordinates2< double >::tComponent const &"""
        return _Geometry.CCoordinates2_double_getY(self)


    def x(self):
        """x(self) -> vpl::img::CCoordinates2< double >::tComponent const &"""
        return _Geometry.CCoordinates2_double_x(self)


    def y(self):
        """y(self) -> vpl::img::CCoordinates2< double >::tComponent const &"""
        return _Geometry.CCoordinates2_double_y(self)


    def setX(self, px):
        """setX(self, px) -> CCoordinates2_double"""
        return _Geometry.CCoordinates2_double_setX(self, px)


    def setY(self, py):
        """setY(self, py) -> CCoordinates2_double"""
        return _Geometry.CCoordinates2_double_setY(self, py)


    def setXY(self, px, py):
        """setXY(self, px, py) -> CCoordinates2_double"""
        return _Geometry.CCoordinates2_double_setXY(self, px, py)


    def __eq__(self, r):
        """__eq__(self, r) -> bool"""
        return _Geometry.CCoordinates2_double___eq__(self, r)


    def __ne__(self, r):
        """__ne__(self, r) -> bool"""
        return _Geometry.CCoordinates2_double___ne__(self, r)


    def __add__(self, r):
        """__add__(self, r) -> CCoordinates2_double"""
        return _Geometry.CCoordinates2_double___add__(self, r)


    def __sub__(self, r):
        """__sub__(self, r) -> CCoordinates2_double"""
        return _Geometry.CCoordinates2_double___sub__(self, r)


    def __mul__(self, r):
        """__mul__(self, r) -> CCoordinates2_double"""
        return _Geometry.CCoordinates2_double___mul__(self, r)


    def __div__(self, r):
        """__div__(self, r) -> CCoordinates2_double"""
        return _Geometry.CCoordinates2_double___div__(self, r)


    def __iadd__(self, *args):
        """
        __iadd__(self, p) -> CCoordinates2_double
        __iadd__(self, c) -> CCoordinates2_double
        """
        return _Geometry.CCoordinates2_double___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(self, p) -> CCoordinates2_double
        __isub__(self, c) -> CCoordinates2_double
        """
        return _Geometry.CCoordinates2_double___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(self, p) -> CCoordinates2_double
        __imul__(self, c) -> CCoordinates2_double
        """
        return _Geometry.CCoordinates2_double___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(self, p) -> CCoordinates2_double
        __idiv__(self, c) -> CCoordinates2_double
        """
        return _Geometry.CCoordinates2_double___idiv__(self, *args)


    def getSum(self):
        """getSum(self) -> vpl::img::CCoordinates2< double >::tComponent"""
        return _Geometry.CCoordinates2_double_getSum(self)


    def getMult(self):
        """getMult(self) -> vpl::img::CCoordinates2< double >::tComponent"""
        return _Geometry.CCoordinates2_double_getMult(self)

CCoordinates2_double_swigregister = _Geometry.CCoordinates2_double_swigregister
CCoordinates2_double_swigregister(CCoordinates2_double)

class CCoordinates3_int(_object):
    """Proxy of C++ vpl::img::CCoordinates3<(int)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCoordinates3_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCoordinates3_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CCoordinates3_int
        __init__(self, px, py, pz) -> CCoordinates3_int
        __init__(self, px, py) -> CCoordinates3_int
        __init__(self, p) -> CCoordinates3_int
        """
        this = _Geometry.new_CCoordinates3_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CCoordinates3_int
    __del__ = lambda self: None

    def getX(self):
        """getX(self) -> vpl::img::CCoordinates3< int >::tComponent const &"""
        return _Geometry.CCoordinates3_int_getX(self)


    def getY(self):
        """getY(self) -> vpl::img::CCoordinates3< int >::tComponent const &"""
        return _Geometry.CCoordinates3_int_getY(self)


    def getZ(self):
        """getZ(self) -> vpl::img::CCoordinates3< int >::tComponent const &"""
        return _Geometry.CCoordinates3_int_getZ(self)


    def x(self):
        """x(self) -> vpl::img::CCoordinates3< int >::tComponent const &"""
        return _Geometry.CCoordinates3_int_x(self)


    def y(self):
        """y(self) -> vpl::img::CCoordinates3< int >::tComponent const &"""
        return _Geometry.CCoordinates3_int_y(self)


    def z(self):
        """z(self) -> vpl::img::CCoordinates3< int >::tComponent const &"""
        return _Geometry.CCoordinates3_int_z(self)


    def setX(self, px):
        """setX(self, px) -> CCoordinates3_int"""
        return _Geometry.CCoordinates3_int_setX(self, px)


    def setY(self, py):
        """setY(self, py) -> CCoordinates3_int"""
        return _Geometry.CCoordinates3_int_setY(self, py)


    def setZ(self, pz):
        """setZ(self, pz) -> CCoordinates3_int"""
        return _Geometry.CCoordinates3_int_setZ(self, pz)


    def setXY(self, px, py):
        """setXY(self, px, py) -> CCoordinates3_int"""
        return _Geometry.CCoordinates3_int_setXY(self, px, py)


    def setXYZ(self, px, py, pz):
        """setXYZ(self, px, py, pz) -> CCoordinates3_int"""
        return _Geometry.CCoordinates3_int_setXYZ(self, px, py, pz)


    def __eq__(self, r):
        """__eq__(self, r) -> bool"""
        return _Geometry.CCoordinates3_int___eq__(self, r)


    def __ne__(self, r):
        """__ne__(self, r) -> bool"""
        return _Geometry.CCoordinates3_int___ne__(self, r)


    def __add__(self, r):
        """__add__(self, r) -> CCoordinates3_int"""
        return _Geometry.CCoordinates3_int___add__(self, r)


    def __sub__(self, r):
        """__sub__(self, r) -> CCoordinates3_int"""
        return _Geometry.CCoordinates3_int___sub__(self, r)


    def __mul__(self, r):
        """__mul__(self, r) -> CCoordinates3_int"""
        return _Geometry.CCoordinates3_int___mul__(self, r)


    def __div__(self, r):
        """__div__(self, r) -> CCoordinates3_int"""
        return _Geometry.CCoordinates3_int___div__(self, r)


    def __iadd__(self, *args):
        """
        __iadd__(self, p) -> CCoordinates3_int
        __iadd__(self, c) -> CCoordinates3_int
        """
        return _Geometry.CCoordinates3_int___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(self, p) -> CCoordinates3_int
        __isub__(self, c) -> CCoordinates3_int
        """
        return _Geometry.CCoordinates3_int___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(self, p) -> CCoordinates3_int
        __imul__(self, c) -> CCoordinates3_int
        """
        return _Geometry.CCoordinates3_int___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(self, p) -> CCoordinates3_int
        __idiv__(self, c) -> CCoordinates3_int
        """
        return _Geometry.CCoordinates3_int___idiv__(self, *args)


    def getSum(self):
        """getSum(self) -> vpl::img::CCoordinates3< int >::tComponent"""
        return _Geometry.CCoordinates3_int_getSum(self)


    def getMult(self):
        """getMult(self) -> vpl::img::CCoordinates3< int >::tComponent"""
        return _Geometry.CCoordinates3_int_getMult(self)

CCoordinates3_int_swigregister = _Geometry.CCoordinates3_int_swigregister
CCoordinates3_int_swigregister(CCoordinates3_int)

class CCoordinates3_tSize(_object):
    """Proxy of C++ vpl::img::CCoordinates3<(vpl::tSize)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCoordinates3_tSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCoordinates3_tSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CCoordinates3_tSize
        __init__(self, px, py, pz) -> CCoordinates3_tSize
        __init__(self, px, py) -> CCoordinates3_tSize
        __init__(self, p) -> CCoordinates3_tSize
        """
        this = _Geometry.new_CCoordinates3_tSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CCoordinates3_tSize
    __del__ = lambda self: None

    def getX(self):
        """getX(self) -> vpl::img::CCoordinates3< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates3_tSize_getX(self)


    def getY(self):
        """getY(self) -> vpl::img::CCoordinates3< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates3_tSize_getY(self)


    def getZ(self):
        """getZ(self) -> vpl::img::CCoordinates3< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates3_tSize_getZ(self)


    def x(self):
        """x(self) -> vpl::img::CCoordinates3< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates3_tSize_x(self)


    def y(self):
        """y(self) -> vpl::img::CCoordinates3< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates3_tSize_y(self)


    def z(self):
        """z(self) -> vpl::img::CCoordinates3< __int32 >::tComponent const &"""
        return _Geometry.CCoordinates3_tSize_z(self)


    def setX(self, px):
        """setX(self, px) -> CCoordinates3_tSize"""
        return _Geometry.CCoordinates3_tSize_setX(self, px)


    def setY(self, py):
        """setY(self, py) -> CCoordinates3_tSize"""
        return _Geometry.CCoordinates3_tSize_setY(self, py)


    def setZ(self, pz):
        """setZ(self, pz) -> CCoordinates3_tSize"""
        return _Geometry.CCoordinates3_tSize_setZ(self, pz)


    def setXY(self, px, py):
        """setXY(self, px, py) -> CCoordinates3_tSize"""
        return _Geometry.CCoordinates3_tSize_setXY(self, px, py)


    def setXYZ(self, px, py, pz):
        """setXYZ(self, px, py, pz) -> CCoordinates3_tSize"""
        return _Geometry.CCoordinates3_tSize_setXYZ(self, px, py, pz)


    def __eq__(self, r):
        """__eq__(self, r) -> bool"""
        return _Geometry.CCoordinates3_tSize___eq__(self, r)


    def __ne__(self, r):
        """__ne__(self, r) -> bool"""
        return _Geometry.CCoordinates3_tSize___ne__(self, r)


    def __add__(self, r):
        """__add__(self, r) -> CCoordinates3_tSize"""
        return _Geometry.CCoordinates3_tSize___add__(self, r)


    def __sub__(self, r):
        """__sub__(self, r) -> CCoordinates3_tSize"""
        return _Geometry.CCoordinates3_tSize___sub__(self, r)


    def __mul__(self, r):
        """__mul__(self, r) -> CCoordinates3_tSize"""
        return _Geometry.CCoordinates3_tSize___mul__(self, r)


    def __div__(self, r):
        """__div__(self, r) -> CCoordinates3_tSize"""
        return _Geometry.CCoordinates3_tSize___div__(self, r)


    def __iadd__(self, *args):
        """
        __iadd__(self, p) -> CCoordinates3_tSize
        __iadd__(self, c) -> CCoordinates3_tSize
        """
        return _Geometry.CCoordinates3_tSize___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(self, p) -> CCoordinates3_tSize
        __isub__(self, c) -> CCoordinates3_tSize
        """
        return _Geometry.CCoordinates3_tSize___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(self, p) -> CCoordinates3_tSize
        __imul__(self, c) -> CCoordinates3_tSize
        """
        return _Geometry.CCoordinates3_tSize___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(self, p) -> CCoordinates3_tSize
        __idiv__(self, c) -> CCoordinates3_tSize
        """
        return _Geometry.CCoordinates3_tSize___idiv__(self, *args)


    def getSum(self):
        """getSum(self) -> vpl::img::CCoordinates3< __int32 >::tComponent"""
        return _Geometry.CCoordinates3_tSize_getSum(self)


    def getMult(self):
        """getMult(self) -> vpl::img::CCoordinates3< __int32 >::tComponent"""
        return _Geometry.CCoordinates3_tSize_getMult(self)

CCoordinates3_tSize_swigregister = _Geometry.CCoordinates3_tSize_swigregister
CCoordinates3_tSize_swigregister(CCoordinates3_tSize)

class CCoordinates3_float(_object):
    """Proxy of C++ vpl::img::CCoordinates3<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCoordinates3_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCoordinates3_float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CCoordinates3_float
        __init__(self, px, py, pz) -> CCoordinates3_float
        __init__(self, px, py) -> CCoordinates3_float
        __init__(self, p) -> CCoordinates3_float
        """
        this = _Geometry.new_CCoordinates3_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CCoordinates3_float
    __del__ = lambda self: None

    def getX(self):
        """getX(self) -> vpl::img::CCoordinates3< float >::tComponent const &"""
        return _Geometry.CCoordinates3_float_getX(self)


    def getY(self):
        """getY(self) -> vpl::img::CCoordinates3< float >::tComponent const &"""
        return _Geometry.CCoordinates3_float_getY(self)


    def getZ(self):
        """getZ(self) -> vpl::img::CCoordinates3< float >::tComponent const &"""
        return _Geometry.CCoordinates3_float_getZ(self)


    def x(self):
        """x(self) -> vpl::img::CCoordinates3< float >::tComponent const &"""
        return _Geometry.CCoordinates3_float_x(self)


    def y(self):
        """y(self) -> vpl::img::CCoordinates3< float >::tComponent const &"""
        return _Geometry.CCoordinates3_float_y(self)


    def z(self):
        """z(self) -> vpl::img::CCoordinates3< float >::tComponent const &"""
        return _Geometry.CCoordinates3_float_z(self)


    def setX(self, px):
        """setX(self, px) -> CCoordinates3_float"""
        return _Geometry.CCoordinates3_float_setX(self, px)


    def setY(self, py):
        """setY(self, py) -> CCoordinates3_float"""
        return _Geometry.CCoordinates3_float_setY(self, py)


    def setZ(self, pz):
        """setZ(self, pz) -> CCoordinates3_float"""
        return _Geometry.CCoordinates3_float_setZ(self, pz)


    def setXY(self, px, py):
        """setXY(self, px, py) -> CCoordinates3_float"""
        return _Geometry.CCoordinates3_float_setXY(self, px, py)


    def setXYZ(self, px, py, pz):
        """setXYZ(self, px, py, pz) -> CCoordinates3_float"""
        return _Geometry.CCoordinates3_float_setXYZ(self, px, py, pz)


    def __eq__(self, r):
        """__eq__(self, r) -> bool"""
        return _Geometry.CCoordinates3_float___eq__(self, r)


    def __ne__(self, r):
        """__ne__(self, r) -> bool"""
        return _Geometry.CCoordinates3_float___ne__(self, r)


    def __add__(self, r):
        """__add__(self, r) -> CCoordinates3_float"""
        return _Geometry.CCoordinates3_float___add__(self, r)


    def __sub__(self, r):
        """__sub__(self, r) -> CCoordinates3_float"""
        return _Geometry.CCoordinates3_float___sub__(self, r)


    def __mul__(self, r):
        """__mul__(self, r) -> CCoordinates3_float"""
        return _Geometry.CCoordinates3_float___mul__(self, r)


    def __div__(self, r):
        """__div__(self, r) -> CCoordinates3_float"""
        return _Geometry.CCoordinates3_float___div__(self, r)


    def __iadd__(self, *args):
        """
        __iadd__(self, p) -> CCoordinates3_float
        __iadd__(self, c) -> CCoordinates3_float
        """
        return _Geometry.CCoordinates3_float___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(self, p) -> CCoordinates3_float
        __isub__(self, c) -> CCoordinates3_float
        """
        return _Geometry.CCoordinates3_float___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(self, p) -> CCoordinates3_float
        __imul__(self, c) -> CCoordinates3_float
        """
        return _Geometry.CCoordinates3_float___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(self, p) -> CCoordinates3_float
        __idiv__(self, c) -> CCoordinates3_float
        """
        return _Geometry.CCoordinates3_float___idiv__(self, *args)


    def getSum(self):
        """getSum(self) -> vpl::img::CCoordinates3< float >::tComponent"""
        return _Geometry.CCoordinates3_float_getSum(self)


    def getMult(self):
        """getMult(self) -> vpl::img::CCoordinates3< float >::tComponent"""
        return _Geometry.CCoordinates3_float_getMult(self)

CCoordinates3_float_swigregister = _Geometry.CCoordinates3_float_swigregister
CCoordinates3_float_swigregister(CCoordinates3_float)

class CCoordinates3_double(_object):
    """Proxy of C++ vpl::img::CCoordinates3<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCoordinates3_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCoordinates3_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CCoordinates3_double
        __init__(self, px, py, pz) -> CCoordinates3_double
        __init__(self, px, py) -> CCoordinates3_double
        __init__(self, p) -> CCoordinates3_double
        """
        this = _Geometry.new_CCoordinates3_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CCoordinates3_double
    __del__ = lambda self: None

    def getX(self):
        """getX(self) -> vpl::img::CCoordinates3< double >::tComponent const &"""
        return _Geometry.CCoordinates3_double_getX(self)


    def getY(self):
        """getY(self) -> vpl::img::CCoordinates3< double >::tComponent const &"""
        return _Geometry.CCoordinates3_double_getY(self)


    def getZ(self):
        """getZ(self) -> vpl::img::CCoordinates3< double >::tComponent const &"""
        return _Geometry.CCoordinates3_double_getZ(self)


    def x(self):
        """x(self) -> vpl::img::CCoordinates3< double >::tComponent const &"""
        return _Geometry.CCoordinates3_double_x(self)


    def y(self):
        """y(self) -> vpl::img::CCoordinates3< double >::tComponent const &"""
        return _Geometry.CCoordinates3_double_y(self)


    def z(self):
        """z(self) -> vpl::img::CCoordinates3< double >::tComponent const &"""
        return _Geometry.CCoordinates3_double_z(self)


    def setX(self, px):
        """setX(self, px) -> CCoordinates3_double"""
        return _Geometry.CCoordinates3_double_setX(self, px)


    def setY(self, py):
        """setY(self, py) -> CCoordinates3_double"""
        return _Geometry.CCoordinates3_double_setY(self, py)


    def setZ(self, pz):
        """setZ(self, pz) -> CCoordinates3_double"""
        return _Geometry.CCoordinates3_double_setZ(self, pz)


    def setXY(self, px, py):
        """setXY(self, px, py) -> CCoordinates3_double"""
        return _Geometry.CCoordinates3_double_setXY(self, px, py)


    def setXYZ(self, px, py, pz):
        """setXYZ(self, px, py, pz) -> CCoordinates3_double"""
        return _Geometry.CCoordinates3_double_setXYZ(self, px, py, pz)


    def __eq__(self, r):
        """__eq__(self, r) -> bool"""
        return _Geometry.CCoordinates3_double___eq__(self, r)


    def __ne__(self, r):
        """__ne__(self, r) -> bool"""
        return _Geometry.CCoordinates3_double___ne__(self, r)


    def __add__(self, r):
        """__add__(self, r) -> CCoordinates3_double"""
        return _Geometry.CCoordinates3_double___add__(self, r)


    def __sub__(self, r):
        """__sub__(self, r) -> CCoordinates3_double"""
        return _Geometry.CCoordinates3_double___sub__(self, r)


    def __mul__(self, r):
        """__mul__(self, r) -> CCoordinates3_double"""
        return _Geometry.CCoordinates3_double___mul__(self, r)


    def __div__(self, r):
        """__div__(self, r) -> CCoordinates3_double"""
        return _Geometry.CCoordinates3_double___div__(self, r)


    def __iadd__(self, *args):
        """
        __iadd__(self, p) -> CCoordinates3_double
        __iadd__(self, c) -> CCoordinates3_double
        """
        return _Geometry.CCoordinates3_double___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(self, p) -> CCoordinates3_double
        __isub__(self, c) -> CCoordinates3_double
        """
        return _Geometry.CCoordinates3_double___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(self, p) -> CCoordinates3_double
        __imul__(self, c) -> CCoordinates3_double
        """
        return _Geometry.CCoordinates3_double___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(self, p) -> CCoordinates3_double
        __idiv__(self, c) -> CCoordinates3_double
        """
        return _Geometry.CCoordinates3_double___idiv__(self, *args)


    def getSum(self):
        """getSum(self) -> vpl::img::CCoordinates3< double >::tComponent"""
        return _Geometry.CCoordinates3_double_getSum(self)


    def getMult(self):
        """getMult(self) -> vpl::img::CCoordinates3< double >::tComponent"""
        return _Geometry.CCoordinates3_double_getMult(self)

CCoordinates3_double_swigregister = _Geometry.CCoordinates3_double_swigregister
CCoordinates3_double_swigregister(CCoordinates3_double)

class CSize2_int(CCoordinates2_tSize):
    """Proxy of C++ vpl::img::CSize2<(vpl::tSize)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates2_tSize]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSize2_int, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates2_tSize]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSize2_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CSize2_int
        __init__(self, size) -> CSize2_int
        __init__(self, px, py) -> CSize2_int
        __init__(self, p) -> CSize2_int
        """
        this = _Geometry.new_CSize2_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CSize2_int
    __del__ = lambda self: None

    def getXSize(self):
        """getXSize(self) -> vpl::img::CSize2< __int32 >::tComponent const &"""
        return _Geometry.CSize2_int_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::img::CSize2< __int32 >::tComponent const &"""
        return _Geometry.CSize2_int_getYSize(self)


    def width(self):
        """width(self) -> vpl::img::CSize2< __int32 >::tComponent const &"""
        return _Geometry.CSize2_int_width(self)


    def height(self):
        """height(self) -> vpl::img::CSize2< __int32 >::tComponent const &"""
        return _Geometry.CSize2_int_height(self)


    def __eq__(self, b):
        """__eq__(self, b) -> bool"""
        return _Geometry.CSize2_int___eq__(self, b)


    def __ne__(self, b):
        """__ne__(self, b) -> bool"""
        return _Geometry.CSize2_int___ne__(self, b)


    def __and__(self, b):
        """__and__(self, b) -> CSize2_int"""
        return _Geometry.CSize2_int___and__(self, b)


    def __iand__(self, a):
        """__iand__(self, a) -> CSize2_int"""
        return _Geometry.CSize2_int___iand__(self, a)

CSize2_int_swigregister = _Geometry.CSize2_int_swigregister
CSize2_int_swigregister(CSize2_int)

class CSize2_float(CCoordinates2_float):
    """Proxy of C++ vpl::img::CSize2<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates2_float]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSize2_float, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates2_float]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSize2_float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CSize2_float
        __init__(self, size) -> CSize2_float
        __init__(self, px, py) -> CSize2_float
        __init__(self, p) -> CSize2_float
        """
        this = _Geometry.new_CSize2_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CSize2_float
    __del__ = lambda self: None

    def getXSize(self):
        """getXSize(self) -> vpl::img::CSize2< float >::tComponent const &"""
        return _Geometry.CSize2_float_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::img::CSize2< float >::tComponent const &"""
        return _Geometry.CSize2_float_getYSize(self)


    def width(self):
        """width(self) -> vpl::img::CSize2< float >::tComponent const &"""
        return _Geometry.CSize2_float_width(self)


    def height(self):
        """height(self) -> vpl::img::CSize2< float >::tComponent const &"""
        return _Geometry.CSize2_float_height(self)


    def __eq__(self, b):
        """__eq__(self, b) -> bool"""
        return _Geometry.CSize2_float___eq__(self, b)


    def __ne__(self, b):
        """__ne__(self, b) -> bool"""
        return _Geometry.CSize2_float___ne__(self, b)


    def __and__(self, b):
        """__and__(self, b) -> CSize2_float"""
        return _Geometry.CSize2_float___and__(self, b)


    def __iand__(self, a):
        """__iand__(self, a) -> CSize2_float"""
        return _Geometry.CSize2_float___iand__(self, a)

CSize2_float_swigregister = _Geometry.CSize2_float_swigregister
CSize2_float_swigregister(CSize2_float)

class CSize2_double(CCoordinates2_double):
    """Proxy of C++ vpl::img::CSize2<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates2_double]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSize2_double, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates2_double]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSize2_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CSize2_double
        __init__(self, size) -> CSize2_double
        __init__(self, px, py) -> CSize2_double
        __init__(self, p) -> CSize2_double
        """
        this = _Geometry.new_CSize2_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CSize2_double
    __del__ = lambda self: None

    def getXSize(self):
        """getXSize(self) -> vpl::img::CSize2< double >::tComponent const &"""
        return _Geometry.CSize2_double_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::img::CSize2< double >::tComponent const &"""
        return _Geometry.CSize2_double_getYSize(self)


    def width(self):
        """width(self) -> vpl::img::CSize2< double >::tComponent const &"""
        return _Geometry.CSize2_double_width(self)


    def height(self):
        """height(self) -> vpl::img::CSize2< double >::tComponent const &"""
        return _Geometry.CSize2_double_height(self)


    def __eq__(self, b):
        """__eq__(self, b) -> bool"""
        return _Geometry.CSize2_double___eq__(self, b)


    def __ne__(self, b):
        """__ne__(self, b) -> bool"""
        return _Geometry.CSize2_double___ne__(self, b)


    def __and__(self, b):
        """__and__(self, b) -> CSize2_double"""
        return _Geometry.CSize2_double___and__(self, b)


    def __iand__(self, a):
        """__iand__(self, a) -> CSize2_double"""
        return _Geometry.CSize2_double___iand__(self, a)

CSize2_double_swigregister = _Geometry.CSize2_double_swigregister
CSize2_double_swigregister(CSize2_double)

class CSize3_int(CCoordinates3_tSize):
    """Proxy of C++ vpl::img::CSize3<(vpl::tSize)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates3_tSize]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSize3_int, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates3_tSize]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSize3_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CSize3_int
        __init__(self, size) -> CSize3_int
        __init__(self, px, py, pz) -> CSize3_int
        __init__(self, p) -> CSize3_int
        """
        this = _Geometry.new_CSize3_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CSize3_int
    __del__ = lambda self: None

    def getXSize(self):
        """getXSize(self) -> vpl::img::CSize3< __int32 >::tComponent const &"""
        return _Geometry.CSize3_int_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::img::CSize3< __int32 >::tComponent const &"""
        return _Geometry.CSize3_int_getYSize(self)


    def getZSize(self):
        """getZSize(self) -> vpl::img::CSize3< __int32 >::tComponent const &"""
        return _Geometry.CSize3_int_getZSize(self)


    def width(self):
        """width(self) -> vpl::img::CSize3< __int32 >::tComponent const &"""
        return _Geometry.CSize3_int_width(self)


    def height(self):
        """height(self) -> vpl::img::CSize3< __int32 >::tComponent const &"""
        return _Geometry.CSize3_int_height(self)


    def depth(self):
        """depth(self) -> vpl::img::CSize3< __int32 >::tComponent const &"""
        return _Geometry.CSize3_int_depth(self)


    def __eq__(self, b):
        """__eq__(self, b) -> bool"""
        return _Geometry.CSize3_int___eq__(self, b)


    def __ne__(self, b):
        """__ne__(self, b) -> bool"""
        return _Geometry.CSize3_int___ne__(self, b)


    def __and__(self, b):
        """__and__(self, b) -> CSize3_int"""
        return _Geometry.CSize3_int___and__(self, b)


    def __iand__(self, a):
        """__iand__(self, a) -> CSize3_int"""
        return _Geometry.CSize3_int___iand__(self, a)

CSize3_int_swigregister = _Geometry.CSize3_int_swigregister
CSize3_int_swigregister(CSize3_int)

class CSize3_float(CCoordinates3_float):
    """Proxy of C++ vpl::img::CSize3<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates3_float]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSize3_float, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates3_float]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSize3_float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CSize3_float
        __init__(self, size) -> CSize3_float
        __init__(self, px, py, pz) -> CSize3_float
        __init__(self, p) -> CSize3_float
        """
        this = _Geometry.new_CSize3_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CSize3_float
    __del__ = lambda self: None

    def getXSize(self):
        """getXSize(self) -> vpl::img::CSize3< float >::tComponent const &"""
        return _Geometry.CSize3_float_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::img::CSize3< float >::tComponent const &"""
        return _Geometry.CSize3_float_getYSize(self)


    def getZSize(self):
        """getZSize(self) -> vpl::img::CSize3< float >::tComponent const &"""
        return _Geometry.CSize3_float_getZSize(self)


    def width(self):
        """width(self) -> vpl::img::CSize3< float >::tComponent const &"""
        return _Geometry.CSize3_float_width(self)


    def height(self):
        """height(self) -> vpl::img::CSize3< float >::tComponent const &"""
        return _Geometry.CSize3_float_height(self)


    def depth(self):
        """depth(self) -> vpl::img::CSize3< float >::tComponent const &"""
        return _Geometry.CSize3_float_depth(self)


    def __eq__(self, b):
        """__eq__(self, b) -> bool"""
        return _Geometry.CSize3_float___eq__(self, b)


    def __ne__(self, b):
        """__ne__(self, b) -> bool"""
        return _Geometry.CSize3_float___ne__(self, b)


    def __and__(self, b):
        """__and__(self, b) -> CSize3_float"""
        return _Geometry.CSize3_float___and__(self, b)


    def __iand__(self, a):
        """__iand__(self, a) -> CSize3_float"""
        return _Geometry.CSize3_float___iand__(self, a)

CSize3_float_swigregister = _Geometry.CSize3_float_swigregister
CSize3_float_swigregister(CSize3_float)

class CSize3_double(CCoordinates3_double):
    """Proxy of C++ vpl::img::CSize3<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates3_double]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSize3_double, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates3_double]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSize3_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CSize3_double
        __init__(self, size) -> CSize3_double
        __init__(self, px, py, pz) -> CSize3_double
        __init__(self, p) -> CSize3_double
        """
        this = _Geometry.new_CSize3_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CSize3_double
    __del__ = lambda self: None

    def getXSize(self):
        """getXSize(self) -> vpl::img::CSize3< double >::tComponent const &"""
        return _Geometry.CSize3_double_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::img::CSize3< double >::tComponent const &"""
        return _Geometry.CSize3_double_getYSize(self)


    def getZSize(self):
        """getZSize(self) -> vpl::img::CSize3< double >::tComponent const &"""
        return _Geometry.CSize3_double_getZSize(self)


    def width(self):
        """width(self) -> vpl::img::CSize3< double >::tComponent const &"""
        return _Geometry.CSize3_double_width(self)


    def height(self):
        """height(self) -> vpl::img::CSize3< double >::tComponent const &"""
        return _Geometry.CSize3_double_height(self)


    def depth(self):
        """depth(self) -> vpl::img::CSize3< double >::tComponent const &"""
        return _Geometry.CSize3_double_depth(self)


    def __eq__(self, b):
        """__eq__(self, b) -> bool"""
        return _Geometry.CSize3_double___eq__(self, b)


    def __ne__(self, b):
        """__ne__(self, b) -> bool"""
        return _Geometry.CSize3_double___ne__(self, b)


    def __and__(self, b):
        """__and__(self, b) -> CSize3_double"""
        return _Geometry.CSize3_double___and__(self, b)


    def __iand__(self, a):
        """__iand__(self, a) -> CSize3_double"""
        return _Geometry.CSize3_double___iand__(self, a)

CSize3_double_swigregister = _Geometry.CSize3_double_swigregister
CSize3_double_swigregister(CSize3_double)

class CPoint2_int(CCoordinates2_tSize):
    """Proxy of C++ vpl::img::CPoint2<(vpl::tSize)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates2_tSize]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPoint2_int, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates2_tSize]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPoint2_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CPoint2_int
        __init__(self, px, py) -> CPoint2_int
        __init__(self, p) -> CPoint2_int
        """
        this = _Geometry.new_CPoint2_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CPoint2_int
    __del__ = lambda self: None

    def isSimilarTo(self, p):
        """isSimilarTo(self, p) -> bool"""
        return _Geometry.CPoint2_int_isSimilarTo(self, p)


    def getDistance(self, p):
        """getDistance(self, p) -> vpl::img::CPoint2< __int32 >::tComponent"""
        return _Geometry.CPoint2_int_getDistance(self, p)


    def getSquareDistance(self, p):
        """getSquareDistance(self, p) -> vpl::img::CPoint2< __int32 >::tComponent"""
        return _Geometry.CPoint2_int_getSquareDistance(self, p)

CPoint2_int_swigregister = _Geometry.CPoint2_int_swigregister
CPoint2_int_swigregister(CPoint2_int)

class CPoint2_float(CCoordinates2_float):
    """Proxy of C++ vpl::img::CPoint2<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates2_float]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPoint2_float, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates2_float]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPoint2_float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CPoint2_float
        __init__(self, px, py) -> CPoint2_float
        __init__(self, p) -> CPoint2_float
        """
        this = _Geometry.new_CPoint2_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CPoint2_float
    __del__ = lambda self: None

    def isSimilarTo(self, p):
        """isSimilarTo(self, p) -> bool"""
        return _Geometry.CPoint2_float_isSimilarTo(self, p)


    def getDistance(self, p):
        """getDistance(self, p) -> vpl::img::CPoint2< float >::tComponent"""
        return _Geometry.CPoint2_float_getDistance(self, p)


    def getSquareDistance(self, p):
        """getSquareDistance(self, p) -> vpl::img::CPoint2< float >::tComponent"""
        return _Geometry.CPoint2_float_getSquareDistance(self, p)

CPoint2_float_swigregister = _Geometry.CPoint2_float_swigregister
CPoint2_float_swigregister(CPoint2_float)

class CPoint2_double(CCoordinates2_double):
    """Proxy of C++ vpl::img::CPoint2<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates2_double]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPoint2_double, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates2_double]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPoint2_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CPoint2_double
        __init__(self, px, py) -> CPoint2_double
        __init__(self, p) -> CPoint2_double
        """
        this = _Geometry.new_CPoint2_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CPoint2_double
    __del__ = lambda self: None

    def isSimilarTo(self, p):
        """isSimilarTo(self, p) -> bool"""
        return _Geometry.CPoint2_double_isSimilarTo(self, p)


    def getDistance(self, p):
        """getDistance(self, p) -> vpl::img::CPoint2< double >::tComponent"""
        return _Geometry.CPoint2_double_getDistance(self, p)


    def getSquareDistance(self, p):
        """getSquareDistance(self, p) -> vpl::img::CPoint2< double >::tComponent"""
        return _Geometry.CPoint2_double_getSquareDistance(self, p)

CPoint2_double_swigregister = _Geometry.CPoint2_double_swigregister
CPoint2_double_swigregister(CPoint2_double)

class CPoint3_int(CCoordinates3_tSize):
    """Proxy of C++ vpl::img::CPoint3<(vpl::tSize)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates3_tSize]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPoint3_int, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates3_tSize]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPoint3_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CPoint3_int
        __init__(self, px, py, pz) -> CPoint3_int
        __init__(self, px, py) -> CPoint3_int
        __init__(self, p) -> CPoint3_int
        """
        this = _Geometry.new_CPoint3_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CPoint3_int
    __del__ = lambda self: None

    def isSimilarTo(self, p):
        """isSimilarTo(self, p) -> bool"""
        return _Geometry.CPoint3_int_isSimilarTo(self, p)


    def getDistance(self, p):
        """getDistance(self, p) -> vpl::img::CPoint3< __int32 >::tComponent"""
        return _Geometry.CPoint3_int_getDistance(self, p)


    def getSquareDistance(self, p):
        """getSquareDistance(self, p) -> vpl::img::CPoint3< __int32 >::tComponent"""
        return _Geometry.CPoint3_int_getSquareDistance(self, p)

CPoint3_int_swigregister = _Geometry.CPoint3_int_swigregister
CPoint3_int_swigregister(CPoint3_int)

class CPoint3_float(CCoordinates3_float):
    """Proxy of C++ vpl::img::CPoint3<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates3_float]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPoint3_float, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates3_float]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPoint3_float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CPoint3_float
        __init__(self, px, py, pz) -> CPoint3_float
        __init__(self, px, py) -> CPoint3_float
        __init__(self, p) -> CPoint3_float
        """
        this = _Geometry.new_CPoint3_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CPoint3_float
    __del__ = lambda self: None

    def isSimilarTo(self, p):
        """isSimilarTo(self, p) -> bool"""
        return _Geometry.CPoint3_float_isSimilarTo(self, p)


    def getDistance(self, p):
        """getDistance(self, p) -> vpl::img::CPoint3< float >::tComponent"""
        return _Geometry.CPoint3_float_getDistance(self, p)


    def getSquareDistance(self, p):
        """getSquareDistance(self, p) -> vpl::img::CPoint3< float >::tComponent"""
        return _Geometry.CPoint3_float_getSquareDistance(self, p)

CPoint3_float_swigregister = _Geometry.CPoint3_float_swigregister
CPoint3_float_swigregister(CPoint3_float)

class CPoint3_double(CCoordinates3_double):
    """Proxy of C++ vpl::img::CPoint3<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates3_double]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPoint3_double, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates3_double]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPoint3_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CPoint3_double
        __init__(self, px, py, pz) -> CPoint3_double
        __init__(self, px, py) -> CPoint3_double
        __init__(self, p) -> CPoint3_double
        """
        this = _Geometry.new_CPoint3_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CPoint3_double
    __del__ = lambda self: None

    def isSimilarTo(self, p):
        """isSimilarTo(self, p) -> bool"""
        return _Geometry.CPoint3_double_isSimilarTo(self, p)


    def getDistance(self, p):
        """getDistance(self, p) -> vpl::img::CPoint3< double >::tComponent"""
        return _Geometry.CPoint3_double_getDistance(self, p)


    def getSquareDistance(self, p):
        """getSquareDistance(self, p) -> vpl::img::CPoint3< double >::tComponent"""
        return _Geometry.CPoint3_double_getSquareDistance(self, p)

CPoint3_double_swigregister = _Geometry.CPoint3_double_swigregister
CPoint3_double_swigregister(CPoint3_double)

class CVector2_int(CCoordinates2_int):
    """Proxy of C++ vpl::img::CVector2<(int)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates2_int]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVector2_int, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates2_int]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVector2_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CVector2_int
        __init__(self, px, py) -> CVector2_int
        __init__(self, p0, p1) -> CVector2_int
        __init__(self, p) -> CVector2_int
        """
        this = _Geometry.new_CVector2_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CVector2_int
    __del__ = lambda self: None

    def create(self, p0, p1):
        """create(self, p0, p1)"""
        return _Geometry.CVector2_int_create(self, p0, p1)


    def isSimilarTo(self, r):
        """isSimilarTo(self, r) -> bool"""
        return _Geometry.CVector2_int_isSimilarTo(self, r)


    def dotProduct(u, v):
        """dotProduct(u, v) -> vpl::img::CVector2< int >::tComponent"""
        return _Geometry.CVector2_int_dotProduct(u, v)

    dotProduct = staticmethod(dotProduct)

    def getLength(self):
        """getLength(self) -> vpl::img::CVector2< int >::tComponent"""
        return _Geometry.CVector2_int_getLength(self)


    def normalize(self):
        """normalize(self) -> CVector2_int"""
        return _Geometry.CVector2_int_normalize(self)

CVector2_int_swigregister = _Geometry.CVector2_int_swigregister
CVector2_int_swigregister(CVector2_int)

def CVector2_int_dotProduct(u, v):
    """CVector2_int_dotProduct(u, v) -> vpl::img::CVector2< int >::tComponent"""
    return _Geometry.CVector2_int_dotProduct(u, v)

class CVector2_float(CCoordinates2_float):
    """Proxy of C++ vpl::img::CVector2<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates2_float]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVector2_float, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates2_float]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVector2_float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CVector2_float
        __init__(self, px, py) -> CVector2_float
        __init__(self, p0, p1) -> CVector2_float
        __init__(self, p) -> CVector2_float
        """
        this = _Geometry.new_CVector2_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CVector2_float
    __del__ = lambda self: None

    def create(self, p0, p1):
        """create(self, p0, p1)"""
        return _Geometry.CVector2_float_create(self, p0, p1)


    def isSimilarTo(self, r):
        """isSimilarTo(self, r) -> bool"""
        return _Geometry.CVector2_float_isSimilarTo(self, r)


    def dotProduct(u, v):
        """dotProduct(u, v) -> vpl::img::CVector2< float >::tComponent"""
        return _Geometry.CVector2_float_dotProduct(u, v)

    dotProduct = staticmethod(dotProduct)

    def getLength(self):
        """getLength(self) -> vpl::img::CVector2< float >::tComponent"""
        return _Geometry.CVector2_float_getLength(self)


    def normalize(self):
        """normalize(self) -> CVector2_float"""
        return _Geometry.CVector2_float_normalize(self)

CVector2_float_swigregister = _Geometry.CVector2_float_swigregister
CVector2_float_swigregister(CVector2_float)

def CVector2_float_dotProduct(u, v):
    """CVector2_float_dotProduct(u, v) -> vpl::img::CVector2< float >::tComponent"""
    return _Geometry.CVector2_float_dotProduct(u, v)

class CVector2_double(CCoordinates2_double):
    """Proxy of C++ vpl::img::CVector2<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates2_double]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVector2_double, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates2_double]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVector2_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CVector2_double
        __init__(self, px, py) -> CVector2_double
        __init__(self, p0, p1) -> CVector2_double
        __init__(self, p) -> CVector2_double
        """
        this = _Geometry.new_CVector2_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CVector2_double
    __del__ = lambda self: None

    def create(self, p0, p1):
        """create(self, p0, p1)"""
        return _Geometry.CVector2_double_create(self, p0, p1)


    def isSimilarTo(self, r):
        """isSimilarTo(self, r) -> bool"""
        return _Geometry.CVector2_double_isSimilarTo(self, r)


    def dotProduct(u, v):
        """dotProduct(u, v) -> vpl::img::CVector2< double >::tComponent"""
        return _Geometry.CVector2_double_dotProduct(u, v)

    dotProduct = staticmethod(dotProduct)

    def getLength(self):
        """getLength(self) -> vpl::img::CVector2< double >::tComponent"""
        return _Geometry.CVector2_double_getLength(self)


    def normalize(self):
        """normalize(self) -> CVector2_double"""
        return _Geometry.CVector2_double_normalize(self)

CVector2_double_swigregister = _Geometry.CVector2_double_swigregister
CVector2_double_swigregister(CVector2_double)

def CVector2_double_dotProduct(u, v):
    """CVector2_double_dotProduct(u, v) -> vpl::img::CVector2< double >::tComponent"""
    return _Geometry.CVector2_double_dotProduct(u, v)

class CVector3_int(CCoordinates3_int):
    """Proxy of C++ vpl::img::CVector3<(int)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates3_int]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVector3_int, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates3_int]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVector3_int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CVector3_int
        __init__(self, px, py, pz) -> CVector3_int
        __init__(self, px, py) -> CVector3_int
        __init__(self, p0, p1) -> CVector3_int
        __init__(self, p) -> CVector3_int
        """
        this = _Geometry.new_CVector3_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CVector3_int
    __del__ = lambda self: None

    def create(self, p0, p1):
        """create(self, p0, p1)"""
        return _Geometry.CVector3_int_create(self, p0, p1)


    def isSimilarTo(self, r):
        """isSimilarTo(self, r) -> bool"""
        return _Geometry.CVector3_int_isSimilarTo(self, r)


    def vectorProduct(self, u, v):
        """vectorProduct(self, u, v) -> CVector3_int"""
        return _Geometry.CVector3_int_vectorProduct(self, u, v)


    def dotProduct(u, v):
        """dotProduct(u, v) -> vpl::img::CVector3< int >::tComponent"""
        return _Geometry.CVector3_int_dotProduct(u, v)

    dotProduct = staticmethod(dotProduct)

    def getLength(self):
        """getLength(self) -> vpl::img::CVector3< int >::tComponent"""
        return _Geometry.CVector3_int_getLength(self)


    def normalize(self):
        """normalize(self) -> CVector3_int"""
        return _Geometry.CVector3_int_normalize(self)


    def makeNormal(self, p0, p1, p2):
        """makeNormal(self, p0, p1, p2) -> CVector3_int"""
        return _Geometry.CVector3_int_makeNormal(self, p0, p1, p2)

CVector3_int_swigregister = _Geometry.CVector3_int_swigregister
CVector3_int_swigregister(CVector3_int)

def CVector3_int_dotProduct(u, v):
    """CVector3_int_dotProduct(u, v) -> vpl::img::CVector3< int >::tComponent"""
    return _Geometry.CVector3_int_dotProduct(u, v)

class CVector3_float(CCoordinates3_float):
    """Proxy of C++ vpl::img::CVector3<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates3_float]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVector3_float, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates3_float]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVector3_float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CVector3_float
        __init__(self, px, py, pz) -> CVector3_float
        __init__(self, px, py) -> CVector3_float
        __init__(self, p0, p1) -> CVector3_float
        __init__(self, p) -> CVector3_float
        """
        this = _Geometry.new_CVector3_float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CVector3_float
    __del__ = lambda self: None

    def create(self, p0, p1):
        """create(self, p0, p1)"""
        return _Geometry.CVector3_float_create(self, p0, p1)


    def isSimilarTo(self, r):
        """isSimilarTo(self, r) -> bool"""
        return _Geometry.CVector3_float_isSimilarTo(self, r)


    def vectorProduct(self, u, v):
        """vectorProduct(self, u, v) -> CVector3_float"""
        return _Geometry.CVector3_float_vectorProduct(self, u, v)


    def dotProduct(u, v):
        """dotProduct(u, v) -> vpl::img::CVector3< float >::tComponent"""
        return _Geometry.CVector3_float_dotProduct(u, v)

    dotProduct = staticmethod(dotProduct)

    def getLength(self):
        """getLength(self) -> vpl::img::CVector3< float >::tComponent"""
        return _Geometry.CVector3_float_getLength(self)


    def normalize(self):
        """normalize(self) -> CVector3_float"""
        return _Geometry.CVector3_float_normalize(self)


    def makeNormal(self, p0, p1, p2):
        """makeNormal(self, p0, p1, p2) -> CVector3_float"""
        return _Geometry.CVector3_float_makeNormal(self, p0, p1, p2)

CVector3_float_swigregister = _Geometry.CVector3_float_swigregister
CVector3_float_swigregister(CVector3_float)

def CVector3_float_dotProduct(u, v):
    """CVector3_float_dotProduct(u, v) -> vpl::img::CVector3< float >::tComponent"""
    return _Geometry.CVector3_float_dotProduct(u, v)

class CVector3_double(CCoordinates3_double):
    """Proxy of C++ vpl::img::CVector3<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [CCoordinates3_double]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVector3_double, name, value)
    __swig_getmethods__ = {}
    for _s in [CCoordinates3_double]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVector3_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CVector3_double
        __init__(self, px, py, pz) -> CVector3_double
        __init__(self, px, py) -> CVector3_double
        __init__(self, p0, p1) -> CVector3_double
        __init__(self, p) -> CVector3_double
        """
        this = _Geometry.new_CVector3_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geometry.delete_CVector3_double
    __del__ = lambda self: None

    def create(self, p0, p1):
        """create(self, p0, p1)"""
        return _Geometry.CVector3_double_create(self, p0, p1)


    def isSimilarTo(self, r):
        """isSimilarTo(self, r) -> bool"""
        return _Geometry.CVector3_double_isSimilarTo(self, r)


    def vectorProduct(self, u, v):
        """vectorProduct(self, u, v) -> CVector3_double"""
        return _Geometry.CVector3_double_vectorProduct(self, u, v)


    def dotProduct(u, v):
        """dotProduct(u, v) -> vpl::img::CVector3< double >::tComponent"""
        return _Geometry.CVector3_double_dotProduct(u, v)

    dotProduct = staticmethod(dotProduct)

    def getLength(self):
        """getLength(self) -> vpl::img::CVector3< double >::tComponent"""
        return _Geometry.CVector3_double_getLength(self)


    def normalize(self):
        """normalize(self) -> CVector3_double"""
        return _Geometry.CVector3_double_normalize(self)


    def makeNormal(self, p0, p1, p2):
        """makeNormal(self, p0, p1, p2) -> CVector3_double"""
        return _Geometry.CVector3_double_makeNormal(self, p0, p1, p2)

CVector3_double_swigregister = _Geometry.CVector3_double_swigregister
CVector3_double_swigregister(CVector3_double)

def CVector3_double_dotProduct(u, v):
    """CVector3_double_dotProduct(u, v) -> vpl::img::CVector3< double >::tComponent"""
    return _Geometry.CVector3_double_dotProduct(u, v)

# This file is compatible with both classic and new-style classes.


