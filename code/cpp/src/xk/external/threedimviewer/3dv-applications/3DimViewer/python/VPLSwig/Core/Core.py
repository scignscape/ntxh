# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Core')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Core')
    _Core = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Core', [dirname(__file__)])
        except ImportError:
            import _Core
            return _Core
        if fp is not None:
            try:
                _mod = imp.load_module('_Core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Core = swig_import_helper()
    del swig_import_helper
else:
    import _Core
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class CObject(_object):
    """Proxy of C++ vpl::base::CObject class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CLASS_OBJECT = _Core.CObject_CLASS_OBJECT
    HEAP_OBJECT = _Core.CObject_HEAP_OBJECT
    __swig_destroy__ = _Core.delete_CObject
    __del__ = lambda self: None

    def getReferencesCount(self):
        """getReferencesCount(self) -> int"""
        return _Core.CObject_getReferencesCount(self)


    def isOnHeap(self):
        """isOnHeap(self) -> bool"""
        return _Core.CObject_isOnHeap(self)

CObject_swigregister = _Core.CObject_swigregister
CObject_swigregister(CObject)

class CRange(_object):
    """Proxy of C++ vpl::CRange class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CRange
        __init__(self, First, Last) -> CRange
        """
        this = _Core.new_CRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _Core.CRange_getSize(self)


    def isEmpty(self):
        """isEmpty(self) -> bool"""
        return _Core.CRange_isEmpty(self)


    def getFirst(self):
        """getFirst(self) -> vpl::tSize"""
        return _Core.CRange_getFirst(self)


    def getLast(self):
        """getLast(self) -> vpl::tSize"""
        return _Core.CRange_getLast(self)


    def getBegin(self):
        """getBegin(self) -> vpl::tSize"""
        return _Core.CRange_getBegin(self)


    def getEnd(self):
        """getEnd(self) -> vpl::tSize"""
        return _Core.CRange_getEnd(self)


    def all():
        """all() -> CRange"""
        return _Core.CRange_all()

    all = staticmethod(all)

    def __eq__(self, b):
        """__eq__(self, b) -> bool"""
        return _Core.CRange___eq__(self, b)


    def __ne__(self, b):
        """__ne__(self, b) -> bool"""
        return _Core.CRange___ne__(self, b)


    def __and__(self, b):
        """__and__(self, b) -> CRange"""
        return _Core.CRange___and__(self, b)


    def __iand__(self, r):
        """__iand__(self, r) -> CRange"""
        return _Core.CRange___iand__(self, r)


    def __add__(self, d):
        """__add__(self, d) -> CRange"""
        return _Core.CRange___add__(self, d)


    def __iadd__(self, d):
        """__iadd__(self, d) -> CRange"""
        return _Core.CRange___iadd__(self, d)


    def __sub__(self, d):
        """__sub__(self, d) -> CRange"""
        return _Core.CRange___sub__(self, d)


    def __isub__(self, d):
        """__isub__(self, d) -> CRange"""
        return _Core.CRange___isub__(self, d)

    __swig_setmethods__["m_Begin"] = _Core.CRange_m_Begin_set
    __swig_getmethods__["m_Begin"] = _Core.CRange_m_Begin_get
    if _newclass:
        m_Begin = _swig_property(_Core.CRange_m_Begin_get, _Core.CRange_m_Begin_set)
    __swig_setmethods__["m_End"] = _Core.CRange_m_End_set
    __swig_getmethods__["m_End"] = _Core.CRange_m_End_get
    if _newclass:
        m_End = _swig_property(_Core.CRange_m_End_get, _Core.CRange_m_End_set)
    __swig_destroy__ = _Core.delete_CRange
    __del__ = lambda self: None
CRange_swigregister = _Core.CRange_swigregister
CRange_swigregister(CRange)

def CRange_all():
    """CRange_all() -> CRange"""
    return _Core.CRange_all()

class swig_base_TPixel8(_object):
    """Proxy of C++ vpl::CTypeTraits<(vpl::img::tPixel8)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_TPixel8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_TPixel8, name)
    __repr__ = _swig_repr
    isPointer = _Core.swig_base_TPixel8_isPointer
    isReference = _Core.swig_base_TPixel8_isReference
    isMemberPointer = _Core.swig_base_TPixel8_isMemberPointer
    isUnsignedInt = _Core.swig_base_TPixel8_isUnsignedInt
    isSignedInt = _Core.swig_base_TPixel8_isSignedInt
    isFloat = _Core.swig_base_TPixel8_isFloat
    isConst = _Core.swig_base_TPixel8_isConst
    isIntegral = _Core.swig_base_TPixel8_isIntegral
    isFundamental = _Core.swig_base_TPixel8_isFundamental

    def getMin():
        """getMin() -> vpl::img::tPixel8"""
        return _Core.swig_base_TPixel8_getMin()

    getMin = staticmethod(getMin)

    def getMax():
        """getMax() -> vpl::img::tPixel8"""
        return _Core.swig_base_TPixel8_getMax()

    getMax = staticmethod(getMax)

    def getZero():
        """getZero() -> vpl::img::tPixel8"""
        return _Core.swig_base_TPixel8_getZero()

    getZero = staticmethod(getZero)

    def getSize():
        """getSize() -> vpl::tSize"""
        return _Core.swig_base_TPixel8_getSize()

    getSize = staticmethod(getSize)

    def __init__(self):
        """__init__(self) -> swig_base_TPixel8"""
        this = _Core.new_swig_base_TPixel8()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_swig_base_TPixel8
    __del__ = lambda self: None
swig_base_TPixel8_swigregister = _Core.swig_base_TPixel8_swigregister
swig_base_TPixel8_swigregister(swig_base_TPixel8)

def swig_base_TPixel8_getMin():
    """swig_base_TPixel8_getMin() -> vpl::img::tPixel8"""
    return _Core.swig_base_TPixel8_getMin()

def swig_base_TPixel8_getMax():
    """swig_base_TPixel8_getMax() -> vpl::img::tPixel8"""
    return _Core.swig_base_TPixel8_getMax()

def swig_base_TPixel8_getZero():
    """swig_base_TPixel8_getZero() -> vpl::img::tPixel8"""
    return _Core.swig_base_TPixel8_getZero()

def swig_base_TPixel8_getSize():
    """swig_base_TPixel8_getSize() -> vpl::tSize"""
    return _Core.swig_base_TPixel8_getSize()

class swig_base_TPixel16(_object):
    """Proxy of C++ vpl::CTypeTraits<(vpl::img::tPixel16)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_TPixel16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_TPixel16, name)
    __repr__ = _swig_repr
    isPointer = _Core.swig_base_TPixel16_isPointer
    isReference = _Core.swig_base_TPixel16_isReference
    isMemberPointer = _Core.swig_base_TPixel16_isMemberPointer
    isUnsignedInt = _Core.swig_base_TPixel16_isUnsignedInt
    isSignedInt = _Core.swig_base_TPixel16_isSignedInt
    isFloat = _Core.swig_base_TPixel16_isFloat
    isConst = _Core.swig_base_TPixel16_isConst
    isIntegral = _Core.swig_base_TPixel16_isIntegral
    isFundamental = _Core.swig_base_TPixel16_isFundamental

    def getMin():
        """getMin() -> vpl::img::tPixel16"""
        return _Core.swig_base_TPixel16_getMin()

    getMin = staticmethod(getMin)

    def getMax():
        """getMax() -> vpl::img::tPixel16"""
        return _Core.swig_base_TPixel16_getMax()

    getMax = staticmethod(getMax)

    def getZero():
        """getZero() -> vpl::img::tPixel16"""
        return _Core.swig_base_TPixel16_getZero()

    getZero = staticmethod(getZero)

    def getSize():
        """getSize() -> vpl::tSize"""
        return _Core.swig_base_TPixel16_getSize()

    getSize = staticmethod(getSize)

    def __init__(self):
        """__init__(self) -> swig_base_TPixel16"""
        this = _Core.new_swig_base_TPixel16()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_swig_base_TPixel16
    __del__ = lambda self: None
swig_base_TPixel16_swigregister = _Core.swig_base_TPixel16_swigregister
swig_base_TPixel16_swigregister(swig_base_TPixel16)

def swig_base_TPixel16_getMin():
    """swig_base_TPixel16_getMin() -> vpl::img::tPixel16"""
    return _Core.swig_base_TPixel16_getMin()

def swig_base_TPixel16_getMax():
    """swig_base_TPixel16_getMax() -> vpl::img::tPixel16"""
    return _Core.swig_base_TPixel16_getMax()

def swig_base_TPixel16_getZero():
    """swig_base_TPixel16_getZero() -> vpl::img::tPixel16"""
    return _Core.swig_base_TPixel16_getZero()

def swig_base_TPixel16_getSize():
    """swig_base_TPixel16_getSize() -> vpl::tSize"""
    return _Core.swig_base_TPixel16_getSize()

class swig_base_TPixel32(_object):
    """Proxy of C++ vpl::CTypeTraits<(vpl::img::tPixel32)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_TPixel32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_TPixel32, name)
    __repr__ = _swig_repr
    isPointer = _Core.swig_base_TPixel32_isPointer
    isReference = _Core.swig_base_TPixel32_isReference
    isMemberPointer = _Core.swig_base_TPixel32_isMemberPointer
    isUnsignedInt = _Core.swig_base_TPixel32_isUnsignedInt
    isSignedInt = _Core.swig_base_TPixel32_isSignedInt
    isFloat = _Core.swig_base_TPixel32_isFloat
    isConst = _Core.swig_base_TPixel32_isConst
    isIntegral = _Core.swig_base_TPixel32_isIntegral
    isFundamental = _Core.swig_base_TPixel32_isFundamental

    def getMin():
        """getMin() -> vpl::img::tPixel32"""
        return _Core.swig_base_TPixel32_getMin()

    getMin = staticmethod(getMin)

    def getMax():
        """getMax() -> vpl::img::tPixel32"""
        return _Core.swig_base_TPixel32_getMax()

    getMax = staticmethod(getMax)

    def getZero():
        """getZero() -> vpl::img::tPixel32"""
        return _Core.swig_base_TPixel32_getZero()

    getZero = staticmethod(getZero)

    def getSize():
        """getSize() -> vpl::tSize"""
        return _Core.swig_base_TPixel32_getSize()

    getSize = staticmethod(getSize)

    def __init__(self):
        """__init__(self) -> swig_base_TPixel32"""
        this = _Core.new_swig_base_TPixel32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_swig_base_TPixel32
    __del__ = lambda self: None
swig_base_TPixel32_swigregister = _Core.swig_base_TPixel32_swigregister
swig_base_TPixel32_swigregister(swig_base_TPixel32)

def swig_base_TPixel32_getMin():
    """swig_base_TPixel32_getMin() -> vpl::img::tPixel32"""
    return _Core.swig_base_TPixel32_getMin()

def swig_base_TPixel32_getMax():
    """swig_base_TPixel32_getMax() -> vpl::img::tPixel32"""
    return _Core.swig_base_TPixel32_getMax()

def swig_base_TPixel32_getZero():
    """swig_base_TPixel32_getZero() -> vpl::img::tPixel32"""
    return _Core.swig_base_TPixel32_getZero()

def swig_base_TPixel32_getSize():
    """swig_base_TPixel32_getSize() -> vpl::tSize"""
    return _Core.swig_base_TPixel32_getSize()

class swig_base_TFloatPixel(_object):
    """Proxy of C++ vpl::CTypeTraits<(vpl::img::tFloatPixel)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_TFloatPixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_TFloatPixel, name)
    __repr__ = _swig_repr
    isPointer = _Core.swig_base_TFloatPixel_isPointer
    isReference = _Core.swig_base_TFloatPixel_isReference
    isMemberPointer = _Core.swig_base_TFloatPixel_isMemberPointer
    isUnsignedInt = _Core.swig_base_TFloatPixel_isUnsignedInt
    isSignedInt = _Core.swig_base_TFloatPixel_isSignedInt
    isFloat = _Core.swig_base_TFloatPixel_isFloat
    isConst = _Core.swig_base_TFloatPixel_isConst
    isIntegral = _Core.swig_base_TFloatPixel_isIntegral
    isFundamental = _Core.swig_base_TFloatPixel_isFundamental

    def getMin():
        """getMin() -> vpl::img::tFloatPixel"""
        return _Core.swig_base_TFloatPixel_getMin()

    getMin = staticmethod(getMin)

    def getMax():
        """getMax() -> vpl::img::tFloatPixel"""
        return _Core.swig_base_TFloatPixel_getMax()

    getMax = staticmethod(getMax)

    def getZero():
        """getZero() -> vpl::img::tFloatPixel"""
        return _Core.swig_base_TFloatPixel_getZero()

    getZero = staticmethod(getZero)

    def getSize():
        """getSize() -> vpl::tSize"""
        return _Core.swig_base_TFloatPixel_getSize()

    getSize = staticmethod(getSize)

    def __init__(self):
        """__init__(self) -> swig_base_TFloatPixel"""
        this = _Core.new_swig_base_TFloatPixel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_swig_base_TFloatPixel
    __del__ = lambda self: None
swig_base_TFloatPixel_swigregister = _Core.swig_base_TFloatPixel_swigregister
swig_base_TFloatPixel_swigregister(swig_base_TFloatPixel)

def swig_base_TFloatPixel_getMin():
    """swig_base_TFloatPixel_getMin() -> vpl::img::tFloatPixel"""
    return _Core.swig_base_TFloatPixel_getMin()

def swig_base_TFloatPixel_getMax():
    """swig_base_TFloatPixel_getMax() -> vpl::img::tFloatPixel"""
    return _Core.swig_base_TFloatPixel_getMax()

def swig_base_TFloatPixel_getZero():
    """swig_base_TFloatPixel_getZero() -> vpl::img::tFloatPixel"""
    return _Core.swig_base_TFloatPixel_getZero()

def swig_base_TFloatPixel_getSize():
    """swig_base_TFloatPixel_getSize() -> vpl::tSize"""
    return _Core.swig_base_TFloatPixel_getSize()

class swig_base_TDensityPixel(_object):
    """Proxy of C++ vpl::CTypeTraits<(vpl::img::tDensityPixel)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_TDensityPixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_TDensityPixel, name)
    __repr__ = _swig_repr
    isPointer = _Core.swig_base_TDensityPixel_isPointer
    isReference = _Core.swig_base_TDensityPixel_isReference
    isMemberPointer = _Core.swig_base_TDensityPixel_isMemberPointer
    isUnsignedInt = _Core.swig_base_TDensityPixel_isUnsignedInt
    isSignedInt = _Core.swig_base_TDensityPixel_isSignedInt
    isFloat = _Core.swig_base_TDensityPixel_isFloat
    isConst = _Core.swig_base_TDensityPixel_isConst
    isIntegral = _Core.swig_base_TDensityPixel_isIntegral
    isFundamental = _Core.swig_base_TDensityPixel_isFundamental

    def getMin():
        """getMin() -> vpl::img::tDensityPixel"""
        return _Core.swig_base_TDensityPixel_getMin()

    getMin = staticmethod(getMin)

    def getMax():
        """getMax() -> vpl::img::tDensityPixel"""
        return _Core.swig_base_TDensityPixel_getMax()

    getMax = staticmethod(getMax)

    def getZero():
        """getZero() -> vpl::img::tDensityPixel"""
        return _Core.swig_base_TDensityPixel_getZero()

    getZero = staticmethod(getZero)

    def getSize():
        """getSize() -> vpl::tSize"""
        return _Core.swig_base_TDensityPixel_getSize()

    getSize = staticmethod(getSize)

    def __init__(self):
        """__init__(self) -> swig_base_TDensityPixel"""
        this = _Core.new_swig_base_TDensityPixel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_swig_base_TDensityPixel
    __del__ = lambda self: None
swig_base_TDensityPixel_swigregister = _Core.swig_base_TDensityPixel_swigregister
swig_base_TDensityPixel_swigregister(swig_base_TDensityPixel)

def swig_base_TDensityPixel_getMin():
    """swig_base_TDensityPixel_getMin() -> vpl::img::tDensityPixel"""
    return _Core.swig_base_TDensityPixel_getMin()

def swig_base_TDensityPixel_getMax():
    """swig_base_TDensityPixel_getMax() -> vpl::img::tDensityPixel"""
    return _Core.swig_base_TDensityPixel_getMax()

def swig_base_TDensityPixel_getZero():
    """swig_base_TDensityPixel_getZero() -> vpl::img::tDensityPixel"""
    return _Core.swig_base_TDensityPixel_getZero()

def swig_base_TDensityPixel_getSize():
    """swig_base_TDensityPixel_getSize() -> vpl::tSize"""
    return _Core.swig_base_TDensityPixel_getSize()

class swig_base_TRGBPixel(_object):
    """Proxy of C++ vpl::CTypeTraits<(vpl::img::tRGBPixel)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_TRGBPixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_TRGBPixel, name)
    __repr__ = _swig_repr
    isPointer = _Core.swig_base_TRGBPixel_isPointer
    isReference = _Core.swig_base_TRGBPixel_isReference
    isMemberPointer = _Core.swig_base_TRGBPixel_isMemberPointer
    isUnsignedInt = _Core.swig_base_TRGBPixel_isUnsignedInt
    isSignedInt = _Core.swig_base_TRGBPixel_isSignedInt
    isFloat = _Core.swig_base_TRGBPixel_isFloat
    isConst = _Core.swig_base_TRGBPixel_isConst
    isIntegral = _Core.swig_base_TRGBPixel_isIntegral
    isFundamental = _Core.swig_base_TRGBPixel_isFundamental

    def getMin():
        """getMin() -> CRGBPixel"""
        return _Core.swig_base_TRGBPixel_getMin()

    getMin = staticmethod(getMin)

    def getMax():
        """getMax() -> CRGBPixel"""
        return _Core.swig_base_TRGBPixel_getMax()

    getMax = staticmethod(getMax)

    def getZero():
        """getZero() -> CRGBPixel"""
        return _Core.swig_base_TRGBPixel_getZero()

    getZero = staticmethod(getZero)

    def getSize():
        """getSize() -> vpl::tSize"""
        return _Core.swig_base_TRGBPixel_getSize()

    getSize = staticmethod(getSize)

    def __init__(self):
        """__init__(self) -> swig_base_TRGBPixel"""
        this = _Core.new_swig_base_TRGBPixel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_swig_base_TRGBPixel
    __del__ = lambda self: None
swig_base_TRGBPixel_swigregister = _Core.swig_base_TRGBPixel_swigregister
swig_base_TRGBPixel_swigregister(swig_base_TRGBPixel)

def swig_base_TRGBPixel_getMin():
    """swig_base_TRGBPixel_getMin() -> CRGBPixel"""
    return _Core.swig_base_TRGBPixel_getMin()

def swig_base_TRGBPixel_getMax():
    """swig_base_TRGBPixel_getMax() -> CRGBPixel"""
    return _Core.swig_base_TRGBPixel_getMax()

def swig_base_TRGBPixel_getZero():
    """swig_base_TRGBPixel_getZero() -> CRGBPixel"""
    return _Core.swig_base_TRGBPixel_getZero()

def swig_base_TRGBPixel_getSize():
    """swig_base_TRGBPixel_getSize() -> vpl::tSize"""
    return _Core.swig_base_TRGBPixel_getSize()

class CTPixel8(swig_base_TPixel8):
    """Proxy of C++ vpl::img::CPixelTraits<(vpl::img::tPixel8)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_TPixel8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTPixel8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_TPixel8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTPixel8, name)
    __repr__ = _swig_repr
    isFilterable = _Core.CTPixel8_isFilterable

    def getPixelMin():
        """getPixelMin() -> vpl::img::tPixel8"""
        return _Core.CTPixel8_getPixelMin()

    getPixelMin = staticmethod(getPixelMin)

    def getPixelMax():
        """getPixelMax() -> vpl::img::tPixel8"""
        return _Core.CTPixel8_getPixelMax()

    getPixelMax = staticmethod(getPixelMax)

    def getGray():
        """getGray() -> vpl::img::tPixel8"""
        return _Core.CTPixel8_getGray()

    getGray = staticmethod(getGray)

    def getPixelName():
        """getPixelName() -> char const *"""
        return _Core.CTPixel8_getPixelName()

    getPixelName = staticmethod(getPixelName)

    def __init__(self):
        """__init__(self) -> CTPixel8"""
        this = _Core.new_CTPixel8()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_CTPixel8
    __del__ = lambda self: None
CTPixel8_swigregister = _Core.CTPixel8_swigregister
CTPixel8_swigregister(CTPixel8)

def CTPixel8_getPixelMin():
    """CTPixel8_getPixelMin() -> vpl::img::tPixel8"""
    return _Core.CTPixel8_getPixelMin()

def CTPixel8_getPixelMax():
    """CTPixel8_getPixelMax() -> vpl::img::tPixel8"""
    return _Core.CTPixel8_getPixelMax()

def CTPixel8_getGray():
    """CTPixel8_getGray() -> vpl::img::tPixel8"""
    return _Core.CTPixel8_getGray()

def CTPixel8_getPixelName():
    """CTPixel8_getPixelName() -> char const *"""
    return _Core.CTPixel8_getPixelName()

class CTPixel16(swig_base_TPixel16):
    """Proxy of C++ vpl::img::CPixelTraits<(vpl::img::tPixel16)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_TPixel16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTPixel16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_TPixel16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTPixel16, name)
    __repr__ = _swig_repr
    isFilterable = _Core.CTPixel16_isFilterable

    def getPixelMin():
        """getPixelMin() -> vpl::img::tPixel16"""
        return _Core.CTPixel16_getPixelMin()

    getPixelMin = staticmethod(getPixelMin)

    def getPixelMax():
        """getPixelMax() -> vpl::img::tPixel16"""
        return _Core.CTPixel16_getPixelMax()

    getPixelMax = staticmethod(getPixelMax)

    def getGray():
        """getGray() -> vpl::img::tPixel16"""
        return _Core.CTPixel16_getGray()

    getGray = staticmethod(getGray)

    def getPixelName():
        """getPixelName() -> char const *"""
        return _Core.CTPixel16_getPixelName()

    getPixelName = staticmethod(getPixelName)

    def __init__(self):
        """__init__(self) -> CTPixel16"""
        this = _Core.new_CTPixel16()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_CTPixel16
    __del__ = lambda self: None
CTPixel16_swigregister = _Core.CTPixel16_swigregister
CTPixel16_swigregister(CTPixel16)

def CTPixel16_getPixelMin():
    """CTPixel16_getPixelMin() -> vpl::img::tPixel16"""
    return _Core.CTPixel16_getPixelMin()

def CTPixel16_getPixelMax():
    """CTPixel16_getPixelMax() -> vpl::img::tPixel16"""
    return _Core.CTPixel16_getPixelMax()

def CTPixel16_getGray():
    """CTPixel16_getGray() -> vpl::img::tPixel16"""
    return _Core.CTPixel16_getGray()

def CTPixel16_getPixelName():
    """CTPixel16_getPixelName() -> char const *"""
    return _Core.CTPixel16_getPixelName()

class CTPixel32(swig_base_TPixel32):
    """Proxy of C++ vpl::img::CPixelTraits<(vpl::img::tPixel32)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_TPixel32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTPixel32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_TPixel32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTPixel32, name)
    __repr__ = _swig_repr
    isFilterable = _Core.CTPixel32_isFilterable

    def getPixelMin():
        """getPixelMin() -> vpl::img::tPixel32"""
        return _Core.CTPixel32_getPixelMin()

    getPixelMin = staticmethod(getPixelMin)

    def getPixelMax():
        """getPixelMax() -> vpl::img::tPixel32"""
        return _Core.CTPixel32_getPixelMax()

    getPixelMax = staticmethod(getPixelMax)

    def getGray():
        """getGray() -> vpl::img::tPixel32"""
        return _Core.CTPixel32_getGray()

    getGray = staticmethod(getGray)

    def getPixelName():
        """getPixelName() -> char const *"""
        return _Core.CTPixel32_getPixelName()

    getPixelName = staticmethod(getPixelName)

    def __init__(self):
        """__init__(self) -> CTPixel32"""
        this = _Core.new_CTPixel32()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_CTPixel32
    __del__ = lambda self: None
CTPixel32_swigregister = _Core.CTPixel32_swigregister
CTPixel32_swigregister(CTPixel32)

def CTPixel32_getPixelMin():
    """CTPixel32_getPixelMin() -> vpl::img::tPixel32"""
    return _Core.CTPixel32_getPixelMin()

def CTPixel32_getPixelMax():
    """CTPixel32_getPixelMax() -> vpl::img::tPixel32"""
    return _Core.CTPixel32_getPixelMax()

def CTPixel32_getGray():
    """CTPixel32_getGray() -> vpl::img::tPixel32"""
    return _Core.CTPixel32_getGray()

def CTPixel32_getPixelName():
    """CTPixel32_getPixelName() -> char const *"""
    return _Core.CTPixel32_getPixelName()

class CTFloatPixel(swig_base_TFloatPixel):
    """Proxy of C++ vpl::img::CPixelTraits<(vpl::img::tFloatPixel)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_TFloatPixel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTFloatPixel, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_TFloatPixel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTFloatPixel, name)
    __repr__ = _swig_repr
    isFilterable = _Core.CTFloatPixel_isFilterable

    def getPixelMin():
        """getPixelMin() -> vpl::img::tFloatPixel"""
        return _Core.CTFloatPixel_getPixelMin()

    getPixelMin = staticmethod(getPixelMin)

    def getPixelMax():
        """getPixelMax() -> vpl::img::tFloatPixel"""
        return _Core.CTFloatPixel_getPixelMax()

    getPixelMax = staticmethod(getPixelMax)

    def getGray():
        """getGray() -> vpl::img::tFloatPixel"""
        return _Core.CTFloatPixel_getGray()

    getGray = staticmethod(getGray)

    def getPixelName():
        """getPixelName() -> char const *"""
        return _Core.CTFloatPixel_getPixelName()

    getPixelName = staticmethod(getPixelName)

    def __init__(self):
        """__init__(self) -> CTFloatPixel"""
        this = _Core.new_CTFloatPixel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_CTFloatPixel
    __del__ = lambda self: None
CTFloatPixel_swigregister = _Core.CTFloatPixel_swigregister
CTFloatPixel_swigregister(CTFloatPixel)

def CTFloatPixel_getPixelMin():
    """CTFloatPixel_getPixelMin() -> vpl::img::tFloatPixel"""
    return _Core.CTFloatPixel_getPixelMin()

def CTFloatPixel_getPixelMax():
    """CTFloatPixel_getPixelMax() -> vpl::img::tFloatPixel"""
    return _Core.CTFloatPixel_getPixelMax()

def CTFloatPixel_getGray():
    """CTFloatPixel_getGray() -> vpl::img::tFloatPixel"""
    return _Core.CTFloatPixel_getGray()

def CTFloatPixel_getPixelName():
    """CTFloatPixel_getPixelName() -> char const *"""
    return _Core.CTFloatPixel_getPixelName()

class CTDensityPixel(swig_base_TDensityPixel):
    """Proxy of C++ vpl::img::CPixelTraits<(vpl::img::tDensityPixel)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_TDensityPixel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTDensityPixel, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_TDensityPixel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTDensityPixel, name)
    __repr__ = _swig_repr
    isFilterable = _Core.CTDensityPixel_isFilterable

    def getPixelMin():
        """getPixelMin() -> vpl::img::tDensityPixel"""
        return _Core.CTDensityPixel_getPixelMin()

    getPixelMin = staticmethod(getPixelMin)

    def getPixelMax():
        """getPixelMax() -> vpl::img::tDensityPixel"""
        return _Core.CTDensityPixel_getPixelMax()

    getPixelMax = staticmethod(getPixelMax)

    def getGray():
        """getGray() -> vpl::img::tDensityPixel"""
        return _Core.CTDensityPixel_getGray()

    getGray = staticmethod(getGray)

    def getPixelName():
        """getPixelName() -> char const *"""
        return _Core.CTDensityPixel_getPixelName()

    getPixelName = staticmethod(getPixelName)

    def __init__(self):
        """__init__(self) -> CTDensityPixel"""
        this = _Core.new_CTDensityPixel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_CTDensityPixel
    __del__ = lambda self: None
CTDensityPixel_swigregister = _Core.CTDensityPixel_swigregister
CTDensityPixel_swigregister(CTDensityPixel)

def CTDensityPixel_getPixelMin():
    """CTDensityPixel_getPixelMin() -> vpl::img::tDensityPixel"""
    return _Core.CTDensityPixel_getPixelMin()

def CTDensityPixel_getPixelMax():
    """CTDensityPixel_getPixelMax() -> vpl::img::tDensityPixel"""
    return _Core.CTDensityPixel_getPixelMax()

def CTDensityPixel_getGray():
    """CTDensityPixel_getGray() -> vpl::img::tDensityPixel"""
    return _Core.CTDensityPixel_getGray()

def CTDensityPixel_getPixelName():
    """CTDensityPixel_getPixelName() -> char const *"""
    return _Core.CTDensityPixel_getPixelName()

class CTRGBAPixel(swig_base_TRGBPixel):
    """Proxy of C++ vpl::img::CPixelTraits<(vpl::img::tRGBPixel)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_TRGBPixel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTRGBAPixel, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_TRGBPixel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTRGBAPixel, name)
    __repr__ = _swig_repr
    isFilterable = _Core.CTRGBAPixel_isFilterable

    def getPixelMin():
        """getPixelMin() -> CRGBPixel"""
        return _Core.CTRGBAPixel_getPixelMin()

    getPixelMin = staticmethod(getPixelMin)

    def getPixelMax():
        """getPixelMax() -> CRGBPixel"""
        return _Core.CTRGBAPixel_getPixelMax()

    getPixelMax = staticmethod(getPixelMax)

    def getGray():
        """getGray() -> CRGBPixel"""
        return _Core.CTRGBAPixel_getGray()

    getGray = staticmethod(getGray)

    def getPixelName():
        """getPixelName() -> char const *"""
        return _Core.CTRGBAPixel_getPixelName()

    getPixelName = staticmethod(getPixelName)

    def __init__(self):
        """__init__(self) -> CTRGBAPixel"""
        this = _Core.new_CTRGBAPixel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_CTRGBAPixel
    __del__ = lambda self: None
CTRGBAPixel_swigregister = _Core.CTRGBAPixel_swigregister
CTRGBAPixel_swigregister(CTRGBAPixel)

def CTRGBAPixel_getPixelMin():
    """CTRGBAPixel_getPixelMin() -> CRGBPixel"""
    return _Core.CTRGBAPixel_getPixelMin()

def CTRGBAPixel_getPixelMax():
    """CTRGBAPixel_getPixelMax() -> CRGBPixel"""
    return _Core.CTRGBAPixel_getPixelMax()

def CTRGBAPixel_getGray():
    """CTRGBAPixel_getGray() -> CRGBPixel"""
    return _Core.CTRGBAPixel_getGray()

def CTRGBAPixel_getPixelName():
    """CTRGBAPixel_getPixelName() -> char const *"""
    return _Core.CTRGBAPixel_getPixelName()

class CRGBA(_object):
    """Proxy of C++ vpl::img::CRGBA class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRGBA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRGBA, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CRGBA
        __init__(self, Red, Green, Blue, Alpha=255) -> CRGBA
        __init__(self, Red, Green, Blue) -> CRGBA
        __init__(self, Value) -> CRGBA
        __init__(self, v) -> CRGBA
        """
        this = _Core.new_CRGBA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getRed(self):
        """getRed(self) -> vpl::img::CRGBA::tComponent const &"""
        return _Core.CRGBA_getRed(self)


    def getGreen(self):
        """getGreen(self) -> vpl::img::CRGBA::tComponent const &"""
        return _Core.CRGBA_getGreen(self)


    def getBlue(self):
        """getBlue(self) -> vpl::img::CRGBA::tComponent const &"""
        return _Core.CRGBA_getBlue(self)


    def getAlpha(self):
        """getAlpha(self) -> vpl::img::CRGBA::tComponent const &"""
        return _Core.CRGBA_getAlpha(self)


    def getRGBA(self):
        """getRGBA(self) -> vpl::img::CRGBA::tRGBA const &"""
        return _Core.CRGBA_getRGBA(self)


    def r(self):
        """r(self) -> vpl::img::CRGBA::tComponent const &"""
        return _Core.CRGBA_r(self)


    def g(self):
        """g(self) -> vpl::img::CRGBA::tComponent const &"""
        return _Core.CRGBA_g(self)


    def b(self):
        """b(self) -> vpl::img::CRGBA::tComponent const &"""
        return _Core.CRGBA_b(self)


    def a(self):
        """a(self) -> vpl::img::CRGBA::tComponent const &"""
        return _Core.CRGBA_a(self)


    def rgba(self):
        """rgba(self) -> vpl::img::CRGBA::tRGBA const &"""
        return _Core.CRGBA_rgba(self)


    def set(self, Red, Green, Blue, Alpha=255):
        """
        set(self, Red, Green, Blue, Alpha=255) -> CRGBA
        set(self, Red, Green, Blue) -> CRGBA
        """
        return _Core.CRGBA_set(self, Red, Green, Blue, Alpha)


    def setRed(self, Red):
        """setRed(self, Red) -> CRGBA"""
        return _Core.CRGBA_setRed(self, Red)


    def setGreen(self, Green):
        """setGreen(self, Green) -> CRGBA"""
        return _Core.CRGBA_setGreen(self, Green)


    def setBlue(self, Blue):
        """setBlue(self, Blue) -> CRGBA"""
        return _Core.CRGBA_setBlue(self, Blue)


    def setAlpha(self, Alpha):
        """setAlpha(self, Alpha) -> CRGBA"""
        return _Core.CRGBA_setAlpha(self, Alpha)


    def __eq__(self, r):
        """__eq__(self, r) -> bool"""
        return _Core.CRGBA___eq__(self, r)


    def __ne__(self, r):
        """__ne__(self, r) -> bool"""
        return _Core.CRGBA___ne__(self, r)

    __swig_destroy__ = _Core.delete_CRGBA
    __del__ = lambda self: None
CRGBA_swigregister = _Core.CRGBA_swigregister
CRGBA_swigregister(CRGBA)

class CColor(CRGBA):
    """Proxy of C++ vpl::img::CColor class."""

    __swig_setmethods__ = {}
    for _s in [CRGBA]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CColor, name, value)
    __swig_getmethods__ = {}
    for _s in [CRGBA]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CColor
        __init__(self, Red, Green, Blue, Alpha=255) -> CColor
        __init__(self, Red, Green, Blue) -> CColor
        __init__(self, Color) -> CColor
        __init__(self, Color) -> CColor
        """
        this = _Core.new_CColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_CColor
    __del__ = lambda self: None
CColor_swigregister = _Core.CColor_swigregister
CColor_swigregister(CColor)

class CRGBPixel(CRGBA):
    """Proxy of C++ vpl::img::CRGBPixel class."""

    __swig_setmethods__ = {}
    for _s in [CRGBA]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRGBPixel, name, value)
    __swig_getmethods__ = {}
    for _s in [CRGBA]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRGBPixel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CRGBPixel
        __init__(self, Red, Green, Blue, Alpha=255) -> CRGBPixel
        __init__(self, Red, Green, Blue) -> CRGBPixel
        __init__(self, Pixel) -> CRGBPixel
        __init__(self, Pixel) -> CRGBPixel
        """
        this = _Core.new_CRGBPixel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __iadd__(self, *args):
        """
        __iadd__(self, p) -> CRGBPixel
        __iadd__(self, c) -> CRGBPixel
        """
        return _Core.CRGBPixel___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(self, p) -> CRGBPixel
        __isub__(self, c) -> CRGBPixel
        """
        return _Core.CRGBPixel___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(self, p) -> CRGBPixel
        __imul__(self, Value) -> CRGBPixel
        """
        return _Core.CRGBPixel___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(self, p) -> CRGBPixel
        __idiv__(self, Value) -> CRGBPixel
        """
        return _Core.CRGBPixel___idiv__(self, *args)


    def __add__(self, x):
        """__add__(self, x) -> CRGBPixel"""
        return _Core.CRGBPixel___add__(self, x)


    def __sub__(self, x):
        """__sub__(self, x) -> CRGBPixel"""
        return _Core.CRGBPixel___sub__(self, x)


    def __mul__(self, Scalar):
        """__mul__(self, Scalar) -> CRGBPixel"""
        return _Core.CRGBPixel___mul__(self, Scalar)

    __swig_destroy__ = _Core.delete_CRGBPixel
    __del__ = lambda self: None
CRGBPixel_swigregister = _Core.CRGBPixel_swigregister
CRGBPixel_swigregister(CRGBPixel)
cvar = _Core.cvar
C_BLACK = cvar.C_BLACK
C_RED = cvar.C_RED
C_GREEN = cvar.C_GREEN
C_BLUE = cvar.C_BLUE
C_WHITE = cvar.C_WHITE
C_YELLOW = cvar.C_YELLOW
C_MAGENTA = cvar.C_MAGENTA
C_CYAN = cvar.C_CYAN
C_GRAY = cvar.C_GRAY


def __add__(l, r):
    """__add__(l, r) -> CRGBPixel"""
    return _Core.__add__(l, r)

def __div__(l, r):
    """__div__(l, r) -> CRGBPixel"""
    return _Core.__div__(l, r)

def __mul__(*args):
    """
    __mul__(l, r) -> CRGBPixel
    __mul__(l, Scalar) -> CRGBPixel
    __mul__(Scalar, r) -> CRGBPixel
    """
    return _Core.__mul__(*args)

def __sub__(*args):
    """
    __sub__(l, r) -> CRGBPixel
    __sub__(x) -> CRGBPixel
    """
    return _Core.__sub__(*args)
class CProgress(_object):
    """Proxy of C++ vpl::mod::CProgress class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProgress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProgress, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self) -> CProgress
        __init__(self, p) -> CProgress
        """
        this = _Core.new_CProgress(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Core.delete_CProgress
    __del__ = lambda self: None

    def copy(self, p):
        """copy(self, p) -> CProgress"""
        return _Core.CProgress_copy(self, p)


    def registerProgressFunc(self, Func):
        """registerProgressFunc(self, Func)"""
        return _Core.CProgress_registerProgressFunc(self, Func)


    def deregisterProgressFunc(self):
        """deregisterProgressFunc(self)"""
        return _Core.CProgress_deregisterProgressFunc(self)


    def getProgressMax(self):
        """getProgressMax(self) -> int"""
        return _Core.CProgress_getProgressMax(self)


    def setProgressMax(self, iValue):
        """setProgressMax(self, iValue)"""
        return _Core.CProgress_setProgressMax(self, iValue)


    def getProgressCount(self):
        """getProgressCount(self) -> int"""
        return _Core.CProgress_getProgressCount(self)


    def beginProgress(self):
        """beginProgress(self)"""
        return _Core.CProgress_beginProgress(self)


    def endProgress(self):
        """endProgress(self)"""
        return _Core.CProgress_endProgress(self)


    def progress(self, iIncrement=1):
        """
        progress(self, iIncrement=1) -> bool
        progress(self) -> bool
        """
        return _Core.CProgress_progress(self, iIncrement)

CProgress_swigregister = _Core.CProgress_swigregister
CProgress_swigregister(CProgress)

# This file is compatible with both classic and new-style classes.


