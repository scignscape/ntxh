# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ImageFunctions')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ImageFunctions')
    _ImageFunctions = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ImageFunctions', [dirname(__file__)])
        except ImportError:
            import _ImageFunctions
            return _ImageFunctions
        if fp is not None:
            try:
                _mod = imp.load_module('_ImageFunctions', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ImageFunctions = swig_import_helper()
    del swig_import_helper
else:
    import _ImageFunctions
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import VPLSwig.Image.Image
import VPLSwig.Core.Core
import VPLSwig.Core.Geometry
class CHistogram_Image8(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_Image8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_Image8, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _ImageFunctions.CHistogram_Image8_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _ImageFunctions.CHistogram_Image8_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_Image8
        __init__(self, NumOfBins, Min) -> CHistogram_Image8
        __init__(self, NumOfBins) -> CHistogram_Image8
        __init__(self) -> CHistogram_Image8
        """
        this = _ImageFunctions.new_CHistogram_Image8(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFunctions.delete_CHistogram_Image8
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_Image8_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_Image8_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_Image8_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_Image8_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tItem"""
        return _ImageFunctions.CHistogram_Image8_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_Image8_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tVector const &"""
        return _ImageFunctions.CHistogram_Image8_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _ImageFunctions.CHistogram_Image8___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _ImageFunctions.CHistogram_Image8_cumulate(self)

CHistogram_Image8_swigregister = _ImageFunctions.CHistogram_Image8_swigregister
CHistogram_Image8_swigregister(CHistogram_Image8)

class CHistogram_Image16(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_Image16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_Image16, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _ImageFunctions.CHistogram_Image16_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _ImageFunctions.CHistogram_Image16_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_Image16
        __init__(self, NumOfBins, Min) -> CHistogram_Image16
        __init__(self, NumOfBins) -> CHistogram_Image16
        __init__(self) -> CHistogram_Image16
        """
        this = _ImageFunctions.new_CHistogram_Image16(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFunctions.delete_CHistogram_Image16
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_Image16_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_Image16_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_Image16_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_Image16_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tItem"""
        return _ImageFunctions.CHistogram_Image16_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_Image16_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tVector const &"""
        return _ImageFunctions.CHistogram_Image16_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _ImageFunctions.CHistogram_Image16___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _ImageFunctions.CHistogram_Image16_cumulate(self)

CHistogram_Image16_swigregister = _ImageFunctions.CHistogram_Image16_swigregister
CHistogram_Image16_swigregister(CHistogram_Image16)

class CHistogram_Image32(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_Image32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_Image32, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _ImageFunctions.CHistogram_Image32_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _ImageFunctions.CHistogram_Image32_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_Image32
        __init__(self, NumOfBins, Min) -> CHistogram_Image32
        __init__(self, NumOfBins) -> CHistogram_Image32
        __init__(self) -> CHistogram_Image32
        """
        this = _ImageFunctions.new_CHistogram_Image32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFunctions.delete_CHistogram_Image32
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_Image32_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_Image32_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_Image32_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_Image32_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tItem"""
        return _ImageFunctions.CHistogram_Image32_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_Image32_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tVector const &"""
        return _ImageFunctions.CHistogram_Image32_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _ImageFunctions.CHistogram_Image32___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _ImageFunctions.CHistogram_Image32_cumulate(self)

CHistogram_Image32_swigregister = _ImageFunctions.CHistogram_Image32_swigregister
CHistogram_Image32_swigregister(CHistogram_Image32)

class CHistogram_FImage(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_FImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_FImage, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _ImageFunctions.CHistogram_FImage_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _ImageFunctions.CHistogram_FImage_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_FImage
        __init__(self, NumOfBins, Min) -> CHistogram_FImage
        __init__(self, NumOfBins) -> CHistogram_FImage
        __init__(self) -> CHistogram_FImage
        """
        this = _ImageFunctions.new_CHistogram_FImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFunctions.delete_CHistogram_FImage
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_FImage_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_FImage_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< float,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_FImage_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CImage< float,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_FImage_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< float,vpl::base::CRefData > >::tItem"""
        return _ImageFunctions.CHistogram_FImage_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CImage< float,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_FImage_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CImage< float,vpl::base::CRefData > >::tVector const &"""
        return _ImageFunctions.CHistogram_FImage_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _ImageFunctions.CHistogram_FImage___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _ImageFunctions.CHistogram_FImage_cumulate(self)

CHistogram_FImage_swigregister = _ImageFunctions.CHistogram_FImage_swigregister
CHistogram_FImage_swigregister(CHistogram_FImage)

class CHistogram_DImage(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_DImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_DImage, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _ImageFunctions.CHistogram_DImage_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _ImageFunctions.CHistogram_DImage_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_DImage
        __init__(self, NumOfBins, Min) -> CHistogram_DImage
        __init__(self, NumOfBins) -> CHistogram_DImage
        __init__(self) -> CHistogram_DImage
        """
        this = _ImageFunctions.new_CHistogram_DImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFunctions.delete_CHistogram_DImage
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_DImage_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _ImageFunctions.CHistogram_DImage_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_DImage_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_DImage_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tItem"""
        return _ImageFunctions.CHistogram_DImage_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CHistogram_DImage_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tVector const &"""
        return _ImageFunctions.CHistogram_DImage_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _ImageFunctions.CHistogram_DImage___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _ImageFunctions.CHistogram_DImage_cumulate(self)

CHistogram_DImage_swigregister = _ImageFunctions.CHistogram_DImage_swigregister
CHistogram_DImage_swigregister(CHistogram_DImage)

class CFullHistogram_Image8(_object):
    """Proxy of C++ vpl::img::CFullHistogram<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFullHistogram_Image8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFullHistogram_Image8, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _ImageFunctions.CFullHistogram_Image8_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER

    def __init__(self, *args):
        """
        __init__(self, Min, Max) -> CFullHistogram_Image8
        __init__(self, Min) -> CFullHistogram_Image8
        __init__(self) -> CFullHistogram_Image8
        """
        this = _ImageFunctions.new_CFullHistogram_Image8(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFunctions.delete_CFullHistogram_Image8
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFunctions.CFullHistogram_Image8_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _ImageFunctions.CFullHistogram_Image8_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_Image8_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_Image8_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tItem"""
        return _ImageFunctions.CFullHistogram_Image8_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_Image8_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tVector const &"""
        return _ImageFunctions.CFullHistogram_Image8_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _ImageFunctions.CFullHistogram_Image8___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _ImageFunctions.CFullHistogram_Image8_cumulate(self)

CFullHistogram_Image8_swigregister = _ImageFunctions.CFullHistogram_Image8_swigregister
CFullHistogram_Image8_swigregister(CFullHistogram_Image8)

class CFullHistogram_Image16(_object):
    """Proxy of C++ vpl::img::CFullHistogram<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFullHistogram_Image16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFullHistogram_Image16, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _ImageFunctions.CFullHistogram_Image16_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER

    def __init__(self, *args):
        """
        __init__(self, Min, Max) -> CFullHistogram_Image16
        __init__(self, Min) -> CFullHistogram_Image16
        __init__(self) -> CFullHistogram_Image16
        """
        this = _ImageFunctions.new_CFullHistogram_Image16(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFunctions.delete_CFullHistogram_Image16
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFunctions.CFullHistogram_Image16_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _ImageFunctions.CFullHistogram_Image16_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_Image16_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_Image16_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tItem"""
        return _ImageFunctions.CFullHistogram_Image16_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_Image16_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tVector const &"""
        return _ImageFunctions.CFullHistogram_Image16_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _ImageFunctions.CFullHistogram_Image16___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _ImageFunctions.CFullHistogram_Image16_cumulate(self)

CFullHistogram_Image16_swigregister = _ImageFunctions.CFullHistogram_Image16_swigregister
CFullHistogram_Image16_swigregister(CFullHistogram_Image16)

class CFullHistogram_Image32(_object):
    """Proxy of C++ vpl::img::CFullHistogram<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFullHistogram_Image32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFullHistogram_Image32, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _ImageFunctions.CFullHistogram_Image32_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER

    def __init__(self, *args):
        """
        __init__(self, Min, Max) -> CFullHistogram_Image32
        __init__(self, Min) -> CFullHistogram_Image32
        __init__(self) -> CFullHistogram_Image32
        """
        this = _ImageFunctions.new_CFullHistogram_Image32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFunctions.delete_CFullHistogram_Image32
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFunctions.CFullHistogram_Image32_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _ImageFunctions.CFullHistogram_Image32_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_Image32_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_Image32_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tItem"""
        return _ImageFunctions.CFullHistogram_Image32_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_Image32_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CFullHistogram< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tVector const &"""
        return _ImageFunctions.CFullHistogram_Image32_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _ImageFunctions.CFullHistogram_Image32___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _ImageFunctions.CFullHistogram_Image32_cumulate(self)

CFullHistogram_Image32_swigregister = _ImageFunctions.CFullHistogram_Image32_swigregister
CFullHistogram_Image32_swigregister(CFullHistogram_Image32)

class CFullHistogram_DImage(_object):
    """Proxy of C++ vpl::img::CFullHistogram<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFullHistogram_DImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFullHistogram_DImage, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _ImageFunctions.CFullHistogram_DImage_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER

    def __init__(self, *args):
        """
        __init__(self, Min, Max) -> CFullHistogram_DImage
        __init__(self, Min) -> CFullHistogram_DImage
        __init__(self) -> CFullHistogram_DImage
        """
        this = _ImageFunctions.new_CFullHistogram_DImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFunctions.delete_CFullHistogram_DImage
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFunctions.CFullHistogram_DImage_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _ImageFunctions.CFullHistogram_DImage_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CFullHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_DImage_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CFullHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_DImage_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CFullHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tItem"""
        return _ImageFunctions.CFullHistogram_DImage_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CFullHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tBin"""
        return _ImageFunctions.CFullHistogram_DImage_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CFullHistogram< vpl::img::CImage< __int16,vpl::base::CRefData > >::tVector const &"""
        return _ImageFunctions.CFullHistogram_DImage_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _ImageFunctions.CFullHistogram_DImage___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _ImageFunctions.CFullHistogram_DImage_cumulate(self)

CFullHistogram_DImage_swigregister = _ImageFunctions.CFullHistogram_DImage_swigregister
CFullHistogram_DImage_swigregister(CFullHistogram_DImage)


def histogramEqualization_Image8(Image):
    """histogramEqualization_Image8(Image) -> bool"""
    return _ImageFunctions.histogramEqualization_Image8(Image)

def histogramEqualization_Image16(Image):
    """histogramEqualization_Image16(Image) -> bool"""
    return _ImageFunctions.histogramEqualization_Image16(Image)

def histogramEqualization_Image32(Image):
    """histogramEqualization_Image32(Image) -> bool"""
    return _ImageFunctions.histogramEqualization_Image32(Image)

def histogramEqualization_DImage(Image):
    """histogramEqualization_DImage(Image) -> bool"""
    return _ImageFunctions.histogramEqualization_DImage(Image)

def singleThresholding_Image8(Image):
    """singleThresholding_Image8(Image) -> bool"""
    return _ImageFunctions.singleThresholding_Image8(Image)

def singleThresholding_Image16(Image):
    """singleThresholding_Image16(Image) -> bool"""
    return _ImageFunctions.singleThresholding_Image16(Image)

def singleThresholding_Image32(Image):
    """singleThresholding_Image32(Image) -> bool"""
    return _ImageFunctions.singleThresholding_Image32(Image)

def singleThresholding_DImage(Image):
    """singleThresholding_DImage(Image) -> bool"""
    return _ImageFunctions.singleThresholding_DImage(Image)

def multiIterativeThresholding_Image8(Image, NumOfThresholds):
    """multiIterativeThresholding_Image8(Image, NumOfThresholds) -> bool"""
    return _ImageFunctions.multiIterativeThresholding_Image8(Image, NumOfThresholds)

def multiIterativeThresholding_Image16(Image, NumOfThresholds):
    """multiIterativeThresholding_Image16(Image, NumOfThresholds) -> bool"""
    return _ImageFunctions.multiIterativeThresholding_Image16(Image, NumOfThresholds)

def multiIterativeThresholding_Image32(Image, NumOfThresholds):
    """multiIterativeThresholding_Image32(Image, NumOfThresholds) -> bool"""
    return _ImageFunctions.multiIterativeThresholding_Image32(Image, NumOfThresholds)

def multiIterativeThresholding_DImage(Image, NumOfThresholds):
    """multiIterativeThresholding_DImage(Image, NumOfThresholds) -> bool"""
    return _ImageFunctions.multiIterativeThresholding_DImage(Image, NumOfThresholds)

def singleOtsuThresholding_Image8(Image):
    """singleOtsuThresholding_Image8(Image) -> bool"""
    return _ImageFunctions.singleOtsuThresholding_Image8(Image)

def singleOtsuThresholding_Image16(Image):
    """singleOtsuThresholding_Image16(Image) -> bool"""
    return _ImageFunctions.singleOtsuThresholding_Image16(Image)

def singleOtsuThresholding_Image32(Image):
    """singleOtsuThresholding_Image32(Image) -> bool"""
    return _ImageFunctions.singleOtsuThresholding_Image32(Image)

def singleOtsuThresholding_DImage(Image):
    """singleOtsuThresholding_DImage(Image) -> bool"""
    return _ImageFunctions.singleOtsuThresholding_DImage(Image)

def getMaxPixel8_Image8(Image):
    """getMaxPixel8_Image8(Image) -> unsigned __int8"""
    return _ImageFunctions.getMaxPixel8_Image8(Image)

def getMaxPixel16_Image16(Image):
    """getMaxPixel16_Image16(Image) -> unsigned __int16"""
    return _ImageFunctions.getMaxPixel16_Image16(Image)

def getMaxPixel32_Image32(Image):
    """getMaxPixel32_Image32(Image) -> unsigned __int32"""
    return _ImageFunctions.getMaxPixel32_Image32(Image)

def getMaxFloat_FImage(Image):
    """getMaxFloat_FImage(Image) -> float"""
    return _ImageFunctions.getMaxFloat_FImage(Image)

def getMaxDensity_DImage(Image):
    """getMaxDensity_DImage(Image) -> __int16"""
    return _ImageFunctions.getMaxDensity_DImage(Image)

def getMaxRGB_RGBAImage(Image):
    """getMaxRGB_RGBAImage(Image) -> CRGBPixel"""
    return _ImageFunctions.getMaxRGB_RGBAImage(Image)

def getMaxComplex_ComplexImage(Image):
    """getMaxComplex_ComplexImage(Image) -> vpl::math::CComplex< float >"""
    return _ImageFunctions.getMaxComplex_ComplexImage(Image)

def getMaxDouble_Image8(Image):
    """getMaxDouble_Image8(Image) -> double"""
    return _ImageFunctions.getMaxDouble_Image8(Image)

def getMaxDouble_Image16(Image):
    """getMaxDouble_Image16(Image) -> double"""
    return _ImageFunctions.getMaxDouble_Image16(Image)

def getMaxDouble_Image32(Image):
    """getMaxDouble_Image32(Image) -> double"""
    return _ImageFunctions.getMaxDouble_Image32(Image)

def getMaxDouble_FImage(Image):
    """getMaxDouble_FImage(Image) -> double"""
    return _ImageFunctions.getMaxDouble_FImage(Image)

def getMaxDouble_DImage(Image):
    """getMaxDouble_DImage(Image) -> double"""
    return _ImageFunctions.getMaxDouble_DImage(Image)

def getMinPixel8_Image8(Image):
    """getMinPixel8_Image8(Image) -> unsigned __int8"""
    return _ImageFunctions.getMinPixel8_Image8(Image)

def getMinPixel16_Image16(Image):
    """getMinPixel16_Image16(Image) -> unsigned __int16"""
    return _ImageFunctions.getMinPixel16_Image16(Image)

def getMinPixel32_Image32(Image):
    """getMinPixel32_Image32(Image) -> unsigned __int32"""
    return _ImageFunctions.getMinPixel32_Image32(Image)

def getMinFloat_FImage(Image):
    """getMinFloat_FImage(Image) -> float"""
    return _ImageFunctions.getMinFloat_FImage(Image)

def getMinDensity_DImage(Image):
    """getMinDensity_DImage(Image) -> __int16"""
    return _ImageFunctions.getMinDensity_DImage(Image)

def getMinRGBA_RGBAImage(Image):
    """getMinRGBA_RGBAImage(Image) -> CRGBPixel"""
    return _ImageFunctions.getMinRGBA_RGBAImage(Image)

def getMinComplex_ComplexImage(Image):
    """getMinComplex_ComplexImage(Image) -> vpl::math::CComplex< float >"""
    return _ImageFunctions.getMinComplex_ComplexImage(Image)

def getMinDouble_Image8(Image):
    """getMinDouble_Image8(Image) -> double"""
    return _ImageFunctions.getMinDouble_Image8(Image)

def getMinDouble_Image16(Image):
    """getMinDouble_Image16(Image) -> double"""
    return _ImageFunctions.getMinDouble_Image16(Image)

def getMinDouble_Image32(Image):
    """getMinDouble_Image32(Image) -> double"""
    return _ImageFunctions.getMinDouble_Image32(Image)

def getMinDouble_FImage(Image):
    """getMinDouble_FImage(Image) -> double"""
    return _ImageFunctions.getMinDouble_FImage(Image)

def getMinDouble_DImage(Image):
    """getMinDouble_DImage(Image) -> double"""
    return _ImageFunctions.getMinDouble_DImage(Image)

def getVariancePixel8_Image8(Image):
    """getVariancePixel8_Image8(Image) -> unsigned __int8"""
    return _ImageFunctions.getVariancePixel8_Image8(Image)

def getVariancePixel16_Image16(Image):
    """getVariancePixel16_Image16(Image) -> unsigned __int16"""
    return _ImageFunctions.getVariancePixel16_Image16(Image)

def getVariancePixel32_Image32(Image):
    """getVariancePixel32_Image32(Image) -> unsigned __int32"""
    return _ImageFunctions.getVariancePixel32_Image32(Image)

def getVarianceFloat_FImage(Image):
    """getVarianceFloat_FImage(Image) -> float"""
    return _ImageFunctions.getVarianceFloat_FImage(Image)

def getVarianceDensity_DImage(Image):
    """getVarianceDensity_DImage(Image) -> __int16"""
    return _ImageFunctions.getVarianceDensity_DImage(Image)

def getVarianceDouble_Image8(Image):
    """getVarianceDouble_Image8(Image) -> double"""
    return _ImageFunctions.getVarianceDouble_Image8(Image)

def getVarianceDouble_Image16(Image):
    """getVarianceDouble_Image16(Image) -> double"""
    return _ImageFunctions.getVarianceDouble_Image16(Image)

def getVarianceDouble_Image32(Image):
    """getVarianceDouble_Image32(Image) -> double"""
    return _ImageFunctions.getVarianceDouble_Image32(Image)

def getVarianceDouble_FImage(Image):
    """getVarianceDouble_FImage(Image) -> double"""
    return _ImageFunctions.getVarianceDouble_FImage(Image)

def getVarianceDouble_DImage(Image):
    """getVarianceDouble_DImage(Image) -> double"""
    return _ImageFunctions.getVarianceDouble_DImage(Image)

def getMeanPixel8_Image8(Image):
    """getMeanPixel8_Image8(Image) -> unsigned __int8"""
    return _ImageFunctions.getMeanPixel8_Image8(Image)

def getMeanPixel16_Image16(Image):
    """getMeanPixel16_Image16(Image) -> unsigned __int16"""
    return _ImageFunctions.getMeanPixel16_Image16(Image)

def getMeanPixel32_Image32(Image):
    """getMeanPixel32_Image32(Image) -> unsigned __int32"""
    return _ImageFunctions.getMeanPixel32_Image32(Image)

def getMeanFloat_FImage(Image):
    """getMeanFloat_FImage(Image) -> float"""
    return _ImageFunctions.getMeanFloat_FImage(Image)

def getMeanDensity_DImage(Image):
    """getMeanDensity_DImage(Image) -> __int16"""
    return _ImageFunctions.getMeanDensity_DImage(Image)

def getMeanRGBA_RGBAImage(Image):
    """getMeanRGBA_RGBAImage(Image) -> CRGBPixel"""
    return _ImageFunctions.getMeanRGBA_RGBAImage(Image)

def getMeanDouble_Image8(Image):
    """getMeanDouble_Image8(Image) -> double"""
    return _ImageFunctions.getMeanDouble_Image8(Image)

def getMeanDouble_Image16(Image):
    """getMeanDouble_Image16(Image) -> double"""
    return _ImageFunctions.getMeanDouble_Image16(Image)

def getMeanDouble_Image32(Image):
    """getMeanDouble_Image32(Image) -> double"""
    return _ImageFunctions.getMeanDouble_Image32(Image)

def getMeanDouble_FImage(Image):
    """getMeanDouble_FImage(Image) -> double"""
    return _ImageFunctions.getMeanDouble_FImage(Image)

def getMeanDouble_DImage(Image):
    """getMeanDouble_DImage(Image) -> double"""
    return _ImageFunctions.getMeanDouble_DImage(Image)

def getSumOfSquaresPixel8_Image8(Image):
    """getSumOfSquaresPixel8_Image8(Image) -> unsigned __int8"""
    return _ImageFunctions.getSumOfSquaresPixel8_Image8(Image)

def getSumOfSquaresPixel16_Image16(Image):
    """getSumOfSquaresPixel16_Image16(Image) -> unsigned __int16"""
    return _ImageFunctions.getSumOfSquaresPixel16_Image16(Image)

def getSumOfSquaresPixel32_Image32(Image):
    """getSumOfSquaresPixel32_Image32(Image) -> unsigned __int32"""
    return _ImageFunctions.getSumOfSquaresPixel32_Image32(Image)

def getSumOfSquaresFloat_FImage(Image):
    """getSumOfSquaresFloat_FImage(Image) -> float"""
    return _ImageFunctions.getSumOfSquaresFloat_FImage(Image)

def getSumOfSquaresDensity_DImage(Image):
    """getSumOfSquaresDensity_DImage(Image) -> __int16"""
    return _ImageFunctions.getSumOfSquaresDensity_DImage(Image)

def getSumOfSquaresComplex_ComplexImage(Image):
    """getSumOfSquaresComplex_ComplexImage(Image) -> vpl::math::CComplex< float >"""
    return _ImageFunctions.getSumOfSquaresComplex_ComplexImage(Image)

def getSumOfSquaresDouble_Image8(Image):
    """getSumOfSquaresDouble_Image8(Image) -> double"""
    return _ImageFunctions.getSumOfSquaresDouble_Image8(Image)

def getSumOfSquaresDouble_Image16(Image):
    """getSumOfSquaresDouble_Image16(Image) -> double"""
    return _ImageFunctions.getSumOfSquaresDouble_Image16(Image)

def getSumOfSquaresDouble_Image32(Image):
    """getSumOfSquaresDouble_Image32(Image) -> double"""
    return _ImageFunctions.getSumOfSquaresDouble_Image32(Image)

def getSumOfSquaresDouble_FImage(Image):
    """getSumOfSquaresDouble_FImage(Image) -> double"""
    return _ImageFunctions.getSumOfSquaresDouble_FImage(Image)

def getSumOfSquaresDouble_DImage(Image):
    """getSumOfSquaresDouble_DImage(Image) -> double"""
    return _ImageFunctions.getSumOfSquaresDouble_DImage(Image)

def getSumPixel8_Image8(Image):
    """getSumPixel8_Image8(Image) -> unsigned __int8"""
    return _ImageFunctions.getSumPixel8_Image8(Image)

def getSumPixel16_Image16(Image):
    """getSumPixel16_Image16(Image) -> unsigned __int16"""
    return _ImageFunctions.getSumPixel16_Image16(Image)

def getSumPixel32_Image32(Image):
    """getSumPixel32_Image32(Image) -> unsigned __int32"""
    return _ImageFunctions.getSumPixel32_Image32(Image)

def getSumFloat_FImage(Image):
    """getSumFloat_FImage(Image) -> float"""
    return _ImageFunctions.getSumFloat_FImage(Image)

def getSumDensity_DImage(Image):
    """getSumDensity_DImage(Image) -> __int16"""
    return _ImageFunctions.getSumDensity_DImage(Image)

def getSumRGBA_RGBAImage(Image):
    """getSumRGBA_RGBAImage(Image) -> CRGBPixel"""
    return _ImageFunctions.getSumRGBA_RGBAImage(Image)

def getSumComplex_ComplexImage(Image):
    """getSumComplex_ComplexImage(Image) -> vpl::math::CComplex< float >"""
    return _ImageFunctions.getSumComplex_ComplexImage(Image)

def getSumDouble_Image8(Image):
    """getSumDouble_Image8(Image) -> double"""
    return _ImageFunctions.getSumDouble_Image8(Image)

def getSumDouble_Image16(Image):
    """getSumDouble_Image16(Image) -> double"""
    return _ImageFunctions.getSumDouble_Image16(Image)

def getSumDouble_Image32(Image):
    """getSumDouble_Image32(Image) -> double"""
    return _ImageFunctions.getSumDouble_Image32(Image)

def getSumDouble_FImage(Image):
    """getSumDouble_FImage(Image) -> double"""
    return _ImageFunctions.getSumDouble_FImage(Image)

def getSumDouble_DImage(Image):
    """getSumDouble_DImage(Image) -> double"""
    return _ImageFunctions.getSumDouble_DImage(Image)

def getMeanSquareErrorPixel8_Image8(Image1, Image2):
    """getMeanSquareErrorPixel8_Image8(Image1, Image2) -> unsigned __int8"""
    return _ImageFunctions.getMeanSquareErrorPixel8_Image8(Image1, Image2)

def getMeanSquareErrorPixel16_Image16(Image1, Image2):
    """getMeanSquareErrorPixel16_Image16(Image1, Image2) -> unsigned __int16"""
    return _ImageFunctions.getMeanSquareErrorPixel16_Image16(Image1, Image2)

def getMeanSquareErrorPixel32_Image32(Image1, Image2):
    """getMeanSquareErrorPixel32_Image32(Image1, Image2) -> unsigned __int32"""
    return _ImageFunctions.getMeanSquareErrorPixel32_Image32(Image1, Image2)

def getMeanSquareErrorFloat_FImage(Image1, Image2):
    """getMeanSquareErrorFloat_FImage(Image1, Image2) -> float"""
    return _ImageFunctions.getMeanSquareErrorFloat_FImage(Image1, Image2)

def getMeanSquareErrorDensity_DImage(Image1, Image2):
    """getMeanSquareErrorDensity_DImage(Image1, Image2) -> __int16"""
    return _ImageFunctions.getMeanSquareErrorDensity_DImage(Image1, Image2)

def getMeanSquareErrorDouble_Image8(Image1, Image2):
    """getMeanSquareErrorDouble_Image8(Image1, Image2) -> double"""
    return _ImageFunctions.getMeanSquareErrorDouble_Image8(Image1, Image2)

def getMeanSquareErrorDouble_Image16(Image1, Image2):
    """getMeanSquareErrorDouble_Image16(Image1, Image2) -> double"""
    return _ImageFunctions.getMeanSquareErrorDouble_Image16(Image1, Image2)

def getMeanSquareErrorDouble_Image32(Image1, Image2):
    """getMeanSquareErrorDouble_Image32(Image1, Image2) -> double"""
    return _ImageFunctions.getMeanSquareErrorDouble_Image32(Image1, Image2)

def getMeanSquareErrorDouble_FImage(Image1, Image2):
    """getMeanSquareErrorDouble_FImage(Image1, Image2) -> double"""
    return _ImageFunctions.getMeanSquareErrorDouble_FImage(Image1, Image2)

def getMeanSquareErrorDouble_DImage(Image1, Image2):
    """getMeanSquareErrorDouble_DImage(Image1, Image2) -> double"""
    return _ImageFunctions.getMeanSquareErrorDouble_DImage(Image1, Image2)

def getProductPixel8_Image8(Image1, Image2):
    """getProductPixel8_Image8(Image1, Image2) -> unsigned __int8"""
    return _ImageFunctions.getProductPixel8_Image8(Image1, Image2)

def getProductPixel16_Image16(Image1, Image2):
    """getProductPixel16_Image16(Image1, Image2) -> unsigned __int16"""
    return _ImageFunctions.getProductPixel16_Image16(Image1, Image2)

def getProductPixel32_Image32(Image1, Image2):
    """getProductPixel32_Image32(Image1, Image2) -> unsigned __int32"""
    return _ImageFunctions.getProductPixel32_Image32(Image1, Image2)

def getProductFloat_FImage(Image1, Image2):
    """getProductFloat_FImage(Image1, Image2) -> float"""
    return _ImageFunctions.getProductFloat_FImage(Image1, Image2)

def getProductDensity_DImage(Image1, Image2):
    """getProductDensity_DImage(Image1, Image2) -> __int16"""
    return _ImageFunctions.getProductDensity_DImage(Image1, Image2)

def getProductRGBA_RGBAImage(Image1, Image2):
    """getProductRGBA_RGBAImage(Image1, Image2) -> CRGBPixel"""
    return _ImageFunctions.getProductRGBA_RGBAImage(Image1, Image2)

def getProductComplex_ComplexImage(Image1, Image2):
    """getProductComplex_ComplexImage(Image1, Image2) -> vpl::math::CComplex< float >"""
    return _ImageFunctions.getProductComplex_ComplexImage(Image1, Image2)

def getProductDouble_Image8(Image1, Image2):
    """getProductDouble_Image8(Image1, Image2) -> double"""
    return _ImageFunctions.getProductDouble_Image8(Image1, Image2)

def getProductDouble_Image16(Image1, Image2):
    """getProductDouble_Image16(Image1, Image2) -> double"""
    return _ImageFunctions.getProductDouble_Image16(Image1, Image2)

def getProductDouble_Image32(Image1, Image2):
    """getProductDouble_Image32(Image1, Image2) -> double"""
    return _ImageFunctions.getProductDouble_Image32(Image1, Image2)

def getProductDouble_FImage(Image1, Image2):
    """getProductDouble_FImage(Image1, Image2) -> double"""
    return _ImageFunctions.getProductDouble_FImage(Image1, Image2)

def getProductDouble_DImage(Image1, Image2):
    """getProductDouble_DImage(Image1, Image2) -> double"""
    return _ImageFunctions.getProductDouble_DImage(Image1, Image2)

def log_Image8(Image):
    """log_Image8(Image)"""
    return _ImageFunctions.log_Image8(Image)

def log_Image16(Image):
    """log_Image16(Image)"""
    return _ImageFunctions.log_Image16(Image)

def log_Image32(Image):
    """log_Image32(Image)"""
    return _ImageFunctions.log_Image32(Image)

def log_FImage(Image):
    """log_FImage(Image)"""
    return _ImageFunctions.log_FImage(Image)

def log_DImage(Image):
    """log_DImage(Image)"""
    return _ImageFunctions.log_DImage(Image)
# This file is compatible with both classic and new-style classes.


