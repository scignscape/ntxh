# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ImageFilters')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ImageFilters')
    _ImageFilters = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ImageFilters', [dirname(__file__)])
        except ImportError:
            import _ImageFilters
            return _ImageFilters
        if fp is not None:
            try:
                _mod = imp.load_module('_ImageFilters', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ImageFilters = swig_import_helper()
    del swig_import_helper
else:
    import _ImageFilters
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import VPLSwig.Image.Image
import VPLSwig.Core.Core
import VPLSwig.Core.Geometry
class swig_imageFilter_Image8(_object):
    """Proxy of C++ vpl::img::CImageFilter<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_imageFilter_Image8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_imageFilter_Image8, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_imageFilter_Image8_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_imageFilter_Image8"""
        if self.__class__ == swig_imageFilter_Image8:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_imageFilter_Image8(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_imageFilter_Image8
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_imageFilter_Image8___call__(self, SrcImage, DstImage)


    def getDX(self):
        """getDX(self) -> double"""
        return _ImageFilters.swig_imageFilter_Image8_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _ImageFilters.swig_imageFilter_Image8_getDY(self)


    def setPixel(self, dx, dy):
        """setPixel(self, dx, dy)"""
        return _ImageFilters.swig_imageFilter_Image8_setPixel(self, dx, dy)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_imageFilter_Image8(self)
        return weakref_proxy(self)
swig_imageFilter_Image8_swigregister = _ImageFilters.swig_imageFilter_Image8_swigregister
swig_imageFilter_Image8_swigregister(swig_imageFilter_Image8)

class swig_imageFilter_Image16(_object):
    """Proxy of C++ vpl::img::CImageFilter<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_imageFilter_Image16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_imageFilter_Image16, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_imageFilter_Image16_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_imageFilter_Image16"""
        if self.__class__ == swig_imageFilter_Image16:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_imageFilter_Image16(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_imageFilter_Image16
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_imageFilter_Image16___call__(self, SrcImage, DstImage)


    def getDX(self):
        """getDX(self) -> double"""
        return _ImageFilters.swig_imageFilter_Image16_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _ImageFilters.swig_imageFilter_Image16_getDY(self)


    def setPixel(self, dx, dy):
        """setPixel(self, dx, dy)"""
        return _ImageFilters.swig_imageFilter_Image16_setPixel(self, dx, dy)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_imageFilter_Image16(self)
        return weakref_proxy(self)
swig_imageFilter_Image16_swigregister = _ImageFilters.swig_imageFilter_Image16_swigregister
swig_imageFilter_Image16_swigregister(swig_imageFilter_Image16)

class swig_imageFilter_Image32(_object):
    """Proxy of C++ vpl::img::CImageFilter<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_imageFilter_Image32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_imageFilter_Image32, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_imageFilter_Image32_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_imageFilter_Image32"""
        if self.__class__ == swig_imageFilter_Image32:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_imageFilter_Image32(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_imageFilter_Image32
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_imageFilter_Image32___call__(self, SrcImage, DstImage)


    def getDX(self):
        """getDX(self) -> double"""
        return _ImageFilters.swig_imageFilter_Image32_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _ImageFilters.swig_imageFilter_Image32_getDY(self)


    def setPixel(self, dx, dy):
        """setPixel(self, dx, dy)"""
        return _ImageFilters.swig_imageFilter_Image32_setPixel(self, dx, dy)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_imageFilter_Image32(self)
        return weakref_proxy(self)
swig_imageFilter_Image32_swigregister = _ImageFilters.swig_imageFilter_Image32_swigregister
swig_imageFilter_Image32_swigregister(swig_imageFilter_Image32)

class swig_imageFilter_FImage(_object):
    """Proxy of C++ vpl::img::CImageFilter<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_imageFilter_FImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_imageFilter_FImage, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_imageFilter_FImage_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_imageFilter_FImage"""
        if self.__class__ == swig_imageFilter_FImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_imageFilter_FImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_imageFilter_FImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_imageFilter_FImage___call__(self, SrcImage, DstImage)


    def getDX(self):
        """getDX(self) -> double"""
        return _ImageFilters.swig_imageFilter_FImage_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _ImageFilters.swig_imageFilter_FImage_getDY(self)


    def setPixel(self, dx, dy):
        """setPixel(self, dx, dy)"""
        return _ImageFilters.swig_imageFilter_FImage_setPixel(self, dx, dy)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_imageFilter_FImage(self)
        return weakref_proxy(self)
swig_imageFilter_FImage_swigregister = _ImageFilters.swig_imageFilter_FImage_swigregister
swig_imageFilter_FImage_swigregister(swig_imageFilter_FImage)

class swig_imageFilter_DImage(_object):
    """Proxy of C++ vpl::img::CImageFilter<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_imageFilter_DImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_imageFilter_DImage, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_imageFilter_DImage_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_imageFilter_DImage"""
        if self.__class__ == swig_imageFilter_DImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_imageFilter_DImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_imageFilter_DImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_imageFilter_DImage___call__(self, SrcImage, DstImage)


    def getDX(self):
        """getDX(self) -> double"""
        return _ImageFilters.swig_imageFilter_DImage_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _ImageFilters.swig_imageFilter_DImage_getDY(self)


    def setPixel(self, dx, dy):
        """setPixel(self, dx, dy)"""
        return _ImageFilters.swig_imageFilter_DImage_setPixel(self, dx, dy)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_imageFilter_DImage(self)
        return weakref_proxy(self)
swig_imageFilter_DImage_swigregister = _ImageFilters.swig_imageFilter_DImage_swigregister
swig_imageFilter_DImage_swigregister(swig_imageFilter_DImage)

class swig_imageFilter_RGBAImage(_object):
    """Proxy of C++ vpl::img::CImageFilter<(vpl::img::CImage<(vpl::img::tRGBAPixel)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_imageFilter_RGBAImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_imageFilter_RGBAImage, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_imageFilter_RGBAImage_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_imageFilter_RGBAImage"""
        if self.__class__ == swig_imageFilter_RGBAImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_imageFilter_RGBAImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_imageFilter_RGBAImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_imageFilter_RGBAImage___call__(self, SrcImage, DstImage)


    def getDX(self):
        """getDX(self) -> double"""
        return _ImageFilters.swig_imageFilter_RGBAImage_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _ImageFilters.swig_imageFilter_RGBAImage_getDY(self)


    def setPixel(self, dx, dy):
        """setPixel(self, dx, dy)"""
        return _ImageFilters.swig_imageFilter_RGBAImage_setPixel(self, dx, dy)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_imageFilter_RGBAImage(self)
        return weakref_proxy(self)
swig_imageFilter_RGBAImage_swigregister = _ImageFilters.swig_imageFilter_RGBAImage_swigregister
swig_imageFilter_RGBAImage_swigregister(swig_imageFilter_RGBAImage)

class swig_imageFilter_ComplexImage(_object):
    """Proxy of C++ vpl::img::CImageFilter<(vpl::img::CImage<(vpl::img::tComplexPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_imageFilter_ComplexImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_imageFilter_ComplexImage, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_imageFilter_ComplexImage_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_imageFilter_ComplexImage"""
        if self.__class__ == swig_imageFilter_ComplexImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_imageFilter_ComplexImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_imageFilter_ComplexImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_imageFilter_ComplexImage___call__(self, SrcImage, DstImage)


    def getDX(self):
        """getDX(self) -> double"""
        return _ImageFilters.swig_imageFilter_ComplexImage_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _ImageFilters.swig_imageFilter_ComplexImage_getDY(self)


    def setPixel(self, dx, dy):
        """setPixel(self, dx, dy)"""
        return _ImageFilters.swig_imageFilter_ComplexImage_setPixel(self, dx, dy)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_imageFilter_ComplexImage(self)
        return weakref_proxy(self)
swig_imageFilter_ComplexImage_swigregister = _ImageFilters.swig_imageFilter_ComplexImage_swigregister
swig_imageFilter_ComplexImage_swigregister(swig_imageFilter_ComplexImage)

class swig_separableImageFilter_Image8(swig_imageFilter_Image8):
    """Proxy of C++ vpl::img::CSeparableImageFilter<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableImageFilter_Image8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableImageFilter_Image8, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableImageFilter_Image8"""
        if self.__class__ == swig_separableImageFilter_Image8:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_separableImageFilter_Image8(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_separableImageFilter_Image8
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_separableImageFilter_Image8(self)
        return weakref_proxy(self)
swig_separableImageFilter_Image8_swigregister = _ImageFilters.swig_separableImageFilter_Image8_swigregister
swig_separableImageFilter_Image8_swigregister(swig_separableImageFilter_Image8)

class swig_separableImageFilter_Image16(swig_imageFilter_Image16):
    """Proxy of C++ vpl::img::CSeparableImageFilter<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableImageFilter_Image16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableImageFilter_Image16, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableImageFilter_Image16"""
        if self.__class__ == swig_separableImageFilter_Image16:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_separableImageFilter_Image16(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_separableImageFilter_Image16
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_separableImageFilter_Image16(self)
        return weakref_proxy(self)
swig_separableImageFilter_Image16_swigregister = _ImageFilters.swig_separableImageFilter_Image16_swigregister
swig_separableImageFilter_Image16_swigregister(swig_separableImageFilter_Image16)

class swig_separableImageFilter_Image32(swig_imageFilter_Image32):
    """Proxy of C++ vpl::img::CSeparableImageFilter<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableImageFilter_Image32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableImageFilter_Image32, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableImageFilter_Image32"""
        if self.__class__ == swig_separableImageFilter_Image32:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_separableImageFilter_Image32(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_separableImageFilter_Image32
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_separableImageFilter_Image32(self)
        return weakref_proxy(self)
swig_separableImageFilter_Image32_swigregister = _ImageFilters.swig_separableImageFilter_Image32_swigregister
swig_separableImageFilter_Image32_swigregister(swig_separableImageFilter_Image32)

class swig_separableImageFilter_FImage(swig_imageFilter_FImage):
    """Proxy of C++ vpl::img::CSeparableImageFilter<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_FImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableImageFilter_FImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_FImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableImageFilter_FImage, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableImageFilter_FImage"""
        if self.__class__ == swig_separableImageFilter_FImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_separableImageFilter_FImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_separableImageFilter_FImage
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_separableImageFilter_FImage(self)
        return weakref_proxy(self)
swig_separableImageFilter_FImage_swigregister = _ImageFilters.swig_separableImageFilter_FImage_swigregister
swig_separableImageFilter_FImage_swigregister(swig_separableImageFilter_FImage)

class swig_separableImageFilter_DImage(swig_imageFilter_DImage):
    """Proxy of C++ vpl::img::CSeparableImageFilter<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_DImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableImageFilter_DImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_DImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableImageFilter_DImage, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableImageFilter_DImage"""
        if self.__class__ == swig_separableImageFilter_DImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_separableImageFilter_DImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_separableImageFilter_DImage
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_separableImageFilter_DImage(self)
        return weakref_proxy(self)
swig_separableImageFilter_DImage_swigregister = _ImageFilters.swig_separableImageFilter_DImage_swigregister
swig_separableImageFilter_DImage_swigregister(swig_separableImageFilter_DImage)

class swig_separableImageFilter_RGBAImage(swig_imageFilter_RGBAImage):
    """Proxy of C++ vpl::img::CSeparableImageFilter<(vpl::img::CImage<(vpl::img::tRGBAPixel)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_RGBAImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableImageFilter_RGBAImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_RGBAImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableImageFilter_RGBAImage, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableImageFilter_RGBAImage"""
        if self.__class__ == swig_separableImageFilter_RGBAImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_separableImageFilter_RGBAImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_separableImageFilter_RGBAImage
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_separableImageFilter_RGBAImage(self)
        return weakref_proxy(self)
swig_separableImageFilter_RGBAImage_swigregister = _ImageFilters.swig_separableImageFilter_RGBAImage_swigregister
swig_separableImageFilter_RGBAImage_swigregister(swig_separableImageFilter_RGBAImage)

class swig_separableImageFilter_ComplexImage(swig_imageFilter_ComplexImage):
    """Proxy of C++ vpl::img::CSeparableImageFilter<(vpl::img::CImage<(vpl::img::tComplexPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_ComplexImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableImageFilter_ComplexImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_ComplexImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableImageFilter_ComplexImage, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableImageFilter_ComplexImage"""
        if self.__class__ == swig_separableImageFilter_ComplexImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_separableImageFilter_ComplexImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_separableImageFilter_ComplexImage
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_separableImageFilter_ComplexImage(self)
        return weakref_proxy(self)
swig_separableImageFilter_ComplexImage_swigregister = _ImageFilters.swig_separableImageFilter_ComplexImage_swigregister
swig_separableImageFilter_ComplexImage_swigregister(swig_separableImageFilter_ComplexImage)

class CAvg3Filter_Image8(swig_imageFilter_Image8):
    """Proxy of C++ vpl::img::CAvg3Filter<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg3Filter_Image8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg3Filter_Image8, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg3Filter_Image8_DENOM

    def __init__(self):
        """__init__(self) -> CAvg3Filter_Image8"""
        if self.__class__ == CAvg3Filter_Image8:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg3Filter_Image8(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg3Filter_Image8___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg3Filter< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg3Filter_Image8_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg3Filter_Image8_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg3Filter_Image8(self)
        return weakref_proxy(self)
CAvg3Filter_Image8_swigregister = _ImageFilters.CAvg3Filter_Image8_swigregister
CAvg3Filter_Image8_swigregister(CAvg3Filter_Image8)

class CAvg3Filter_Image16(swig_imageFilter_Image16):
    """Proxy of C++ vpl::img::CAvg3Filter<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg3Filter_Image16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg3Filter_Image16, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg3Filter_Image16_DENOM

    def __init__(self):
        """__init__(self) -> CAvg3Filter_Image16"""
        if self.__class__ == CAvg3Filter_Image16:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg3Filter_Image16(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg3Filter_Image16___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg3Filter< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg3Filter_Image16_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg3Filter_Image16_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg3Filter_Image16(self)
        return weakref_proxy(self)
CAvg3Filter_Image16_swigregister = _ImageFilters.CAvg3Filter_Image16_swigregister
CAvg3Filter_Image16_swigregister(CAvg3Filter_Image16)

class CAvg3Filter_Image32(swig_imageFilter_Image32):
    """Proxy of C++ vpl::img::CAvg3Filter<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg3Filter_Image32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg3Filter_Image32, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg3Filter_Image32_DENOM

    def __init__(self):
        """__init__(self) -> CAvg3Filter_Image32"""
        if self.__class__ == CAvg3Filter_Image32:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg3Filter_Image32(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg3Filter_Image32___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg3Filter< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg3Filter_Image32_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg3Filter_Image32_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg3Filter_Image32(self)
        return weakref_proxy(self)
CAvg3Filter_Image32_swigregister = _ImageFilters.CAvg3Filter_Image32_swigregister
CAvg3Filter_Image32_swigregister(CAvg3Filter_Image32)

class CAvg3Filter_FImage(swig_imageFilter_FImage):
    """Proxy of C++ vpl::img::CAvg3Filter<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_FImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg3Filter_FImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_FImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg3Filter_FImage, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg3Filter_FImage_DENOM

    def __init__(self):
        """__init__(self) -> CAvg3Filter_FImage"""
        if self.__class__ == CAvg3Filter_FImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg3Filter_FImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg3Filter_FImage___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg3Filter< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg3Filter_FImage_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg3Filter_FImage_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg3Filter_FImage(self)
        return weakref_proxy(self)
CAvg3Filter_FImage_swigregister = _ImageFilters.CAvg3Filter_FImage_swigregister
CAvg3Filter_FImage_swigregister(CAvg3Filter_FImage)

class CAvg3Filter_DImage(swig_imageFilter_DImage):
    """Proxy of C++ vpl::img::CAvg3Filter<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_DImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg3Filter_DImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_DImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg3Filter_DImage, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg3Filter_DImage_DENOM

    def __init__(self):
        """__init__(self) -> CAvg3Filter_DImage"""
        if self.__class__ == CAvg3Filter_DImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg3Filter_DImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg3Filter_DImage___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg3Filter< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg3Filter_DImage_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg3Filter_DImage_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg3Filter_DImage(self)
        return weakref_proxy(self)
CAvg3Filter_DImage_swigregister = _ImageFilters.CAvg3Filter_DImage_swigregister
CAvg3Filter_DImage_swigregister(CAvg3Filter_DImage)

class CAvg5Filter_Image8(swig_imageFilter_Image8):
    """Proxy of C++ vpl::img::CAvg5Filter<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg5Filter_Image8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg5Filter_Image8, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg5Filter_Image8_DENOM

    def __init__(self):
        """__init__(self) -> CAvg5Filter_Image8"""
        if self.__class__ == CAvg5Filter_Image8:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg5Filter_Image8(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg5Filter_Image8___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg5Filter< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg5Filter_Image8_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg5Filter_Image8_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg5Filter_Image8(self)
        return weakref_proxy(self)
CAvg5Filter_Image8_swigregister = _ImageFilters.CAvg5Filter_Image8_swigregister
CAvg5Filter_Image8_swigregister(CAvg5Filter_Image8)

class CAvg5Filter_Image16(swig_imageFilter_Image16):
    """Proxy of C++ vpl::img::CAvg5Filter<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg5Filter_Image16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg5Filter_Image16, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg5Filter_Image16_DENOM

    def __init__(self):
        """__init__(self) -> CAvg5Filter_Image16"""
        if self.__class__ == CAvg5Filter_Image16:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg5Filter_Image16(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg5Filter_Image16___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg5Filter< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg5Filter_Image16_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg5Filter_Image16_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg5Filter_Image16(self)
        return weakref_proxy(self)
CAvg5Filter_Image16_swigregister = _ImageFilters.CAvg5Filter_Image16_swigregister
CAvg5Filter_Image16_swigregister(CAvg5Filter_Image16)

class CAvg5Filter_Image32(swig_imageFilter_Image32):
    """Proxy of C++ vpl::img::CAvg5Filter<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg5Filter_Image32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg5Filter_Image32, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg5Filter_Image32_DENOM

    def __init__(self):
        """__init__(self) -> CAvg5Filter_Image32"""
        if self.__class__ == CAvg5Filter_Image32:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg5Filter_Image32(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg5Filter_Image32___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg5Filter< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg5Filter_Image32_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg5Filter_Image32_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg5Filter_Image32(self)
        return weakref_proxy(self)
CAvg5Filter_Image32_swigregister = _ImageFilters.CAvg5Filter_Image32_swigregister
CAvg5Filter_Image32_swigregister(CAvg5Filter_Image32)

class CAvg5Filter_FImage(swig_imageFilter_FImage):
    """Proxy of C++ vpl::img::CAvg5Filter<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_FImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg5Filter_FImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_FImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg5Filter_FImage, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg5Filter_FImage_DENOM

    def __init__(self):
        """__init__(self) -> CAvg5Filter_FImage"""
        if self.__class__ == CAvg5Filter_FImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg5Filter_FImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg5Filter_FImage___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg5Filter< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg5Filter_FImage_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg5Filter_FImage_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg5Filter_FImage(self)
        return weakref_proxy(self)
CAvg5Filter_FImage_swigregister = _ImageFilters.CAvg5Filter_FImage_swigregister
CAvg5Filter_FImage_swigregister(CAvg5Filter_FImage)

class CAvg5Filter_DImage(swig_imageFilter_DImage):
    """Proxy of C++ vpl::img::CAvg5Filter<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_DImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg5Filter_DImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_DImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg5Filter_DImage, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg5Filter_DImage_DENOM

    def __init__(self):
        """__init__(self) -> CAvg5Filter_DImage"""
        if self.__class__ == CAvg5Filter_DImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg5Filter_DImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg5Filter_DImage___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg5Filter< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg5Filter_DImage_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg5Filter_DImage_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg5Filter_DImage(self)
        return weakref_proxy(self)
CAvg5Filter_DImage_swigregister = _ImageFilters.CAvg5Filter_DImage_swigregister
CAvg5Filter_DImage_swigregister(CAvg5Filter_DImage)

class CAvg7Filter_Image8(swig_imageFilter_Image8):
    """Proxy of C++ vpl::img::CAvg7Filter<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg7Filter_Image8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg7Filter_Image8, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg7Filter_Image8_DENOM

    def __init__(self):
        """__init__(self) -> CAvg7Filter_Image8"""
        if self.__class__ == CAvg7Filter_Image8:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg7Filter_Image8(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg7Filter_Image8___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg7Filter< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg7Filter_Image8_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg7Filter_Image8_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg7Filter_Image8(self)
        return weakref_proxy(self)
CAvg7Filter_Image8_swigregister = _ImageFilters.CAvg7Filter_Image8_swigregister
CAvg7Filter_Image8_swigregister(CAvg7Filter_Image8)

class CAvg7Filter_Image16(swig_imageFilter_Image16):
    """Proxy of C++ vpl::img::CAvg7Filter<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg7Filter_Image16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg7Filter_Image16, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg7Filter_Image16_DENOM

    def __init__(self):
        """__init__(self) -> CAvg7Filter_Image16"""
        if self.__class__ == CAvg7Filter_Image16:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg7Filter_Image16(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg7Filter_Image16___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg7Filter< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg7Filter_Image16_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg7Filter_Image16_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg7Filter_Image16(self)
        return weakref_proxy(self)
CAvg7Filter_Image16_swigregister = _ImageFilters.CAvg7Filter_Image16_swigregister
CAvg7Filter_Image16_swigregister(CAvg7Filter_Image16)

class CAvg7Filter_Image32(swig_imageFilter_Image32):
    """Proxy of C++ vpl::img::CAvg7Filter<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_Image32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg7Filter_Image32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_Image32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg7Filter_Image32, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg7Filter_Image32_DENOM

    def __init__(self):
        """__init__(self) -> CAvg7Filter_Image32"""
        if self.__class__ == CAvg7Filter_Image32:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg7Filter_Image32(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg7Filter_Image32___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg7Filter< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg7Filter_Image32_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg7Filter_Image32_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg7Filter_Image32(self)
        return weakref_proxy(self)
CAvg7Filter_Image32_swigregister = _ImageFilters.CAvg7Filter_Image32_swigregister
CAvg7Filter_Image32_swigregister(CAvg7Filter_Image32)

class CAvg7Filter_FImage(swig_imageFilter_FImage):
    """Proxy of C++ vpl::img::CAvg7Filter<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_FImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg7Filter_FImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_FImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg7Filter_FImage, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg7Filter_FImage_DENOM

    def __init__(self):
        """__init__(self) -> CAvg7Filter_FImage"""
        if self.__class__ == CAvg7Filter_FImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg7Filter_FImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg7Filter_FImage___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg7Filter< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg7Filter_FImage_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg7Filter_FImage_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg7Filter_FImage(self)
        return weakref_proxy(self)
CAvg7Filter_FImage_swigregister = _ImageFilters.CAvg7Filter_FImage_swigregister
CAvg7Filter_FImage_swigregister(CAvg7Filter_FImage)

class CAvg7Filter_DImage(swig_imageFilter_DImage):
    """Proxy of C++ vpl::img::CAvg7Filter<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_imageFilter_DImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAvg7Filter_DImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_imageFilter_DImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAvg7Filter_DImage, name)
    __repr__ = _swig_repr
    DENOM = _ImageFilters.CAvg7Filter_DImage_DENOM

    def __init__(self):
        """__init__(self) -> CAvg7Filter_DImage"""
        if self.__class__ == CAvg7Filter_DImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CAvg7Filter_DImage(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CAvg7Filter_DImage___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CAvg7Filter< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CAvg7Filter_DImage_getResponse(self, SrcImage, x, y)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CAvg7Filter_DImage_getSize(self)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CAvg7Filter_DImage(self)
        return weakref_proxy(self)
CAvg7Filter_DImage_swigregister = _ImageFilters.CAvg7Filter_DImage_swigregister
CAvg7Filter_DImage_swigregister(CAvg7Filter_DImage)

class CGaussFilter_Image8(swig_separableImageFilter_Image8):
    """Proxy of C++ vpl::img::CGaussFilter<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableImageFilter_Image8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGaussFilter_Image8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableImageFilter_Image8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGaussFilter_Image8, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CGaussFilter_Image8
        __init__(self, Size) -> CGaussFilter_Image8
        """
        if self.__class__ == CGaussFilter_Image8:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CGaussFilter_Image8(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CGaussFilter_Image8
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CGaussFilter_Image8___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CGaussFilter< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CGaussFilter_Image8_getResponse(self, SrcImage, x, y)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CGaussFilter_Image8_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_Image8_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _ImageFilters.CGaussFilter_Image8_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CGaussFilter_Image8_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_Image8_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _ImageFilters.CGaussFilter_Image8_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dSigma):
        """getGaussianFuncValue(dX, dY, dSigma) -> double"""
        return _ImageFilters.CGaussFilter_Image8_getGaussianFuncValue(dX, dY, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CGaussFilter_Image8(self)
        return weakref_proxy(self)
CGaussFilter_Image8_swigregister = _ImageFilters.CGaussFilter_Image8_swigregister
CGaussFilter_Image8_swigregister(CGaussFilter_Image8)

def CGaussFilter_Image8_sigma2Size(dSigma):
    """CGaussFilter_Image8_sigma2Size(dSigma) -> vpl::tSize"""
    return _ImageFilters.CGaussFilter_Image8_sigma2Size(dSigma)

def CGaussFilter_Image8_size2Sigma(Size):
    """CGaussFilter_Image8_size2Sigma(Size) -> double"""
    return _ImageFilters.CGaussFilter_Image8_size2Sigma(Size)

def CGaussFilter_Image8_getGaussianFuncValue(dX, dY, dSigma):
    """CGaussFilter_Image8_getGaussianFuncValue(dX, dY, dSigma) -> double"""
    return _ImageFilters.CGaussFilter_Image8_getGaussianFuncValue(dX, dY, dSigma)

class CGaussFilter_Image16(swig_separableImageFilter_Image16):
    """Proxy of C++ vpl::img::CGaussFilter<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableImageFilter_Image16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGaussFilter_Image16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableImageFilter_Image16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGaussFilter_Image16, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CGaussFilter_Image16
        __init__(self, Size) -> CGaussFilter_Image16
        """
        if self.__class__ == CGaussFilter_Image16:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CGaussFilter_Image16(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CGaussFilter_Image16
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CGaussFilter_Image16___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CGaussFilter< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CGaussFilter_Image16_getResponse(self, SrcImage, x, y)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CGaussFilter_Image16_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_Image16_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _ImageFilters.CGaussFilter_Image16_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CGaussFilter_Image16_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_Image16_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _ImageFilters.CGaussFilter_Image16_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dSigma):
        """getGaussianFuncValue(dX, dY, dSigma) -> double"""
        return _ImageFilters.CGaussFilter_Image16_getGaussianFuncValue(dX, dY, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CGaussFilter_Image16(self)
        return weakref_proxy(self)
CGaussFilter_Image16_swigregister = _ImageFilters.CGaussFilter_Image16_swigregister
CGaussFilter_Image16_swigregister(CGaussFilter_Image16)

def CGaussFilter_Image16_sigma2Size(dSigma):
    """CGaussFilter_Image16_sigma2Size(dSigma) -> vpl::tSize"""
    return _ImageFilters.CGaussFilter_Image16_sigma2Size(dSigma)

def CGaussFilter_Image16_size2Sigma(Size):
    """CGaussFilter_Image16_size2Sigma(Size) -> double"""
    return _ImageFilters.CGaussFilter_Image16_size2Sigma(Size)

def CGaussFilter_Image16_getGaussianFuncValue(dX, dY, dSigma):
    """CGaussFilter_Image16_getGaussianFuncValue(dX, dY, dSigma) -> double"""
    return _ImageFilters.CGaussFilter_Image16_getGaussianFuncValue(dX, dY, dSigma)

class CGaussFilter_Image32(swig_separableImageFilter_Image32):
    """Proxy of C++ vpl::img::CGaussFilter<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableImageFilter_Image32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGaussFilter_Image32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableImageFilter_Image32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGaussFilter_Image32, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CGaussFilter_Image32
        __init__(self, Size) -> CGaussFilter_Image32
        """
        if self.__class__ == CGaussFilter_Image32:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CGaussFilter_Image32(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CGaussFilter_Image32
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CGaussFilter_Image32___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CGaussFilter< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CGaussFilter_Image32_getResponse(self, SrcImage, x, y)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CGaussFilter_Image32_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_Image32_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _ImageFilters.CGaussFilter_Image32_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CGaussFilter_Image32_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_Image32_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _ImageFilters.CGaussFilter_Image32_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dSigma):
        """getGaussianFuncValue(dX, dY, dSigma) -> double"""
        return _ImageFilters.CGaussFilter_Image32_getGaussianFuncValue(dX, dY, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CGaussFilter_Image32(self)
        return weakref_proxy(self)
CGaussFilter_Image32_swigregister = _ImageFilters.CGaussFilter_Image32_swigregister
CGaussFilter_Image32_swigregister(CGaussFilter_Image32)

def CGaussFilter_Image32_sigma2Size(dSigma):
    """CGaussFilter_Image32_sigma2Size(dSigma) -> vpl::tSize"""
    return _ImageFilters.CGaussFilter_Image32_sigma2Size(dSigma)

def CGaussFilter_Image32_size2Sigma(Size):
    """CGaussFilter_Image32_size2Sigma(Size) -> double"""
    return _ImageFilters.CGaussFilter_Image32_size2Sigma(Size)

def CGaussFilter_Image32_getGaussianFuncValue(dX, dY, dSigma):
    """CGaussFilter_Image32_getGaussianFuncValue(dX, dY, dSigma) -> double"""
    return _ImageFilters.CGaussFilter_Image32_getGaussianFuncValue(dX, dY, dSigma)

class CGaussFilter_FImage(swig_separableImageFilter_FImage):
    """Proxy of C++ vpl::img::CGaussFilter<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableImageFilter_FImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGaussFilter_FImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableImageFilter_FImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGaussFilter_FImage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CGaussFilter_FImage
        __init__(self, Size) -> CGaussFilter_FImage
        """
        if self.__class__ == CGaussFilter_FImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CGaussFilter_FImage(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CGaussFilter_FImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CGaussFilter_FImage___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CGaussFilter< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CGaussFilter_FImage_getResponse(self, SrcImage, x, y)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CGaussFilter_FImage_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_FImage_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _ImageFilters.CGaussFilter_FImage_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CGaussFilter_FImage_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_FImage_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _ImageFilters.CGaussFilter_FImage_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dSigma):
        """getGaussianFuncValue(dX, dY, dSigma) -> double"""
        return _ImageFilters.CGaussFilter_FImage_getGaussianFuncValue(dX, dY, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CGaussFilter_FImage(self)
        return weakref_proxy(self)
CGaussFilter_FImage_swigregister = _ImageFilters.CGaussFilter_FImage_swigregister
CGaussFilter_FImage_swigregister(CGaussFilter_FImage)

def CGaussFilter_FImage_sigma2Size(dSigma):
    """CGaussFilter_FImage_sigma2Size(dSigma) -> vpl::tSize"""
    return _ImageFilters.CGaussFilter_FImage_sigma2Size(dSigma)

def CGaussFilter_FImage_size2Sigma(Size):
    """CGaussFilter_FImage_size2Sigma(Size) -> double"""
    return _ImageFilters.CGaussFilter_FImage_size2Sigma(Size)

def CGaussFilter_FImage_getGaussianFuncValue(dX, dY, dSigma):
    """CGaussFilter_FImage_getGaussianFuncValue(dX, dY, dSigma) -> double"""
    return _ImageFilters.CGaussFilter_FImage_getGaussianFuncValue(dX, dY, dSigma)

class CGaussFilter_DImage(swig_separableImageFilter_DImage):
    """Proxy of C++ vpl::img::CGaussFilter<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableImageFilter_DImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CGaussFilter_DImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableImageFilter_DImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CGaussFilter_DImage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CGaussFilter_DImage
        __init__(self, Size) -> CGaussFilter_DImage
        """
        if self.__class__ == CGaussFilter_DImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CGaussFilter_DImage(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CGaussFilter_DImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CGaussFilter_DImage___call__(self, SrcImage, DstImage)


    def getResponse(self, SrcImage, x, y):
        """getResponse(self, SrcImage, x, y) -> vpl::img::CGaussFilter< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel"""
        return _ImageFilters.CGaussFilter_DImage_getResponse(self, SrcImage, x, y)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CGaussFilter_DImage_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_DImage_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _ImageFilters.CGaussFilter_DImage_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CGaussFilter_DImage_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _ImageFilters.CGaussFilter_DImage_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _ImageFilters.CGaussFilter_DImage_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dSigma):
        """getGaussianFuncValue(dX, dY, dSigma) -> double"""
        return _ImageFilters.CGaussFilter_DImage_getGaussianFuncValue(dX, dY, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CGaussFilter_DImage(self)
        return weakref_proxy(self)
CGaussFilter_DImage_swigregister = _ImageFilters.CGaussFilter_DImage_swigregister
CGaussFilter_DImage_swigregister(CGaussFilter_DImage)

def CGaussFilter_DImage_sigma2Size(dSigma):
    """CGaussFilter_DImage_sigma2Size(dSigma) -> vpl::tSize"""
    return _ImageFilters.CGaussFilter_DImage_sigma2Size(dSigma)

def CGaussFilter_DImage_size2Sigma(Size):
    """CGaussFilter_DImage_size2Sigma(Size) -> double"""
    return _ImageFilters.CGaussFilter_DImage_size2Sigma(Size)

def CGaussFilter_DImage_getGaussianFuncValue(dX, dY, dSigma):
    """CGaussFilter_DImage_getGaussianFuncValue(dX, dY, dSigma) -> double"""
    return _ImageFilters.CGaussFilter_DImage_getGaussianFuncValue(dX, dY, dSigma)

class swig_base_CImage8EdgeDetector(_object):
    """Proxy of C++ vpl::img::CImageEdgeDetector<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_CImage8EdgeDetector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_CImage8EdgeDetector, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_base_CImage8EdgeDetector_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_base_CImage8EdgeDetector"""
        if self.__class__ == swig_base_CImage8EdgeDetector:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_base_CImage8EdgeDetector(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_base_CImage8EdgeDetector
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_base_CImage8EdgeDetector___call__(self, SrcImage, DstImage)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_base_CImage8EdgeDetector(self)
        return weakref_proxy(self)
swig_base_CImage8EdgeDetector_swigregister = _ImageFilters.swig_base_CImage8EdgeDetector_swigregister
swig_base_CImage8EdgeDetector_swigregister(swig_base_CImage8EdgeDetector)

class swig_base_CImage16EdgeDetector(_object):
    """Proxy of C++ vpl::img::CImageEdgeDetector<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_CImage16EdgeDetector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_CImage16EdgeDetector, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_base_CImage16EdgeDetector_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_base_CImage16EdgeDetector"""
        if self.__class__ == swig_base_CImage16EdgeDetector:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_base_CImage16EdgeDetector(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_base_CImage16EdgeDetector
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_base_CImage16EdgeDetector___call__(self, SrcImage, DstImage)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_base_CImage16EdgeDetector(self)
        return weakref_proxy(self)
swig_base_CImage16EdgeDetector_swigregister = _ImageFilters.swig_base_CImage16EdgeDetector_swigregister
swig_base_CImage16EdgeDetector_swigregister(swig_base_CImage16EdgeDetector)

class swig_base_CImage32EdgeDetector(_object):
    """Proxy of C++ vpl::img::CImageEdgeDetector<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_CImage32EdgeDetector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_CImage32EdgeDetector, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_base_CImage32EdgeDetector_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_base_CImage32EdgeDetector"""
        if self.__class__ == swig_base_CImage32EdgeDetector:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_base_CImage32EdgeDetector(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_base_CImage32EdgeDetector
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_base_CImage32EdgeDetector___call__(self, SrcImage, DstImage)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_base_CImage32EdgeDetector(self)
        return weakref_proxy(self)
swig_base_CImage32EdgeDetector_swigregister = _ImageFilters.swig_base_CImage32EdgeDetector_swigregister
swig_base_CImage32EdgeDetector_swigregister(swig_base_CImage32EdgeDetector)

class swig_base_CFImageEdgeDetector(_object):
    """Proxy of C++ vpl::img::CImageEdgeDetector<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_CFImageEdgeDetector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_CFImageEdgeDetector, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_base_CFImageEdgeDetector_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_base_CFImageEdgeDetector"""
        if self.__class__ == swig_base_CFImageEdgeDetector:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_base_CFImageEdgeDetector(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_base_CFImageEdgeDetector
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_base_CFImageEdgeDetector___call__(self, SrcImage, DstImage)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_base_CFImageEdgeDetector(self)
        return weakref_proxy(self)
swig_base_CFImageEdgeDetector_swigregister = _ImageFilters.swig_base_CFImageEdgeDetector_swigregister
swig_base_CFImageEdgeDetector_swigregister(swig_base_CFImageEdgeDetector)

class swig_base_CDImageEdgeDetector(_object):
    """Proxy of C++ vpl::img::CImageEdgeDetector<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_CDImageEdgeDetector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_CDImageEdgeDetector, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_IMAGE = _ImageFilters.swig_base_CDImageEdgeDetector_TEMPLATE_PARAMETER_IS_NOT_IMAGE

    def __init__(self):
        """__init__(self) -> swig_base_CDImageEdgeDetector"""
        if self.__class__ == swig_base_CDImageEdgeDetector:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_swig_base_CDImageEdgeDetector(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_swig_base_CDImageEdgeDetector
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.swig_base_CDImageEdgeDetector___call__(self, SrcImage, DstImage)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_swig_base_CDImageEdgeDetector(self)
        return weakref_proxy(self)
swig_base_CDImageEdgeDetector_swigregister = _ImageFilters.swig_base_CDImageEdgeDetector_swigregister
swig_base_CDImageEdgeDetector_swigregister(swig_base_CDImageEdgeDetector)

class CCanny_Image8(swig_base_CImage8EdgeDetector):
    """Proxy of C++ vpl::img::CCanny<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CImage8EdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_Image8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CImage8EdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_Image8, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dT1, dT2):
        """__init__(self, dSigma, dT1, dT2) -> CCanny_Image8"""
        if self.__class__ == CCanny_Image8:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CCanny_Image8(_self, dSigma, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CCanny_Image8
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CCanny_Image8___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CCanny_Image8_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CCanny_Image8_setSigma(self, dSigma)


    def getThresholds(self, dT1, dT2):
        """getThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_Image8_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """setThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_Image8_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CCanny_Image8(self)
        return weakref_proxy(self)
CCanny_Image8_swigregister = _ImageFilters.CCanny_Image8_swigregister
CCanny_Image8_swigregister(CCanny_Image8)

class CCanny_Image16(swig_base_CImage16EdgeDetector):
    """Proxy of C++ vpl::img::CCanny<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CImage16EdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_Image16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CImage16EdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_Image16, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dT1, dT2):
        """__init__(self, dSigma, dT1, dT2) -> CCanny_Image16"""
        if self.__class__ == CCanny_Image16:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CCanny_Image16(_self, dSigma, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CCanny_Image16
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CCanny_Image16___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CCanny_Image16_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CCanny_Image16_setSigma(self, dSigma)


    def getThresholds(self, dT1, dT2):
        """getThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_Image16_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """setThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_Image16_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CCanny_Image16(self)
        return weakref_proxy(self)
CCanny_Image16_swigregister = _ImageFilters.CCanny_Image16_swigregister
CCanny_Image16_swigregister(CCanny_Image16)

class CCanny_Image32(swig_base_CImage32EdgeDetector):
    """Proxy of C++ vpl::img::CCanny<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CImage32EdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_Image32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CImage32EdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_Image32, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dT1, dT2):
        """__init__(self, dSigma, dT1, dT2) -> CCanny_Image32"""
        if self.__class__ == CCanny_Image32:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CCanny_Image32(_self, dSigma, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CCanny_Image32
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CCanny_Image32___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CCanny_Image32_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CCanny_Image32_setSigma(self, dSigma)


    def getThresholds(self, dT1, dT2):
        """getThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_Image32_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """setThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_Image32_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CCanny_Image32(self)
        return weakref_proxy(self)
CCanny_Image32_swigregister = _ImageFilters.CCanny_Image32_swigregister
CCanny_Image32_swigregister(CCanny_Image32)

class CCanny_FImage(swig_base_CFImageEdgeDetector):
    """Proxy of C++ vpl::img::CCanny<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CFImageEdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_FImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CFImageEdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_FImage, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dT1, dT2):
        """__init__(self, dSigma, dT1, dT2) -> CCanny_FImage"""
        if self.__class__ == CCanny_FImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CCanny_FImage(_self, dSigma, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CCanny_FImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CCanny_FImage___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CCanny_FImage_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CCanny_FImage_setSigma(self, dSigma)


    def getThresholds(self, dT1, dT2):
        """getThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_FImage_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """setThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_FImage_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CCanny_FImage(self)
        return weakref_proxy(self)
CCanny_FImage_swigregister = _ImageFilters.CCanny_FImage_swigregister
CCanny_FImage_swigregister(CCanny_FImage)

class CCanny_DImage(swig_base_CDImageEdgeDetector):
    """Proxy of C++ vpl::img::CCanny<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CDImageEdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_DImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CDImageEdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_DImage, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dT1, dT2):
        """__init__(self, dSigma, dT1, dT2) -> CCanny_DImage"""
        if self.__class__ == CCanny_DImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CCanny_DImage(_self, dSigma, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CCanny_DImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CCanny_DImage___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CCanny_DImage_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CCanny_DImage_setSigma(self, dSigma)


    def getThresholds(self, dT1, dT2):
        """getThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_DImage_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """setThresholds(self, dT1, dT2)"""
        return _ImageFilters.CCanny_DImage_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CCanny_DImage(self)
        return weakref_proxy(self)
CCanny_DImage_swigregister = _ImageFilters.CCanny_DImage_swigregister
CCanny_DImage_swigregister(CCanny_DImage)

class CZeroCrossDetector_Image8(swig_base_CImage8EdgeDetector):
    """Proxy of C++ vpl::img::CZeroCrossDetector<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CImage8EdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CZeroCrossDetector_Image8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CImage8EdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CZeroCrossDetector_Image8, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dThreshold):
        """__init__(self, dSigma, dThreshold) -> CZeroCrossDetector_Image8"""
        if self.__class__ == CZeroCrossDetector_Image8:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CZeroCrossDetector_Image8(_self, dSigma, dThreshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CZeroCrossDetector_Image8
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CZeroCrossDetector_Image8___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_Image8_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CZeroCrossDetector_Image8_setSigma(self, dSigma)


    def getThreshold(self):
        """getThreshold(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_Image8_getThreshold(self)


    def setThreshold(self, dThreshold):
        """setThreshold(self, dThreshold)"""
        return _ImageFilters.CZeroCrossDetector_Image8_setThreshold(self, dThreshold)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CZeroCrossDetector_Image8(self)
        return weakref_proxy(self)
CZeroCrossDetector_Image8_swigregister = _ImageFilters.CZeroCrossDetector_Image8_swigregister
CZeroCrossDetector_Image8_swigregister(CZeroCrossDetector_Image8)

class CZeroCrossDetector_Image16(swig_base_CImage16EdgeDetector):
    """Proxy of C++ vpl::img::CZeroCrossDetector<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CImage16EdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CZeroCrossDetector_Image16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CImage16EdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CZeroCrossDetector_Image16, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dThreshold):
        """__init__(self, dSigma, dThreshold) -> CZeroCrossDetector_Image16"""
        if self.__class__ == CZeroCrossDetector_Image16:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CZeroCrossDetector_Image16(_self, dSigma, dThreshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CZeroCrossDetector_Image16
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CZeroCrossDetector_Image16___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_Image16_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CZeroCrossDetector_Image16_setSigma(self, dSigma)


    def getThreshold(self):
        """getThreshold(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_Image16_getThreshold(self)


    def setThreshold(self, dThreshold):
        """setThreshold(self, dThreshold)"""
        return _ImageFilters.CZeroCrossDetector_Image16_setThreshold(self, dThreshold)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CZeroCrossDetector_Image16(self)
        return weakref_proxy(self)
CZeroCrossDetector_Image16_swigregister = _ImageFilters.CZeroCrossDetector_Image16_swigregister
CZeroCrossDetector_Image16_swigregister(CZeroCrossDetector_Image16)

class CZeroCrossDetector_Image32(swig_base_CImage32EdgeDetector):
    """Proxy of C++ vpl::img::CZeroCrossDetector<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CImage32EdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CZeroCrossDetector_Image32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CImage32EdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CZeroCrossDetector_Image32, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dThreshold):
        """__init__(self, dSigma, dThreshold) -> CZeroCrossDetector_Image32"""
        if self.__class__ == CZeroCrossDetector_Image32:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CZeroCrossDetector_Image32(_self, dSigma, dThreshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CZeroCrossDetector_Image32
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CZeroCrossDetector_Image32___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_Image32_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CZeroCrossDetector_Image32_setSigma(self, dSigma)


    def getThreshold(self):
        """getThreshold(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_Image32_getThreshold(self)


    def setThreshold(self, dThreshold):
        """setThreshold(self, dThreshold)"""
        return _ImageFilters.CZeroCrossDetector_Image32_setThreshold(self, dThreshold)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CZeroCrossDetector_Image32(self)
        return weakref_proxy(self)
CZeroCrossDetector_Image32_swigregister = _ImageFilters.CZeroCrossDetector_Image32_swigregister
CZeroCrossDetector_Image32_swigregister(CZeroCrossDetector_Image32)

class CZeroCrossDetector_FImage(swig_base_CFImageEdgeDetector):
    """Proxy of C++ vpl::img::CZeroCrossDetector<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CFImageEdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CZeroCrossDetector_FImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CFImageEdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CZeroCrossDetector_FImage, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dThreshold):
        """__init__(self, dSigma, dThreshold) -> CZeroCrossDetector_FImage"""
        if self.__class__ == CZeroCrossDetector_FImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CZeroCrossDetector_FImage(_self, dSigma, dThreshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CZeroCrossDetector_FImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CZeroCrossDetector_FImage___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_FImage_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CZeroCrossDetector_FImage_setSigma(self, dSigma)


    def getThreshold(self):
        """getThreshold(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_FImage_getThreshold(self)


    def setThreshold(self, dThreshold):
        """setThreshold(self, dThreshold)"""
        return _ImageFilters.CZeroCrossDetector_FImage_setThreshold(self, dThreshold)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CZeroCrossDetector_FImage(self)
        return weakref_proxy(self)
CZeroCrossDetector_FImage_swigregister = _ImageFilters.CZeroCrossDetector_FImage_swigregister
CZeroCrossDetector_FImage_swigregister(CZeroCrossDetector_FImage)

class CZeroCrossDetector_DImage(swig_base_CDImageEdgeDetector):
    """Proxy of C++ vpl::img::CZeroCrossDetector<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_base_CDImageEdgeDetector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CZeroCrossDetector_DImage, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_base_CDImageEdgeDetector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CZeroCrossDetector_DImage, name)
    __repr__ = _swig_repr

    def __init__(self, dSigma, dThreshold):
        """__init__(self, dSigma, dThreshold) -> CZeroCrossDetector_DImage"""
        if self.__class__ == CZeroCrossDetector_DImage:
            _self = None
        else:
            _self = self
        this = _ImageFilters.new_CZeroCrossDetector_DImage(_self, dSigma, dThreshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ImageFilters.delete_CZeroCrossDetector_DImage
    __del__ = lambda self: None

    def __call__(self, SrcImage, DstImage):
        """__call__(self, SrcImage, DstImage) -> bool"""
        return _ImageFilters.CZeroCrossDetector_DImage___call__(self, SrcImage, DstImage)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_DImage_getSigma(self)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _ImageFilters.CZeroCrossDetector_DImage_setSigma(self, dSigma)


    def getThreshold(self):
        """getThreshold(self) -> double"""
        return _ImageFilters.CZeroCrossDetector_DImage_getThreshold(self)


    def setThreshold(self, dThreshold):
        """setThreshold(self, dThreshold)"""
        return _ImageFilters.CZeroCrossDetector_DImage_setThreshold(self, dThreshold)

    def __disown__(self):
        self.this.disown()
        _ImageFilters.disown_CZeroCrossDetector_DImage(self)
        return weakref_proxy(self)
CZeroCrossDetector_DImage_swigregister = _ImageFilters.CZeroCrossDetector_DImage_swigregister
CZeroCrossDetector_DImage_swigregister(CZeroCrossDetector_DImage)

# This file is compatible with both classic and new-style classes.


