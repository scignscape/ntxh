# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VolumeFunctions')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VolumeFunctions')
    _VolumeFunctions = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VolumeFunctions', [dirname(__file__)])
        except ImportError:
            import _VolumeFunctions
            return _VolumeFunctions
        if fp is not None:
            try:
                _mod = imp.load_module('_VolumeFunctions', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VolumeFunctions = swig_import_helper()
    del swig_import_helper
else:
    import _VolumeFunctions
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import VPLSwig.Volume.Volume
import VPLSwig.Core.Core
import VPLSwig.Image.Image
import VPLSwig.Core.Geometry
class CHistogram_Volume8(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_Volume8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_Volume8, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _VolumeFunctions.CHistogram_Volume8_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _VolumeFunctions.CHistogram_Volume8_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_Volume8
        __init__(self, NumOfBins, Min) -> CHistogram_Volume8
        __init__(self, NumOfBins) -> CHistogram_Volume8
        __init__(self) -> CHistogram_Volume8
        """
        this = _VolumeFunctions.new_CHistogram_Volume8(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFunctions.delete_CHistogram_Volume8
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_Volume8_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_Volume8_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_Volume8_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_Volume8_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tItem"""
        return _VolumeFunctions.CHistogram_Volume8_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_Volume8_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tVector const &"""
        return _VolumeFunctions.CHistogram_Volume8_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _VolumeFunctions.CHistogram_Volume8___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _VolumeFunctions.CHistogram_Volume8_cumulate(self)

CHistogram_Volume8_swigregister = _VolumeFunctions.CHistogram_Volume8_swigregister
CHistogram_Volume8_swigregister(CHistogram_Volume8)

class CHistogram_Volume16(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_Volume16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_Volume16, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _VolumeFunctions.CHistogram_Volume16_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _VolumeFunctions.CHistogram_Volume16_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_Volume16
        __init__(self, NumOfBins, Min) -> CHistogram_Volume16
        __init__(self, NumOfBins) -> CHistogram_Volume16
        __init__(self) -> CHistogram_Volume16
        """
        this = _VolumeFunctions.new_CHistogram_Volume16(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFunctions.delete_CHistogram_Volume16
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_Volume16_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_Volume16_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_Volume16_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_Volume16_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tItem"""
        return _VolumeFunctions.CHistogram_Volume16_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_Volume16_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tVector const &"""
        return _VolumeFunctions.CHistogram_Volume16_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _VolumeFunctions.CHistogram_Volume16___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _VolumeFunctions.CHistogram_Volume16_cumulate(self)

CHistogram_Volume16_swigregister = _VolumeFunctions.CHistogram_Volume16_swigregister
CHistogram_Volume16_swigregister(CHistogram_Volume16)

class CHistogram_Volume32(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_Volume32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_Volume32, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _VolumeFunctions.CHistogram_Volume32_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _VolumeFunctions.CHistogram_Volume32_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_Volume32
        __init__(self, NumOfBins, Min) -> CHistogram_Volume32
        __init__(self, NumOfBins) -> CHistogram_Volume32
        __init__(self) -> CHistogram_Volume32
        """
        this = _VolumeFunctions.new_CHistogram_Volume32(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFunctions.delete_CHistogram_Volume32
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_Volume32_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_Volume32_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_Volume32_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_Volume32_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tItem"""
        return _VolumeFunctions.CHistogram_Volume32_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_Volume32_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tVector const &"""
        return _VolumeFunctions.CHistogram_Volume32_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _VolumeFunctions.CHistogram_Volume32___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _VolumeFunctions.CHistogram_Volume32_cumulate(self)

CHistogram_Volume32_swigregister = _VolumeFunctions.CHistogram_Volume32_swigregister
CHistogram_Volume32_swigregister(CHistogram_Volume32)

class CHistogram_FVolume(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_FVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_FVolume, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _VolumeFunctions.CHistogram_FVolume_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _VolumeFunctions.CHistogram_FVolume_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_FVolume
        __init__(self, NumOfBins, Min) -> CHistogram_FVolume
        __init__(self, NumOfBins) -> CHistogram_FVolume
        __init__(self) -> CHistogram_FVolume
        """
        this = _VolumeFunctions.new_CHistogram_FVolume(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFunctions.delete_CHistogram_FVolume
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_FVolume_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_FVolume_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< float,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_FVolume_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CVolume< float,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_FVolume_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< float,vpl::base::CPartedData > >::tItem"""
        return _VolumeFunctions.CHistogram_FVolume_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CVolume< float,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_FVolume_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CVolume< float,vpl::base::CPartedData > >::tVector const &"""
        return _VolumeFunctions.CHistogram_FVolume_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _VolumeFunctions.CHistogram_FVolume___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _VolumeFunctions.CHistogram_FVolume_cumulate(self)

CHistogram_FVolume_swigregister = _VolumeFunctions.CHistogram_FVolume_swigregister
CHistogram_FVolume_swigregister(CHistogram_FVolume)

class CHistogram_DVolume(_object):
    """Proxy of C++ vpl::img::CHistogram<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHistogram_DVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHistogram_DVolume, name)
    __repr__ = _swig_repr
    NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER = _VolumeFunctions.CHistogram_DVolume_NO_ITERATOR_IS_DECLARED_FOR_TEMPLATE_PARAMETER
    DEFAULT_NUM_OF_BINS = _VolumeFunctions.CHistogram_DVolume_DEFAULT_NUM_OF_BINS

    def __init__(self, *args):
        """
        __init__(self, NumOfBins, Min, Max) -> CHistogram_DVolume
        __init__(self, NumOfBins, Min) -> CHistogram_DVolume
        __init__(self, NumOfBins) -> CHistogram_DVolume
        __init__(self) -> CHistogram_DVolume
        """
        this = _VolumeFunctions.new_CHistogram_DVolume(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFunctions.delete_CHistogram_DVolume
    __del__ = lambda self: None

    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_DVolume_getSize(self)


    def getIndex(self, Value):
        """getIndex(self, Value) -> vpl::tSize"""
        return _VolumeFunctions.CHistogram_DVolume_getIndex(self, Value)


    def getCount(self, Index):
        """getCount(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_DVolume_getCount(self, Index)


    def getTotalCount(self):
        """getTotalCount(self) -> vpl::img::CHistogram< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_DVolume_getTotalCount(self)


    def getLowerBound(self, Index):
        """getLowerBound(self, Index) -> vpl::img::CHistogram< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tItem"""
        return _VolumeFunctions.CHistogram_DVolume_getLowerBound(self, Index)


    def getMax(self):
        """getMax(self) -> vpl::img::CHistogram< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tBin"""
        return _VolumeFunctions.CHistogram_DVolume_getMax(self)


    def getHistogram(self):
        """getHistogram(self) -> vpl::img::CHistogram< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tVector const &"""
        return _VolumeFunctions.CHistogram_DVolume_getHistogram(self)


    def __call__(self, Container):
        """__call__(self, Container) -> bool"""
        return _VolumeFunctions.CHistogram_DVolume___call__(self, Container)


    def cumulate(self):
        """cumulate(self)"""
        return _VolumeFunctions.CHistogram_DVolume_cumulate(self)

CHistogram_DVolume_swigregister = _VolumeFunctions.CHistogram_DVolume_swigregister
CHistogram_DVolume_swigregister(CHistogram_DVolume)


def histogramEqualization_Volume8(Volume):
    """histogramEqualization_Volume8(Volume) -> bool"""
    return _VolumeFunctions.histogramEqualization_Volume8(Volume)

def histogramEqualization_Volume16(Volume):
    """histogramEqualization_Volume16(Volume) -> bool"""
    return _VolumeFunctions.histogramEqualization_Volume16(Volume)

def histogramEqualization_Volume32(Volume):
    """histogramEqualization_Volume32(Volume) -> bool"""
    return _VolumeFunctions.histogramEqualization_Volume32(Volume)

def histogramEqualization_DVolume(Volume):
    """histogramEqualization_DVolume(Volume) -> bool"""
    return _VolumeFunctions.histogramEqualization_DVolume(Volume)

def singleThresholding_Volume8(Volume):
    """singleThresholding_Volume8(Volume) -> bool"""
    return _VolumeFunctions.singleThresholding_Volume8(Volume)

def singleThresholding_Volume16(Volume):
    """singleThresholding_Volume16(Volume) -> bool"""
    return _VolumeFunctions.singleThresholding_Volume16(Volume)

def singleThresholding_Volume32(Volume):
    """singleThresholding_Volume32(Volume) -> bool"""
    return _VolumeFunctions.singleThresholding_Volume32(Volume)

def singleThresholding_DVolume(Volume):
    """singleThresholding_DVolume(Volume) -> bool"""
    return _VolumeFunctions.singleThresholding_DVolume(Volume)

def multiIterativeThresholding_Volume8(Volume, NumOfThresholds):
    """multiIterativeThresholding_Volume8(Volume, NumOfThresholds) -> bool"""
    return _VolumeFunctions.multiIterativeThresholding_Volume8(Volume, NumOfThresholds)

def multiIterativeThresholding_Volume16(Volume, NumOfThresholds):
    """multiIterativeThresholding_Volume16(Volume, NumOfThresholds) -> bool"""
    return _VolumeFunctions.multiIterativeThresholding_Volume16(Volume, NumOfThresholds)

def multiIterativeThresholding_Volume32(Volume, NumOfThresholds):
    """multiIterativeThresholding_Volume32(Volume, NumOfThresholds) -> bool"""
    return _VolumeFunctions.multiIterativeThresholding_Volume32(Volume, NumOfThresholds)

def multiIterativeThresholding_DVolume(Volume, NumOfThresholds):
    """multiIterativeThresholding_DVolume(Volume, NumOfThresholds) -> bool"""
    return _VolumeFunctions.multiIterativeThresholding_DVolume(Volume, NumOfThresholds)

def singleOtsuThresholding_Volume8(Volume):
    """singleOtsuThresholding_Volume8(Volume) -> bool"""
    return _VolumeFunctions.singleOtsuThresholding_Volume8(Volume)

def singleOtsuThresholding_Volume16(Volume):
    """singleOtsuThresholding_Volume16(Volume) -> bool"""
    return _VolumeFunctions.singleOtsuThresholding_Volume16(Volume)

def singleOtsuThresholding_Volume32(Volume):
    """singleOtsuThresholding_Volume32(Volume) -> bool"""
    return _VolumeFunctions.singleOtsuThresholding_Volume32(Volume)

def singleOtsuThresholding_DVolume(Volume):
    """singleOtsuThresholding_DVolume(Volume) -> bool"""
    return _VolumeFunctions.singleOtsuThresholding_DVolume(Volume)

def getMax_pixel8_Volume8(Volume):
    """getMax_pixel8_Volume8(Volume) -> unsigned __int8"""
    return _VolumeFunctions.getMax_pixel8_Volume8(Volume)

def getMax_pixel16_Volume16(Volume):
    """getMax_pixel16_Volume16(Volume) -> unsigned __int16"""
    return _VolumeFunctions.getMax_pixel16_Volume16(Volume)

def getMax_pixel32_Volume32(Volume):
    """getMax_pixel32_Volume32(Volume) -> unsigned __int32"""
    return _VolumeFunctions.getMax_pixel32_Volume32(Volume)

def getMax_float_FVolume(Volume):
    """getMax_float_FVolume(Volume) -> float"""
    return _VolumeFunctions.getMax_float_FVolume(Volume)

def getMax_Density_DVolume(Volume):
    """getMax_Density_DVolume(Volume) -> __int16"""
    return _VolumeFunctions.getMax_Density_DVolume(Volume)

def getMaxRGB_RGBAVolume(Volume):
    """getMaxRGB_RGBAVolume(Volume) -> CRGBPixel"""
    return _VolumeFunctions.getMaxRGB_RGBAVolume(Volume)

def getMax_Complex_ComplexVolume(Volume):
    """getMax_Complex_ComplexVolume(Volume) -> vpl::math::CComplex< float >"""
    return _VolumeFunctions.getMax_Complex_ComplexVolume(Volume)

def getMax_double_Volume8(Volume):
    """getMax_double_Volume8(Volume) -> double"""
    return _VolumeFunctions.getMax_double_Volume8(Volume)

def getMax_double_Volume16(Volume):
    """getMax_double_Volume16(Volume) -> double"""
    return _VolumeFunctions.getMax_double_Volume16(Volume)

def getMax_double_Volume32(Volume):
    """getMax_double_Volume32(Volume) -> double"""
    return _VolumeFunctions.getMax_double_Volume32(Volume)

def getMax_double_FVolume(Volume):
    """getMax_double_FVolume(Volume) -> double"""
    return _VolumeFunctions.getMax_double_FVolume(Volume)

def getMax_double_DVolume(Volume):
    """getMax_double_DVolume(Volume) -> double"""
    return _VolumeFunctions.getMax_double_DVolume(Volume)

def getMin_pixel8_Volume8(Volume):
    """getMin_pixel8_Volume8(Volume) -> unsigned __int8"""
    return _VolumeFunctions.getMin_pixel8_Volume8(Volume)

def getMin_pixel16_Volume16(Volume):
    """getMin_pixel16_Volume16(Volume) -> unsigned __int16"""
    return _VolumeFunctions.getMin_pixel16_Volume16(Volume)

def getMin_pixel32_Volume32(Volume):
    """getMin_pixel32_Volume32(Volume) -> unsigned __int32"""
    return _VolumeFunctions.getMin_pixel32_Volume32(Volume)

def getMin_float_FVolume(Volume):
    """getMin_float_FVolume(Volume) -> float"""
    return _VolumeFunctions.getMin_float_FVolume(Volume)

def getMin_Density_DVolume(Volume):
    """getMin_Density_DVolume(Volume) -> __int16"""
    return _VolumeFunctions.getMin_Density_DVolume(Volume)

def getMin_RGBA_RGBAVolume(Volume):
    """getMin_RGBA_RGBAVolume(Volume) -> CRGBPixel"""
    return _VolumeFunctions.getMin_RGBA_RGBAVolume(Volume)

def getMin_Complex_ComplexVolume(Volume):
    """getMin_Complex_ComplexVolume(Volume) -> vpl::math::CComplex< float >"""
    return _VolumeFunctions.getMin_Complex_ComplexVolume(Volume)

def getMin_double_Volume8(Volume):
    """getMin_double_Volume8(Volume) -> double"""
    return _VolumeFunctions.getMin_double_Volume8(Volume)

def getMin_double_Volume16(Volume):
    """getMin_double_Volume16(Volume) -> double"""
    return _VolumeFunctions.getMin_double_Volume16(Volume)

def getMin_double_Volume32(Volume):
    """getMin_double_Volume32(Volume) -> double"""
    return _VolumeFunctions.getMin_double_Volume32(Volume)

def getMin_double_FVolume(Volume):
    """getMin_double_FVolume(Volume) -> double"""
    return _VolumeFunctions.getMin_double_FVolume(Volume)

def getMin_double_DVolume(Volume):
    """getMin_double_DVolume(Volume) -> double"""
    return _VolumeFunctions.getMin_double_DVolume(Volume)

def getVariance_pixel8_Volume8(Volume):
    """getVariance_pixel8_Volume8(Volume) -> unsigned __int8"""
    return _VolumeFunctions.getVariance_pixel8_Volume8(Volume)

def getVariance_pixel16_Volume16(Volume):
    """getVariance_pixel16_Volume16(Volume) -> unsigned __int16"""
    return _VolumeFunctions.getVariance_pixel16_Volume16(Volume)

def getVariance_pixel32_Volume32(Volume):
    """getVariance_pixel32_Volume32(Volume) -> unsigned __int32"""
    return _VolumeFunctions.getVariance_pixel32_Volume32(Volume)

def getVariance_float_FVolume(Volume):
    """getVariance_float_FVolume(Volume) -> float"""
    return _VolumeFunctions.getVariance_float_FVolume(Volume)

def getVariance_Density_DVolume(Volume):
    """getVariance_Density_DVolume(Volume) -> __int16"""
    return _VolumeFunctions.getVariance_Density_DVolume(Volume)

def getVariance_double_Volume8(Volume):
    """getVariance_double_Volume8(Volume) -> double"""
    return _VolumeFunctions.getVariance_double_Volume8(Volume)

def getVariance_double_Volume16(Volume):
    """getVariance_double_Volume16(Volume) -> double"""
    return _VolumeFunctions.getVariance_double_Volume16(Volume)

def getVariance_double_Volume32(Volume):
    """getVariance_double_Volume32(Volume) -> double"""
    return _VolumeFunctions.getVariance_double_Volume32(Volume)

def getVariance_double_FVolume(Volume):
    """getVariance_double_FVolume(Volume) -> double"""
    return _VolumeFunctions.getVariance_double_FVolume(Volume)

def getVariance_double_DVolume(Volume):
    """getVariance_double_DVolume(Volume) -> double"""
    return _VolumeFunctions.getVariance_double_DVolume(Volume)

def getMean_pixel8_Volume8(Volume):
    """getMean_pixel8_Volume8(Volume) -> unsigned __int8"""
    return _VolumeFunctions.getMean_pixel8_Volume8(Volume)

def getMean_pixel16_Volume16(Volume):
    """getMean_pixel16_Volume16(Volume) -> unsigned __int16"""
    return _VolumeFunctions.getMean_pixel16_Volume16(Volume)

def getMean_pixel32_Volume32(Volume):
    """getMean_pixel32_Volume32(Volume) -> unsigned __int32"""
    return _VolumeFunctions.getMean_pixel32_Volume32(Volume)

def getMean_float_FVolume(Volume):
    """getMean_float_FVolume(Volume) -> float"""
    return _VolumeFunctions.getMean_float_FVolume(Volume)

def getMean_Density_DVolume(Volume):
    """getMean_Density_DVolume(Volume) -> __int16"""
    return _VolumeFunctions.getMean_Density_DVolume(Volume)

def getMean_RGBA_RGBAVolume(Volume):
    """getMean_RGBA_RGBAVolume(Volume) -> CRGBPixel"""
    return _VolumeFunctions.getMean_RGBA_RGBAVolume(Volume)

def getMean_double_Volume8(Volume):
    """getMean_double_Volume8(Volume) -> double"""
    return _VolumeFunctions.getMean_double_Volume8(Volume)

def getMean_double_Volume16(Volume):
    """getMean_double_Volume16(Volume) -> double"""
    return _VolumeFunctions.getMean_double_Volume16(Volume)

def getMean_double_Volume32(Volume):
    """getMean_double_Volume32(Volume) -> double"""
    return _VolumeFunctions.getMean_double_Volume32(Volume)

def getMean_double_FVolume(Volume):
    """getMean_double_FVolume(Volume) -> double"""
    return _VolumeFunctions.getMean_double_FVolume(Volume)

def getMean_double_DVolume(Volume):
    """getMean_double_DVolume(Volume) -> double"""
    return _VolumeFunctions.getMean_double_DVolume(Volume)

def getSumOfSquares_pixel8_Volume8(Volume):
    """getSumOfSquares_pixel8_Volume8(Volume) -> unsigned __int8"""
    return _VolumeFunctions.getSumOfSquares_pixel8_Volume8(Volume)

def getSumOfSquares_pixel16_Volume16(Volume):
    """getSumOfSquares_pixel16_Volume16(Volume) -> unsigned __int16"""
    return _VolumeFunctions.getSumOfSquares_pixel16_Volume16(Volume)

def getSumOfSquares_pixel32_Volume32(Volume):
    """getSumOfSquares_pixel32_Volume32(Volume) -> unsigned __int32"""
    return _VolumeFunctions.getSumOfSquares_pixel32_Volume32(Volume)

def getSumOfSquares_float_FVolume(Volume):
    """getSumOfSquares_float_FVolume(Volume) -> float"""
    return _VolumeFunctions.getSumOfSquares_float_FVolume(Volume)

def getSumOfSquares_Density_DVolume(Volume):
    """getSumOfSquares_Density_DVolume(Volume) -> __int16"""
    return _VolumeFunctions.getSumOfSquares_Density_DVolume(Volume)

def getSumOfSquares_Complex_ComplexVolume(Volume):
    """getSumOfSquares_Complex_ComplexVolume(Volume) -> vpl::math::CComplex< float >"""
    return _VolumeFunctions.getSumOfSquares_Complex_ComplexVolume(Volume)

def getSumOfSquares_double_Volume8(Volume):
    """getSumOfSquares_double_Volume8(Volume) -> double"""
    return _VolumeFunctions.getSumOfSquares_double_Volume8(Volume)

def getSumOfSquares_double_Volume16(Volume):
    """getSumOfSquares_double_Volume16(Volume) -> double"""
    return _VolumeFunctions.getSumOfSquares_double_Volume16(Volume)

def getSumOfSquares_double_Volume32(Volume):
    """getSumOfSquares_double_Volume32(Volume) -> double"""
    return _VolumeFunctions.getSumOfSquares_double_Volume32(Volume)

def getSumOfSquares_double_FVolume(Volume):
    """getSumOfSquares_double_FVolume(Volume) -> double"""
    return _VolumeFunctions.getSumOfSquares_double_FVolume(Volume)

def getSumOfSquares_double_DVolume(Volume):
    """getSumOfSquares_double_DVolume(Volume) -> double"""
    return _VolumeFunctions.getSumOfSquares_double_DVolume(Volume)

def getSum_pixel8_Volume8(Volume):
    """getSum_pixel8_Volume8(Volume) -> unsigned __int8"""
    return _VolumeFunctions.getSum_pixel8_Volume8(Volume)

def getSum_pixel16_Volume16(Volume):
    """getSum_pixel16_Volume16(Volume) -> unsigned __int16"""
    return _VolumeFunctions.getSum_pixel16_Volume16(Volume)

def getSum_pixel32_Volume32(Volume):
    """getSum_pixel32_Volume32(Volume) -> unsigned __int32"""
    return _VolumeFunctions.getSum_pixel32_Volume32(Volume)

def getSum_float_FVolume(Volume):
    """getSum_float_FVolume(Volume) -> float"""
    return _VolumeFunctions.getSum_float_FVolume(Volume)

def getSum_Density_DVolume(Volume):
    """getSum_Density_DVolume(Volume) -> __int16"""
    return _VolumeFunctions.getSum_Density_DVolume(Volume)

def getSum_RGBA_RGBAVolume(Volume):
    """getSum_RGBA_RGBAVolume(Volume) -> CRGBPixel"""
    return _VolumeFunctions.getSum_RGBA_RGBAVolume(Volume)

def getSum_Complex_ComplexVolume(Volume):
    """getSum_Complex_ComplexVolume(Volume) -> vpl::math::CComplex< float >"""
    return _VolumeFunctions.getSum_Complex_ComplexVolume(Volume)

def getSum_double_Volume8(Volume):
    """getSum_double_Volume8(Volume) -> double"""
    return _VolumeFunctions.getSum_double_Volume8(Volume)

def getSum_double_Volume16(Volume):
    """getSum_double_Volume16(Volume) -> double"""
    return _VolumeFunctions.getSum_double_Volume16(Volume)

def getSum_double_Volume32(Volume):
    """getSum_double_Volume32(Volume) -> double"""
    return _VolumeFunctions.getSum_double_Volume32(Volume)

def getSum_double_FVolume(Volume):
    """getSum_double_FVolume(Volume) -> double"""
    return _VolumeFunctions.getSum_double_FVolume(Volume)

def getSum_double_DVolume(Volume):
    """getSum_double_DVolume(Volume) -> double"""
    return _VolumeFunctions.getSum_double_DVolume(Volume)

def getMeanSquareError_pixel8_Volume8(Volume1, Volume2):
    """getMeanSquareError_pixel8_Volume8(Volume1, Volume2) -> unsigned __int8"""
    return _VolumeFunctions.getMeanSquareError_pixel8_Volume8(Volume1, Volume2)

def getMeanSquareError_pixel16_Volume16(Volume1, Volume2):
    """getMeanSquareError_pixel16_Volume16(Volume1, Volume2) -> unsigned __int16"""
    return _VolumeFunctions.getMeanSquareError_pixel16_Volume16(Volume1, Volume2)

def getMeanSquareError_pixel32_Volume32(Volume1, Volume2):
    """getMeanSquareError_pixel32_Volume32(Volume1, Volume2) -> unsigned __int32"""
    return _VolumeFunctions.getMeanSquareError_pixel32_Volume32(Volume1, Volume2)

def getMeanSquareError_float_FVolume(Volume1, Volume2):
    """getMeanSquareError_float_FVolume(Volume1, Volume2) -> float"""
    return _VolumeFunctions.getMeanSquareError_float_FVolume(Volume1, Volume2)

def getMeanSquareError_Density_DVolume(Volume1, Volume2):
    """getMeanSquareError_Density_DVolume(Volume1, Volume2) -> __int16"""
    return _VolumeFunctions.getMeanSquareError_Density_DVolume(Volume1, Volume2)

def getMeanSquareError_RGBA_RGBAVolume(Volume1, Volume2):
    """getMeanSquareError_RGBA_RGBAVolume(Volume1, Volume2) -> CRGBPixel"""
    return _VolumeFunctions.getMeanSquareError_RGBA_RGBAVolume(Volume1, Volume2)

def getMeanSquareError_Complex_ComplexVolume(Volume1, Volume2):
    """getMeanSquareError_Complex_ComplexVolume(Volume1, Volume2) -> vpl::math::CComplex< float >"""
    return _VolumeFunctions.getMeanSquareError_Complex_ComplexVolume(Volume1, Volume2)

def getMeanSquareError_double_Volume8(Volume1, Volume2):
    """getMeanSquareError_double_Volume8(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getMeanSquareError_double_Volume8(Volume1, Volume2)

def getMeanSquareError_double_Volume16(Volume1, Volume2):
    """getMeanSquareError_double_Volume16(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getMeanSquareError_double_Volume16(Volume1, Volume2)

def getMeanSquareError_double_Volume32(Volume1, Volume2):
    """getMeanSquareError_double_Volume32(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getMeanSquareError_double_Volume32(Volume1, Volume2)

def getMeanSquareError_double_FVolume(Volume1, Volume2):
    """getMeanSquareError_double_FVolume(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getMeanSquareError_double_FVolume(Volume1, Volume2)

def getMeanSquareError_double_DVolume(Volume1, Volume2):
    """getMeanSquareError_double_DVolume(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getMeanSquareError_double_DVolume(Volume1, Volume2)

def getProduct_pixel8_Volume8(Volume1, Volume2):
    """getProduct_pixel8_Volume8(Volume1, Volume2) -> unsigned __int8"""
    return _VolumeFunctions.getProduct_pixel8_Volume8(Volume1, Volume2)

def getProduct_pixel16_Volume16(Volume1, Volume2):
    """getProduct_pixel16_Volume16(Volume1, Volume2) -> unsigned __int16"""
    return _VolumeFunctions.getProduct_pixel16_Volume16(Volume1, Volume2)

def getProduct_pixel32_Volume32(Volume1, Volume2):
    """getProduct_pixel32_Volume32(Volume1, Volume2) -> unsigned __int32"""
    return _VolumeFunctions.getProduct_pixel32_Volume32(Volume1, Volume2)

def getProduct_float_FVolume(Volume1, Volume2):
    """getProduct_float_FVolume(Volume1, Volume2) -> float"""
    return _VolumeFunctions.getProduct_float_FVolume(Volume1, Volume2)

def getProduct_Density_DVolume(Volume1, Volume2):
    """getProduct_Density_DVolume(Volume1, Volume2) -> __int16"""
    return _VolumeFunctions.getProduct_Density_DVolume(Volume1, Volume2)

def getProduct_RGBA_RGBAVolume(Volume1, Volume2):
    """getProduct_RGBA_RGBAVolume(Volume1, Volume2) -> CRGBPixel"""
    return _VolumeFunctions.getProduct_RGBA_RGBAVolume(Volume1, Volume2)

def getProduct_Complex_ComplexVolume(Volume1, Volume2):
    """getProduct_Complex_ComplexVolume(Volume1, Volume2) -> vpl::math::CComplex< float >"""
    return _VolumeFunctions.getProduct_Complex_ComplexVolume(Volume1, Volume2)

def getProduct_double_Volume8(Volume1, Volume2):
    """getProduct_double_Volume8(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getProduct_double_Volume8(Volume1, Volume2)

def getProduct_double_Volume16(Volume1, Volume2):
    """getProduct_double_Volume16(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getProduct_double_Volume16(Volume1, Volume2)

def getProduct_double_Volume32(Volume1, Volume2):
    """getProduct_double_Volume32(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getProduct_double_Volume32(Volume1, Volume2)

def getProduct_double_FVolume(Volume1, Volume2):
    """getProduct_double_FVolume(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getProduct_double_FVolume(Volume1, Volume2)

def getProduct_double_DVolume(Volume1, Volume2):
    """getProduct_double_DVolume(Volume1, Volume2) -> double"""
    return _VolumeFunctions.getProduct_double_DVolume(Volume1, Volume2)
# This file is compatible with both classic and new-style classes.


