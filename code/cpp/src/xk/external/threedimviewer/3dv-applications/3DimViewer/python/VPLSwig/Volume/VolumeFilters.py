# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VolumeFilters')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VolumeFilters')
    _VolumeFilters = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VolumeFilters', [dirname(__file__)])
        except ImportError:
            import _VolumeFilters
            return _VolumeFilters
        if fp is not None:
            try:
                _mod = imp.load_module('_VolumeFilters', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VolumeFilters = swig_import_helper()
    del swig_import_helper
else:
    import _VolumeFilters
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import VPLSwig.Volume.Volume
import VPLSwig.Core.Core
import VPLSwig.Image.Image
import VPLSwig.Core.Geometry
class swig_volumeFilter_Volume8(_object):
    """Proxy of C++ vpl::img::CVolumeFilter<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_volumeFilter_Volume8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_volumeFilter_Volume8, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_volumeFilter_Volume8_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """__init__(self) -> swig_volumeFilter_Volume8"""
        if self.__class__ == swig_volumeFilter_Volume8:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_volumeFilter_Volume8(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_volumeFilter_Volume8
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.swig_volumeFilter_Volume8___call__(self, SrcVolume, DstVolume)


    def getDX(self):
        """getDX(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_Volume8_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_Volume8_getDY(self)


    def getDZ(self):
        """getDZ(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_Volume8_getDZ(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_Volume8_getSize(self)


    def getNeededMargin(self):
        """getNeededMargin(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_Volume8_getNeededMargin(self)


    def setVoxel(self, dx, dy, dz):
        """setVoxel(self, dx, dy, dz)"""
        return _VolumeFilters.swig_volumeFilter_Volume8_setVoxel(self, dx, dy, dz)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_volumeFilter_Volume8(self)
        return weakref_proxy(self)
swig_volumeFilter_Volume8_swigregister = _VolumeFilters.swig_volumeFilter_Volume8_swigregister
swig_volumeFilter_Volume8_swigregister(swig_volumeFilter_Volume8)

class swig_volumeFilter_Volume16(_object):
    """Proxy of C++ vpl::img::CVolumeFilter<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_volumeFilter_Volume16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_volumeFilter_Volume16, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_volumeFilter_Volume16_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """__init__(self) -> swig_volumeFilter_Volume16"""
        if self.__class__ == swig_volumeFilter_Volume16:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_volumeFilter_Volume16(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_volumeFilter_Volume16
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.swig_volumeFilter_Volume16___call__(self, SrcVolume, DstVolume)


    def getDX(self):
        """getDX(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_Volume16_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_Volume16_getDY(self)


    def getDZ(self):
        """getDZ(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_Volume16_getDZ(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_Volume16_getSize(self)


    def getNeededMargin(self):
        """getNeededMargin(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_Volume16_getNeededMargin(self)


    def setVoxel(self, dx, dy, dz):
        """setVoxel(self, dx, dy, dz)"""
        return _VolumeFilters.swig_volumeFilter_Volume16_setVoxel(self, dx, dy, dz)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_volumeFilter_Volume16(self)
        return weakref_proxy(self)
swig_volumeFilter_Volume16_swigregister = _VolumeFilters.swig_volumeFilter_Volume16_swigregister
swig_volumeFilter_Volume16_swigregister(swig_volumeFilter_Volume16)

class swig_volumeFilter_Volume32(_object):
    """Proxy of C++ vpl::img::CVolumeFilter<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_volumeFilter_Volume32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_volumeFilter_Volume32, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_volumeFilter_Volume32_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """__init__(self) -> swig_volumeFilter_Volume32"""
        if self.__class__ == swig_volumeFilter_Volume32:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_volumeFilter_Volume32(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_volumeFilter_Volume32
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.swig_volumeFilter_Volume32___call__(self, SrcVolume, DstVolume)


    def getDX(self):
        """getDX(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_Volume32_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_Volume32_getDY(self)


    def getDZ(self):
        """getDZ(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_Volume32_getDZ(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_Volume32_getSize(self)


    def getNeededMargin(self):
        """getNeededMargin(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_Volume32_getNeededMargin(self)


    def setVoxel(self, dx, dy, dz):
        """setVoxel(self, dx, dy, dz)"""
        return _VolumeFilters.swig_volumeFilter_Volume32_setVoxel(self, dx, dy, dz)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_volumeFilter_Volume32(self)
        return weakref_proxy(self)
swig_volumeFilter_Volume32_swigregister = _VolumeFilters.swig_volumeFilter_Volume32_swigregister
swig_volumeFilter_Volume32_swigregister(swig_volumeFilter_Volume32)

class swig_volumeFilter_FVolume(_object):
    """Proxy of C++ vpl::img::CVolumeFilter<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_volumeFilter_FVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_volumeFilter_FVolume, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_volumeFilter_FVolume_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """__init__(self) -> swig_volumeFilter_FVolume"""
        if self.__class__ == swig_volumeFilter_FVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_volumeFilter_FVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_volumeFilter_FVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.swig_volumeFilter_FVolume___call__(self, SrcVolume, DstVolume)


    def getDX(self):
        """getDX(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_FVolume_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_FVolume_getDY(self)


    def getDZ(self):
        """getDZ(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_FVolume_getDZ(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_FVolume_getSize(self)


    def getNeededMargin(self):
        """getNeededMargin(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_FVolume_getNeededMargin(self)


    def setVoxel(self, dx, dy, dz):
        """setVoxel(self, dx, dy, dz)"""
        return _VolumeFilters.swig_volumeFilter_FVolume_setVoxel(self, dx, dy, dz)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_volumeFilter_FVolume(self)
        return weakref_proxy(self)
swig_volumeFilter_FVolume_swigregister = _VolumeFilters.swig_volumeFilter_FVolume_swigregister
swig_volumeFilter_FVolume_swigregister(swig_volumeFilter_FVolume)

class swig_volumeFilter_DensityVolume(_object):
    """Proxy of C++ vpl::img::CVolumeFilter<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_volumeFilter_DensityVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_volumeFilter_DensityVolume, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_volumeFilter_DensityVolume_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """__init__(self) -> swig_volumeFilter_DensityVolume"""
        if self.__class__ == swig_volumeFilter_DensityVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_volumeFilter_DensityVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_volumeFilter_DensityVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.swig_volumeFilter_DensityVolume___call__(self, SrcVolume, DstVolume)


    def getDX(self):
        """getDX(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_DensityVolume_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_DensityVolume_getDY(self)


    def getDZ(self):
        """getDZ(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_DensityVolume_getDZ(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_DensityVolume_getSize(self)


    def getNeededMargin(self):
        """getNeededMargin(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_DensityVolume_getNeededMargin(self)


    def setVoxel(self, dx, dy, dz):
        """setVoxel(self, dx, dy, dz)"""
        return _VolumeFilters.swig_volumeFilter_DensityVolume_setVoxel(self, dx, dy, dz)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_volumeFilter_DensityVolume(self)
        return weakref_proxy(self)
swig_volumeFilter_DensityVolume_swigregister = _VolumeFilters.swig_volumeFilter_DensityVolume_swigregister
swig_volumeFilter_DensityVolume_swigregister(swig_volumeFilter_DensityVolume)

class swig_volumeFilter_RGBAVolume(_object):
    """Proxy of C++ vpl::img::CVolumeFilter<(vpl::img::CVolume<(vpl::img::tRGBAPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_volumeFilter_RGBAVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_volumeFilter_RGBAVolume, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_volumeFilter_RGBAVolume_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """__init__(self) -> swig_volumeFilter_RGBAVolume"""
        if self.__class__ == swig_volumeFilter_RGBAVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_volumeFilter_RGBAVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_volumeFilter_RGBAVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.swig_volumeFilter_RGBAVolume___call__(self, SrcVolume, DstVolume)


    def getDX(self):
        """getDX(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_RGBAVolume_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_RGBAVolume_getDY(self)


    def getDZ(self):
        """getDZ(self) -> double"""
        return _VolumeFilters.swig_volumeFilter_RGBAVolume_getDZ(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_RGBAVolume_getSize(self)


    def getNeededMargin(self):
        """getNeededMargin(self) -> vpl::tSize"""
        return _VolumeFilters.swig_volumeFilter_RGBAVolume_getNeededMargin(self)


    def setVoxel(self, dx, dy, dz):
        """setVoxel(self, dx, dy, dz)"""
        return _VolumeFilters.swig_volumeFilter_RGBAVolume_setVoxel(self, dx, dy, dz)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_volumeFilter_RGBAVolume(self)
        return weakref_proxy(self)
swig_volumeFilter_RGBAVolume_swigregister = _VolumeFilters.swig_volumeFilter_RGBAVolume_swigregister
swig_volumeFilter_RGBAVolume_swigregister(swig_volumeFilter_RGBAVolume)

class swig_separableVolumeFilterCVolume8(swig_volumeFilter_Volume8):
    """Proxy of C++ vpl::img::CSeparableVolumeFilter<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_Volume8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableVolumeFilterCVolume8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_Volume8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableVolumeFilterCVolume8, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableVolumeFilterCVolume8"""
        if self.__class__ == swig_separableVolumeFilterCVolume8:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_separableVolumeFilterCVolume8(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_separableVolumeFilterCVolume8
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_separableVolumeFilterCVolume8(self)
        return weakref_proxy(self)
swig_separableVolumeFilterCVolume8_swigregister = _VolumeFilters.swig_separableVolumeFilterCVolume8_swigregister
swig_separableVolumeFilterCVolume8_swigregister(swig_separableVolumeFilterCVolume8)

class swig_separableVolumeFilterCVolume16(swig_volumeFilter_Volume16):
    """Proxy of C++ vpl::img::CSeparableVolumeFilter<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_Volume16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableVolumeFilterCVolume16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_Volume16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableVolumeFilterCVolume16, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableVolumeFilterCVolume16"""
        if self.__class__ == swig_separableVolumeFilterCVolume16:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_separableVolumeFilterCVolume16(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_separableVolumeFilterCVolume16
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_separableVolumeFilterCVolume16(self)
        return weakref_proxy(self)
swig_separableVolumeFilterCVolume16_swigregister = _VolumeFilters.swig_separableVolumeFilterCVolume16_swigregister
swig_separableVolumeFilterCVolume16_swigregister(swig_separableVolumeFilterCVolume16)

class swig_separableVolumeFilterCVolume32(swig_volumeFilter_Volume32):
    """Proxy of C++ vpl::img::CSeparableVolumeFilter<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_Volume32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableVolumeFilterCVolume32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_Volume32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableVolumeFilterCVolume32, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableVolumeFilterCVolume32"""
        if self.__class__ == swig_separableVolumeFilterCVolume32:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_separableVolumeFilterCVolume32(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_separableVolumeFilterCVolume32
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_separableVolumeFilterCVolume32(self)
        return weakref_proxy(self)
swig_separableVolumeFilterCVolume32_swigregister = _VolumeFilters.swig_separableVolumeFilterCVolume32_swigregister
swig_separableVolumeFilterCVolume32_swigregister(swig_separableVolumeFilterCVolume32)

class swig_separableVolumeFilterCFVolume(swig_volumeFilter_FVolume):
    """Proxy of C++ vpl::img::CSeparableVolumeFilter<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_FVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableVolumeFilterCFVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_FVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableVolumeFilterCFVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableVolumeFilterCFVolume"""
        if self.__class__ == swig_separableVolumeFilterCFVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_separableVolumeFilterCFVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_separableVolumeFilterCFVolume
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_separableVolumeFilterCFVolume(self)
        return weakref_proxy(self)
swig_separableVolumeFilterCFVolume_swigregister = _VolumeFilters.swig_separableVolumeFilterCFVolume_swigregister
swig_separableVolumeFilterCFVolume_swigregister(swig_separableVolumeFilterCFVolume)

class swig_separableVolumeFilterCDVolume(swig_volumeFilter_DensityVolume):
    """Proxy of C++ vpl::img::CSeparableVolumeFilter<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_DensityVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableVolumeFilterCDVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_DensityVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableVolumeFilterCDVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableVolumeFilterCDVolume"""
        if self.__class__ == swig_separableVolumeFilterCDVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_separableVolumeFilterCDVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_separableVolumeFilterCDVolume
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_separableVolumeFilterCDVolume(self)
        return weakref_proxy(self)
swig_separableVolumeFilterCDVolume_swigregister = _VolumeFilters.swig_separableVolumeFilterCDVolume_swigregister
swig_separableVolumeFilterCDVolume_swigregister(swig_separableVolumeFilterCDVolume)

class swig_separableVolumeFilterCRGBAVolume(swig_volumeFilter_RGBAVolume):
    """Proxy of C++ vpl::img::CSeparableVolumeFilter<(vpl::img::CVolume<(vpl::img::tRGBAPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_RGBAVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_separableVolumeFilterCRGBAVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_RGBAVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, swig_separableVolumeFilterCRGBAVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> swig_separableVolumeFilterCRGBAVolume"""
        if self.__class__ == swig_separableVolumeFilterCRGBAVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_separableVolumeFilterCRGBAVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_separableVolumeFilterCRGBAVolume
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_separableVolumeFilterCRGBAVolume(self)
        return weakref_proxy(self)
swig_separableVolumeFilterCRGBAVolume_swigregister = _VolumeFilters.swig_separableVolumeFilterCRGBAVolume_swigregister
swig_separableVolumeFilterCRGBAVolume_swigregister(swig_separableVolumeFilterCRGBAVolume)

class CVolumeAvg3Filter_Volume8(swig_volumeFilter_Volume8):
    """Proxy of C++ vpl::img::CVolumeAvg3Filter<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_Volume8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAvg3Filter_Volume8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_Volume8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAvg3Filter_Volume8, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CVolumeAvg3Filter_Volume8"""
        if self.__class__ == CVolumeAvg3Filter_Volume8:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAvg3Filter_Volume8(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAvg3Filter_Volume8___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeAvg3Filter< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeAvg3Filter_Volume8_getResponse(self, SrcVolume, x, y, z)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAvg3Filter_Volume8_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAvg3Filter_Volume8(self)
        return weakref_proxy(self)
CVolumeAvg3Filter_Volume8_swigregister = _VolumeFilters.CVolumeAvg3Filter_Volume8_swigregister
CVolumeAvg3Filter_Volume8_swigregister(CVolumeAvg3Filter_Volume8)

class CVolumeAvg3Filter_Volume16(swig_volumeFilter_Volume16):
    """Proxy of C++ vpl::img::CVolumeAvg3Filter<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_Volume16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAvg3Filter_Volume16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_Volume16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAvg3Filter_Volume16, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CVolumeAvg3Filter_Volume16"""
        if self.__class__ == CVolumeAvg3Filter_Volume16:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAvg3Filter_Volume16(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAvg3Filter_Volume16___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeAvg3Filter< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeAvg3Filter_Volume16_getResponse(self, SrcVolume, x, y, z)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAvg3Filter_Volume16_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAvg3Filter_Volume16(self)
        return weakref_proxy(self)
CVolumeAvg3Filter_Volume16_swigregister = _VolumeFilters.CVolumeAvg3Filter_Volume16_swigregister
CVolumeAvg3Filter_Volume16_swigregister(CVolumeAvg3Filter_Volume16)

class CVolumeAvg3Filter_Volume32(swig_volumeFilter_Volume32):
    """Proxy of C++ vpl::img::CVolumeAvg3Filter<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_Volume32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAvg3Filter_Volume32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_Volume32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAvg3Filter_Volume32, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CVolumeAvg3Filter_Volume32"""
        if self.__class__ == CVolumeAvg3Filter_Volume32:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAvg3Filter_Volume32(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAvg3Filter_Volume32___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeAvg3Filter< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeAvg3Filter_Volume32_getResponse(self, SrcVolume, x, y, z)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAvg3Filter_Volume32_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAvg3Filter_Volume32(self)
        return weakref_proxy(self)
CVolumeAvg3Filter_Volume32_swigregister = _VolumeFilters.CVolumeAvg3Filter_Volume32_swigregister
CVolumeAvg3Filter_Volume32_swigregister(CVolumeAvg3Filter_Volume32)

class CVolumeAvg3Filter_FVolume(swig_volumeFilter_FVolume):
    """Proxy of C++ vpl::img::CVolumeAvg3Filter<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_FVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAvg3Filter_FVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_FVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAvg3Filter_FVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CVolumeAvg3Filter_FVolume"""
        if self.__class__ == CVolumeAvg3Filter_FVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAvg3Filter_FVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAvg3Filter_FVolume___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeAvg3Filter< vpl::img::CVolume< float,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeAvg3Filter_FVolume_getResponse(self, SrcVolume, x, y, z)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAvg3Filter_FVolume_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAvg3Filter_FVolume(self)
        return weakref_proxy(self)
CVolumeAvg3Filter_FVolume_swigregister = _VolumeFilters.CVolumeAvg3Filter_FVolume_swigregister
CVolumeAvg3Filter_FVolume_swigregister(CVolumeAvg3Filter_FVolume)

class CVolumeAvg3Filter_DVolume(swig_volumeFilter_DensityVolume):
    """Proxy of C++ vpl::img::CVolumeAvg3Filter<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_DensityVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAvg3Filter_DVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_DensityVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAvg3Filter_DVolume, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CVolumeAvg3Filter_DVolume"""
        if self.__class__ == CVolumeAvg3Filter_DVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAvg3Filter_DVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAvg3Filter_DVolume___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeAvg3Filter< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeAvg3Filter_DVolume_getResponse(self, SrcVolume, x, y, z)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAvg3Filter_DVolume_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAvg3Filter_DVolume(self)
        return weakref_proxy(self)
CVolumeAvg3Filter_DVolume_swigregister = _VolumeFilters.CVolumeAvg3Filter_DVolume_swigregister
CVolumeAvg3Filter_DVolume_swigregister(CVolumeAvg3Filter_DVolume)

class CVolumeGaussFilter_Volume8(swig_separableVolumeFilterCVolume8, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeGaussFilter<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableVolumeFilterCVolume8, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeGaussFilter_Volume8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableVolumeFilterCVolume8, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeGaussFilter_Volume8, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeGaussFilter_Volume8_BLOCK_SIZE

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CVolumeGaussFilter_Volume8
        __init__(self, Size) -> CVolumeGaussFilter_Volume8
        """
        if self.__class__ == CVolumeGaussFilter_Volume8:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeGaussFilter_Volume8(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeGaussFilter_Volume8
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeGaussFilter_Volume8___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeGaussFilter< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeGaussFilter_Volume8_getResponse(self, SrcVolume, x, y, z)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_Volume8_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_Volume8_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _VolumeFilters.CVolumeGaussFilter_Volume8_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _VolumeFilters.CVolumeGaussFilter_Volume8_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_Volume8_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_Volume8_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dZ, dSigma):
        """getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_Volume8_getGaussianFuncValue(dX, dY, dZ, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeGaussFilter_Volume8(self)
        return weakref_proxy(self)
CVolumeGaussFilter_Volume8_swigregister = _VolumeFilters.CVolumeGaussFilter_Volume8_swigregister
CVolumeGaussFilter_Volume8_swigregister(CVolumeGaussFilter_Volume8)

def CVolumeGaussFilter_Volume8_sigma2Size(dSigma):
    """CVolumeGaussFilter_Volume8_sigma2Size(dSigma) -> vpl::tSize"""
    return _VolumeFilters.CVolumeGaussFilter_Volume8_sigma2Size(dSigma)

def CVolumeGaussFilter_Volume8_size2Sigma(Size):
    """CVolumeGaussFilter_Volume8_size2Sigma(Size) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_Volume8_size2Sigma(Size)

def CVolumeGaussFilter_Volume8_getGaussianFuncValue(dX, dY, dZ, dSigma):
    """CVolumeGaussFilter_Volume8_getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_Volume8_getGaussianFuncValue(dX, dY, dZ, dSigma)

class CVolumeGaussFilter_Volume16(swig_separableVolumeFilterCVolume16, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeGaussFilter<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableVolumeFilterCVolume16, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeGaussFilter_Volume16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableVolumeFilterCVolume16, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeGaussFilter_Volume16, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeGaussFilter_Volume16_BLOCK_SIZE

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CVolumeGaussFilter_Volume16
        __init__(self, Size) -> CVolumeGaussFilter_Volume16
        """
        if self.__class__ == CVolumeGaussFilter_Volume16:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeGaussFilter_Volume16(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeGaussFilter_Volume16
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeGaussFilter_Volume16___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeGaussFilter< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeGaussFilter_Volume16_getResponse(self, SrcVolume, x, y, z)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_Volume16_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_Volume16_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _VolumeFilters.CVolumeGaussFilter_Volume16_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _VolumeFilters.CVolumeGaussFilter_Volume16_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_Volume16_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_Volume16_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dZ, dSigma):
        """getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_Volume16_getGaussianFuncValue(dX, dY, dZ, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeGaussFilter_Volume16(self)
        return weakref_proxy(self)
CVolumeGaussFilter_Volume16_swigregister = _VolumeFilters.CVolumeGaussFilter_Volume16_swigregister
CVolumeGaussFilter_Volume16_swigregister(CVolumeGaussFilter_Volume16)

def CVolumeGaussFilter_Volume16_sigma2Size(dSigma):
    """CVolumeGaussFilter_Volume16_sigma2Size(dSigma) -> vpl::tSize"""
    return _VolumeFilters.CVolumeGaussFilter_Volume16_sigma2Size(dSigma)

def CVolumeGaussFilter_Volume16_size2Sigma(Size):
    """CVolumeGaussFilter_Volume16_size2Sigma(Size) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_Volume16_size2Sigma(Size)

def CVolumeGaussFilter_Volume16_getGaussianFuncValue(dX, dY, dZ, dSigma):
    """CVolumeGaussFilter_Volume16_getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_Volume16_getGaussianFuncValue(dX, dY, dZ, dSigma)

class CVolumeGaussFilter_Volume32(swig_separableVolumeFilterCVolume32, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeGaussFilter<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableVolumeFilterCVolume32, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeGaussFilter_Volume32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableVolumeFilterCVolume32, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeGaussFilter_Volume32, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeGaussFilter_Volume32_BLOCK_SIZE

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CVolumeGaussFilter_Volume32
        __init__(self, Size) -> CVolumeGaussFilter_Volume32
        """
        if self.__class__ == CVolumeGaussFilter_Volume32:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeGaussFilter_Volume32(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeGaussFilter_Volume32
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeGaussFilter_Volume32___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeGaussFilter< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeGaussFilter_Volume32_getResponse(self, SrcVolume, x, y, z)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_Volume32_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_Volume32_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _VolumeFilters.CVolumeGaussFilter_Volume32_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _VolumeFilters.CVolumeGaussFilter_Volume32_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_Volume32_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_Volume32_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dZ, dSigma):
        """getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_Volume32_getGaussianFuncValue(dX, dY, dZ, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeGaussFilter_Volume32(self)
        return weakref_proxy(self)
CVolumeGaussFilter_Volume32_swigregister = _VolumeFilters.CVolumeGaussFilter_Volume32_swigregister
CVolumeGaussFilter_Volume32_swigregister(CVolumeGaussFilter_Volume32)

def CVolumeGaussFilter_Volume32_sigma2Size(dSigma):
    """CVolumeGaussFilter_Volume32_sigma2Size(dSigma) -> vpl::tSize"""
    return _VolumeFilters.CVolumeGaussFilter_Volume32_sigma2Size(dSigma)

def CVolumeGaussFilter_Volume32_size2Sigma(Size):
    """CVolumeGaussFilter_Volume32_size2Sigma(Size) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_Volume32_size2Sigma(Size)

def CVolumeGaussFilter_Volume32_getGaussianFuncValue(dX, dY, dZ, dSigma):
    """CVolumeGaussFilter_Volume32_getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_Volume32_getGaussianFuncValue(dX, dY, dZ, dSigma)

class CVolumeGaussFilter_FVolume(swig_separableVolumeFilterCFVolume, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeGaussFilter<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableVolumeFilterCFVolume, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeGaussFilter_FVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableVolumeFilterCFVolume, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeGaussFilter_FVolume, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeGaussFilter_FVolume_BLOCK_SIZE

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CVolumeGaussFilter_FVolume
        __init__(self, Size) -> CVolumeGaussFilter_FVolume
        """
        if self.__class__ == CVolumeGaussFilter_FVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeGaussFilter_FVolume(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeGaussFilter_FVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeGaussFilter_FVolume___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeGaussFilter< vpl::img::CVolume< float,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeGaussFilter_FVolume_getResponse(self, SrcVolume, x, y, z)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_FVolume_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_FVolume_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _VolumeFilters.CVolumeGaussFilter_FVolume_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _VolumeFilters.CVolumeGaussFilter_FVolume_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_FVolume_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_FVolume_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dZ, dSigma):
        """getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_FVolume_getGaussianFuncValue(dX, dY, dZ, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeGaussFilter_FVolume(self)
        return weakref_proxy(self)
CVolumeGaussFilter_FVolume_swigregister = _VolumeFilters.CVolumeGaussFilter_FVolume_swigregister
CVolumeGaussFilter_FVolume_swigregister(CVolumeGaussFilter_FVolume)

def CVolumeGaussFilter_FVolume_sigma2Size(dSigma):
    """CVolumeGaussFilter_FVolume_sigma2Size(dSigma) -> vpl::tSize"""
    return _VolumeFilters.CVolumeGaussFilter_FVolume_sigma2Size(dSigma)

def CVolumeGaussFilter_FVolume_size2Sigma(Size):
    """CVolumeGaussFilter_FVolume_size2Sigma(Size) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_FVolume_size2Sigma(Size)

def CVolumeGaussFilter_FVolume_getGaussianFuncValue(dX, dY, dZ, dSigma):
    """CVolumeGaussFilter_FVolume_getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_FVolume_getGaussianFuncValue(dX, dY, dZ, dSigma)

class CVolumeGaussFilter_DVolume(swig_separableVolumeFilterCDVolume, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeGaussFilter<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_separableVolumeFilterCDVolume, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeGaussFilter_DVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_separableVolumeFilterCDVolume, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeGaussFilter_DVolume, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeGaussFilter_DVolume_BLOCK_SIZE

    def __init__(self, *args):
        """
        __init__(self, dSigma) -> CVolumeGaussFilter_DVolume
        __init__(self, Size) -> CVolumeGaussFilter_DVolume
        """
        if self.__class__ == CVolumeGaussFilter_DVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeGaussFilter_DVolume(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeGaussFilter_DVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeGaussFilter_DVolume___call__(self, SrcVolume, DstVolume)


    def getResponse(self, SrcVolume, x, y, z):
        """getResponse(self, SrcVolume, x, y, z) -> vpl::img::CVolumeGaussFilter< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tVoxel"""
        return _VolumeFilters.CVolumeGaussFilter_DVolume_getResponse(self, SrcVolume, x, y, z)


    def getSigma(self):
        """getSigma(self) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_DVolume_getSigma(self)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_DVolume_getSize(self)


    def resize(self, Size):
        """resize(self, Size)"""
        return _VolumeFilters.CVolumeGaussFilter_DVolume_resize(self, Size)


    def setSigma(self, dSigma):
        """setSigma(self, dSigma)"""
        return _VolumeFilters.CVolumeGaussFilter_DVolume_setSigma(self, dSigma)


    def sigma2Size(dSigma):
        """sigma2Size(dSigma) -> vpl::tSize"""
        return _VolumeFilters.CVolumeGaussFilter_DVolume_sigma2Size(dSigma)

    sigma2Size = staticmethod(sigma2Size)

    def size2Sigma(Size):
        """size2Sigma(Size) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_DVolume_size2Sigma(Size)

    size2Sigma = staticmethod(size2Sigma)

    def getGaussianFuncValue(dX, dY, dZ, dSigma):
        """getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
        return _VolumeFilters.CVolumeGaussFilter_DVolume_getGaussianFuncValue(dX, dY, dZ, dSigma)

    getGaussianFuncValue = staticmethod(getGaussianFuncValue)
    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeGaussFilter_DVolume(self)
        return weakref_proxy(self)
CVolumeGaussFilter_DVolume_swigregister = _VolumeFilters.CVolumeGaussFilter_DVolume_swigregister
CVolumeGaussFilter_DVolume_swigregister(CVolumeGaussFilter_DVolume)

def CVolumeGaussFilter_DVolume_sigma2Size(dSigma):
    """CVolumeGaussFilter_DVolume_sigma2Size(dSigma) -> vpl::tSize"""
    return _VolumeFilters.CVolumeGaussFilter_DVolume_sigma2Size(dSigma)

def CVolumeGaussFilter_DVolume_size2Sigma(Size):
    """CVolumeGaussFilter_DVolume_size2Sigma(Size) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_DVolume_size2Sigma(Size)

def CVolumeGaussFilter_DVolume_getGaussianFuncValue(dX, dY, dZ, dSigma):
    """CVolumeGaussFilter_DVolume_getGaussianFuncValue(dX, dY, dZ, dSigma) -> double"""
    return _VolumeFilters.CVolumeGaussFilter_DVolume_getGaussianFuncValue(dX, dY, dZ, dSigma)

class CVolumeAnisotropicFilter_Volume8(swig_volumeFilter_Volume8, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeAnisotropicFilter<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_Volume8, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAnisotropicFilter_Volume8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_Volume8, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAnisotropicFilter_Volume8, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeAnisotropicFilter_Volume8_BLOCK_SIZE

    def __init__(self, dKappa, NumOfIters=-1):
        """
        __init__(self, dKappa, NumOfIters=-1) -> CVolumeAnisotropicFilter_Volume8
        __init__(self, dKappa) -> CVolumeAnisotropicFilter_Volume8
        """
        if self.__class__ == CVolumeAnisotropicFilter_Volume8:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAnisotropicFilter_Volume8(_self, dKappa, NumOfIters)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeAnisotropicFilter_Volume8
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume8___call__(self, SrcVolume, DstVolume)


    def getNumOfIters(self):
        """getNumOfIters(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume8_getNumOfIters(self)


    def setNumOfIters(self, NumOfIters):
        """setNumOfIters(self, NumOfIters)"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume8_setNumOfIters(self, NumOfIters)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume8_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAnisotropicFilter_Volume8(self)
        return weakref_proxy(self)
CVolumeAnisotropicFilter_Volume8_swigregister = _VolumeFilters.CVolumeAnisotropicFilter_Volume8_swigregister
CVolumeAnisotropicFilter_Volume8_swigregister(CVolumeAnisotropicFilter_Volume8)
cvar = _VolumeFilters.cvar
CVolumeAnisotropicFilter_Volume8.DT = _VolumeFilters.cvar.CVolumeAnisotropicFilter_Volume8_DT
CVolumeAnisotropicFilter_Volume8.MIN_CHANGE = _VolumeFilters.cvar.CVolumeAnisotropicFilter_Volume8_MIN_CHANGE

class CVolumeAnisotropicFilter_Volume16(swig_volumeFilter_Volume16, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeAnisotropicFilter<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_Volume16, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAnisotropicFilter_Volume16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_Volume16, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAnisotropicFilter_Volume16, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeAnisotropicFilter_Volume16_BLOCK_SIZE

    def __init__(self, dKappa, NumOfIters=-1):
        """
        __init__(self, dKappa, NumOfIters=-1) -> CVolumeAnisotropicFilter_Volume16
        __init__(self, dKappa) -> CVolumeAnisotropicFilter_Volume16
        """
        if self.__class__ == CVolumeAnisotropicFilter_Volume16:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAnisotropicFilter_Volume16(_self, dKappa, NumOfIters)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeAnisotropicFilter_Volume16
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume16___call__(self, SrcVolume, DstVolume)


    def getNumOfIters(self):
        """getNumOfIters(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume16_getNumOfIters(self)


    def setNumOfIters(self, NumOfIters):
        """setNumOfIters(self, NumOfIters)"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume16_setNumOfIters(self, NumOfIters)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume16_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAnisotropicFilter_Volume16(self)
        return weakref_proxy(self)
CVolumeAnisotropicFilter_Volume16_swigregister = _VolumeFilters.CVolumeAnisotropicFilter_Volume16_swigregister
CVolumeAnisotropicFilter_Volume16_swigregister(CVolumeAnisotropicFilter_Volume16)
CVolumeAnisotropicFilter_Volume16.DT = _VolumeFilters.cvar.CVolumeAnisotropicFilter_Volume16_DT
CVolumeAnisotropicFilter_Volume16.MIN_CHANGE = _VolumeFilters.cvar.CVolumeAnisotropicFilter_Volume16_MIN_CHANGE

class CVolumeAnisotropicFilter_Volume32(swig_volumeFilter_Volume32, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeAnisotropicFilter<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_Volume32, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAnisotropicFilter_Volume32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_Volume32, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAnisotropicFilter_Volume32, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeAnisotropicFilter_Volume32_BLOCK_SIZE

    def __init__(self, dKappa, NumOfIters=-1):
        """
        __init__(self, dKappa, NumOfIters=-1) -> CVolumeAnisotropicFilter_Volume32
        __init__(self, dKappa) -> CVolumeAnisotropicFilter_Volume32
        """
        if self.__class__ == CVolumeAnisotropicFilter_Volume32:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAnisotropicFilter_Volume32(_self, dKappa, NumOfIters)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeAnisotropicFilter_Volume32
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume32___call__(self, SrcVolume, DstVolume)


    def getNumOfIters(self):
        """getNumOfIters(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume32_getNumOfIters(self)


    def setNumOfIters(self, NumOfIters):
        """setNumOfIters(self, NumOfIters)"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume32_setNumOfIters(self, NumOfIters)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_Volume32_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAnisotropicFilter_Volume32(self)
        return weakref_proxy(self)
CVolumeAnisotropicFilter_Volume32_swigregister = _VolumeFilters.CVolumeAnisotropicFilter_Volume32_swigregister
CVolumeAnisotropicFilter_Volume32_swigregister(CVolumeAnisotropicFilter_Volume32)
CVolumeAnisotropicFilter_Volume32.DT = _VolumeFilters.cvar.CVolumeAnisotropicFilter_Volume32_DT
CVolumeAnisotropicFilter_Volume32.MIN_CHANGE = _VolumeFilters.cvar.CVolumeAnisotropicFilter_Volume32_MIN_CHANGE

class CVolumeAnisotropicFilter_FVolume(swig_volumeFilter_FVolume, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeAnisotropicFilter<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_FVolume, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAnisotropicFilter_FVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_FVolume, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAnisotropicFilter_FVolume, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeAnisotropicFilter_FVolume_BLOCK_SIZE

    def __init__(self, dKappa, NumOfIters=-1):
        """
        __init__(self, dKappa, NumOfIters=-1) -> CVolumeAnisotropicFilter_FVolume
        __init__(self, dKappa) -> CVolumeAnisotropicFilter_FVolume
        """
        if self.__class__ == CVolumeAnisotropicFilter_FVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAnisotropicFilter_FVolume(_self, dKappa, NumOfIters)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeAnisotropicFilter_FVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAnisotropicFilter_FVolume___call__(self, SrcVolume, DstVolume)


    def getNumOfIters(self):
        """getNumOfIters(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_FVolume_getNumOfIters(self)


    def setNumOfIters(self, NumOfIters):
        """setNumOfIters(self, NumOfIters)"""
        return _VolumeFilters.CVolumeAnisotropicFilter_FVolume_setNumOfIters(self, NumOfIters)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_FVolume_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAnisotropicFilter_FVolume(self)
        return weakref_proxy(self)
CVolumeAnisotropicFilter_FVolume_swigregister = _VolumeFilters.CVolumeAnisotropicFilter_FVolume_swigregister
CVolumeAnisotropicFilter_FVolume_swigregister(CVolumeAnisotropicFilter_FVolume)
CVolumeAnisotropicFilter_FVolume.DT = _VolumeFilters.cvar.CVolumeAnisotropicFilter_FVolume_DT
CVolumeAnisotropicFilter_FVolume.MIN_CHANGE = _VolumeFilters.cvar.CVolumeAnisotropicFilter_FVolume_MIN_CHANGE

class CVolumeAnisotropicFilter_DVolume(swig_volumeFilter_DensityVolume, VPLSwig.Core.Core.CProgress):
    """Proxy of C++ vpl::img::CVolumeAnisotropicFilter<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_volumeFilter_DensityVolume, VPLSwig.Core.Core.CProgress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CVolumeAnisotropicFilter_DVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_volumeFilter_DensityVolume, VPLSwig.Core.Core.CProgress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CVolumeAnisotropicFilter_DVolume, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CVolumeAnisotropicFilter_DVolume_BLOCK_SIZE

    def __init__(self, dKappa, NumOfIters=-1):
        """
        __init__(self, dKappa, NumOfIters=-1) -> CVolumeAnisotropicFilter_DVolume
        __init__(self, dKappa) -> CVolumeAnisotropicFilter_DVolume
        """
        if self.__class__ == CVolumeAnisotropicFilter_DVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CVolumeAnisotropicFilter_DVolume(_self, dKappa, NumOfIters)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CVolumeAnisotropicFilter_DVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """__call__(self, SrcVolume, DstVolume) -> bool"""
        return _VolumeFilters.CVolumeAnisotropicFilter_DVolume___call__(self, SrcVolume, DstVolume)


    def getNumOfIters(self):
        """getNumOfIters(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_DVolume_getNumOfIters(self)


    def setNumOfIters(self, NumOfIters):
        """setNumOfIters(self, NumOfIters)"""
        return _VolumeFilters.CVolumeAnisotropicFilter_DVolume_setNumOfIters(self, NumOfIters)


    def getSize(self):
        """getSize(self) -> vpl::tSize"""
        return _VolumeFilters.CVolumeAnisotropicFilter_DVolume_getSize(self)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CVolumeAnisotropicFilter_DVolume(self)
        return weakref_proxy(self)
CVolumeAnisotropicFilter_DVolume_swigregister = _VolumeFilters.CVolumeAnisotropicFilter_DVolume_swigregister
CVolumeAnisotropicFilter_DVolume_swigregister(CVolumeAnisotropicFilter_DVolume)
CVolumeAnisotropicFilter_DVolume.DT = _VolumeFilters.cvar.CVolumeAnisotropicFilter_DVolume_DT
CVolumeAnisotropicFilter_DVolume.MIN_CHANGE = _VolumeFilters.cvar.CVolumeAnisotropicFilter_DVolume_MIN_CHANGE

class swig_baseEdgeDetector_Volume8(_object):
    """Proxy of C++ vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_baseEdgeDetector_Volume8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_baseEdgeDetector_Volume8, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_baseEdgeDetector_Volume8_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """
        __init__(vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> self) -> swig_baseEdgeDetector_Volume8

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == swig_baseEdgeDetector_Volume8:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_baseEdgeDetector_Volume8(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_baseEdgeDetector_Volume8
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(swig_baseEdgeDetector_Volume8 self, CVolume8 SrcVolume, CVolume8 DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.swig_baseEdgeDetector_Volume8___call__(self, SrcVolume, DstVolume)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_baseEdgeDetector_Volume8(self)
        return weakref_proxy(self)
swig_baseEdgeDetector_Volume8_swigregister = _VolumeFilters.swig_baseEdgeDetector_Volume8_swigregister
swig_baseEdgeDetector_Volume8_swigregister(swig_baseEdgeDetector_Volume8)

class swig_baseEdgeDetector_Volume16(_object):
    """Proxy of C++ vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_baseEdgeDetector_Volume16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_baseEdgeDetector_Volume16, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_baseEdgeDetector_Volume16_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """
        __init__(vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> self) -> swig_baseEdgeDetector_Volume16

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == swig_baseEdgeDetector_Volume16:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_baseEdgeDetector_Volume16(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_baseEdgeDetector_Volume16
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(swig_baseEdgeDetector_Volume16 self, CVolume16 SrcVolume, CVolume16 DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.swig_baseEdgeDetector_Volume16___call__(self, SrcVolume, DstVolume)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_baseEdgeDetector_Volume16(self)
        return weakref_proxy(self)
swig_baseEdgeDetector_Volume16_swigregister = _VolumeFilters.swig_baseEdgeDetector_Volume16_swigregister
swig_baseEdgeDetector_Volume16_swigregister(swig_baseEdgeDetector_Volume16)

class swig_baseEdgeDetector_Volume32(_object):
    """Proxy of C++ vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_baseEdgeDetector_Volume32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_baseEdgeDetector_Volume32, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_baseEdgeDetector_Volume32_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """
        __init__(vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> self) -> swig_baseEdgeDetector_Volume32

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == swig_baseEdgeDetector_Volume32:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_baseEdgeDetector_Volume32(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_baseEdgeDetector_Volume32
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(swig_baseEdgeDetector_Volume32 self, CVolume32 SrcVolume, CVolume32 DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.swig_baseEdgeDetector_Volume32___call__(self, SrcVolume, DstVolume)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_baseEdgeDetector_Volume32(self)
        return weakref_proxy(self)
swig_baseEdgeDetector_Volume32_swigregister = _VolumeFilters.swig_baseEdgeDetector_Volume32_swigregister
swig_baseEdgeDetector_Volume32_swigregister(swig_baseEdgeDetector_Volume32)

class swig_baseEdgeDetector_FVolume(_object):
    """Proxy of C++ vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_baseEdgeDetector_FVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_baseEdgeDetector_FVolume, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_baseEdgeDetector_FVolume_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """
        __init__(vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> self) -> swig_baseEdgeDetector_FVolume

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == swig_baseEdgeDetector_FVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_baseEdgeDetector_FVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_baseEdgeDetector_FVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(swig_baseEdgeDetector_FVolume self, CFVolume SrcVolume, CFVolume DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< float,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< float,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.swig_baseEdgeDetector_FVolume___call__(self, SrcVolume, DstVolume)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_baseEdgeDetector_FVolume(self)
        return weakref_proxy(self)
swig_baseEdgeDetector_FVolume_swigregister = _VolumeFilters.swig_baseEdgeDetector_FVolume_swigregister
swig_baseEdgeDetector_FVolume_swigregister(swig_baseEdgeDetector_FVolume)

class swig_baseEdgeDetector_DVolume(_object):
    """Proxy of C++ vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_baseEdgeDetector_DVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_baseEdgeDetector_DVolume, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_VOLUME = _VolumeFilters.swig_baseEdgeDetector_DVolume_TEMPLATE_PARAMETER_IS_NOT_VOLUME

    def __init__(self):
        """
        __init__(vpl::img::CVolumeEdgeDetector<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> self) -> swig_baseEdgeDetector_DVolume

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == swig_baseEdgeDetector_DVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_swig_baseEdgeDetector_DVolume(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_swig_baseEdgeDetector_DVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(swig_baseEdgeDetector_DVolume self, CDVolume SrcVolume, CDVolume DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeEdgeDetector< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.swig_baseEdgeDetector_DVolume___call__(self, SrcVolume, DstVolume)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_swig_baseEdgeDetector_DVolume(self)
        return weakref_proxy(self)
swig_baseEdgeDetector_DVolume_swigregister = _VolumeFilters.swig_baseEdgeDetector_DVolume_swigregister
swig_baseEdgeDetector_DVolume_swigregister(swig_baseEdgeDetector_DVolume)

class CCanny_Volume8(swig_baseEdgeDetector_Volume8):
    """Proxy of C++ vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_baseEdgeDetector_Volume8]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_Volume8, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_baseEdgeDetector_Volume8]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_Volume8, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CCanny_Volume8_BLOCK_SIZE

    def __init__(self, dT1, dT2):
        """
        __init__(vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tPixel8,vpl::base::CPartedData)>)> self, double dT1, double dT2) -> CCanny_Volume8

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        if self.__class__ == CCanny_Volume8:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CCanny_Volume8(_self, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CCanny_Volume8
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(CCanny_Volume8 self, CVolume8 SrcVolume, CVolume8 DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< unsigned __int8,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.CCanny_Volume8___call__(self, SrcVolume, DstVolume)


    def getThresholds(self, dT1, dT2):
        """
        getThresholds(CCanny_Volume8 self, double & dT1, double & dT2)

        Parameters
        ----------
        dT1: double &
        dT2: double &

        """
        return _VolumeFilters.CCanny_Volume8_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """
        setThresholds(CCanny_Volume8 self, double dT1, double dT2)

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        return _VolumeFilters.CCanny_Volume8_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CCanny_Volume8(self)
        return weakref_proxy(self)
CCanny_Volume8_swigregister = _VolumeFilters.CCanny_Volume8_swigregister
CCanny_Volume8_swigregister(CCanny_Volume8)

class CCanny_Volume16(swig_baseEdgeDetector_Volume16):
    """Proxy of C++ vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_baseEdgeDetector_Volume16]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_Volume16, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_baseEdgeDetector_Volume16]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_Volume16, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CCanny_Volume16_BLOCK_SIZE

    def __init__(self, dT1, dT2):
        """
        __init__(vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tPixel16,vpl::base::CPartedData)>)> self, double dT1, double dT2) -> CCanny_Volume16

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        if self.__class__ == CCanny_Volume16:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CCanny_Volume16(_self, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CCanny_Volume16
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(CCanny_Volume16 self, CVolume16 SrcVolume, CVolume16 DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< unsigned __int16,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.CCanny_Volume16___call__(self, SrcVolume, DstVolume)


    def getThresholds(self, dT1, dT2):
        """
        getThresholds(CCanny_Volume16 self, double & dT1, double & dT2)

        Parameters
        ----------
        dT1: double &
        dT2: double &

        """
        return _VolumeFilters.CCanny_Volume16_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """
        setThresholds(CCanny_Volume16 self, double dT1, double dT2)

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        return _VolumeFilters.CCanny_Volume16_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CCanny_Volume16(self)
        return weakref_proxy(self)
CCanny_Volume16_swigregister = _VolumeFilters.CCanny_Volume16_swigregister
CCanny_Volume16_swigregister(CCanny_Volume16)

class CCanny_Volume32(swig_baseEdgeDetector_Volume32):
    """Proxy of C++ vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_baseEdgeDetector_Volume32]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_Volume32, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_baseEdgeDetector_Volume32]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_Volume32, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CCanny_Volume32_BLOCK_SIZE

    def __init__(self, dT1, dT2):
        """
        __init__(vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tPixel32,vpl::base::CPartedData)>)> self, double dT1, double dT2) -> CCanny_Volume32

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        if self.__class__ == CCanny_Volume32:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CCanny_Volume32(_self, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CCanny_Volume32
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(CCanny_Volume32 self, CVolume32 SrcVolume, CVolume32 DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< unsigned __int32,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.CCanny_Volume32___call__(self, SrcVolume, DstVolume)


    def getThresholds(self, dT1, dT2):
        """
        getThresholds(CCanny_Volume32 self, double & dT1, double & dT2)

        Parameters
        ----------
        dT1: double &
        dT2: double &

        """
        return _VolumeFilters.CCanny_Volume32_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """
        setThresholds(CCanny_Volume32 self, double dT1, double dT2)

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        return _VolumeFilters.CCanny_Volume32_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CCanny_Volume32(self)
        return weakref_proxy(self)
CCanny_Volume32_swigregister = _VolumeFilters.CCanny_Volume32_swigregister
CCanny_Volume32_swigregister(CCanny_Volume32)

class CCanny_FVolume(swig_baseEdgeDetector_FVolume):
    """Proxy of C++ vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_baseEdgeDetector_FVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_FVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_baseEdgeDetector_FVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_FVolume, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CCanny_FVolume_BLOCK_SIZE

    def __init__(self, dT1, dT2):
        """
        __init__(vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tFloatPixel,vpl::base::CPartedData)>)> self, double dT1, double dT2) -> CCanny_FVolume

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        if self.__class__ == CCanny_FVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CCanny_FVolume(_self, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CCanny_FVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(CCanny_FVolume self, CFVolume SrcVolume, CFVolume DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< float,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< float,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.CCanny_FVolume___call__(self, SrcVolume, DstVolume)


    def getThresholds(self, dT1, dT2):
        """
        getThresholds(CCanny_FVolume self, double & dT1, double & dT2)

        Parameters
        ----------
        dT1: double &
        dT2: double &

        """
        return _VolumeFilters.CCanny_FVolume_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """
        setThresholds(CCanny_FVolume self, double dT1, double dT2)

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        return _VolumeFilters.CCanny_FVolume_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CCanny_FVolume(self)
        return weakref_proxy(self)
CCanny_FVolume_swigregister = _VolumeFilters.CCanny_FVolume_swigregister
CCanny_FVolume_swigregister(CCanny_FVolume)

class CCanny_DVolume(swig_baseEdgeDetector_DVolume):
    """Proxy of C++ vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> class."""

    __swig_setmethods__ = {}
    for _s in [swig_baseEdgeDetector_DVolume]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCanny_DVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [swig_baseEdgeDetector_DVolume]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCanny_DVolume, name)
    __repr__ = _swig_repr
    BLOCK_SIZE = _VolumeFilters.CCanny_DVolume_BLOCK_SIZE

    def __init__(self, dT1, dT2):
        """
        __init__(vpl::img::CVolumeCanny<(vpl::img::CVolume<(vpl::img::tDensityPixel,vpl::base::CPartedData)>)> self, double dT1, double dT2) -> CCanny_DVolume

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        if self.__class__ == CCanny_DVolume:
            _self = None
        else:
            _self = self
        this = _VolumeFilters.new_CCanny_DVolume(_self, dT1, dT2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VolumeFilters.delete_CCanny_DVolume
    __del__ = lambda self: None

    def __call__(self, SrcVolume, DstVolume):
        """
        __call__(CCanny_DVolume self, CDVolume SrcVolume, CDVolume DstVolume) -> bool

        Parameters
        ----------
        SrcVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tVolume const &
        DstVolume: vpl::img::CVolumeCanny< vpl::img::CVolume< __int16,vpl::base::CPartedData > >::tVolume &

        """
        return _VolumeFilters.CCanny_DVolume___call__(self, SrcVolume, DstVolume)


    def getThresholds(self, dT1, dT2):
        """
        getThresholds(CCanny_DVolume self, double & dT1, double & dT2)

        Parameters
        ----------
        dT1: double &
        dT2: double &

        """
        return _VolumeFilters.CCanny_DVolume_getThresholds(self, dT1, dT2)


    def setThresholds(self, dT1, dT2):
        """
        setThresholds(CCanny_DVolume self, double dT1, double dT2)

        Parameters
        ----------
        dT1: double
        dT2: double

        """
        return _VolumeFilters.CCanny_DVolume_setThresholds(self, dT1, dT2)

    def __disown__(self):
        self.this.disown()
        _VolumeFilters.disown_CCanny_DVolume(self)
        return weakref_proxy(self)
CCanny_DVolume_swigregister = _VolumeFilters.CCanny_DVolume_swigregister
CCanny_DVolume_swigregister(CCanny_DVolume)

# This file is compatible with both classic and new-style classes.


