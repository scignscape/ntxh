# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Image')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Image')
    _Image = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Image', [dirname(__file__)])
        except ImportError:
            import _Image
            return _Image
        if fp is not None:
            try:
                _mod = imp.load_module('_Image', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Image = swig_import_helper()
    del swig_import_helper
else:
    import _Image
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import VPLSwig.Core.Core
import VPLSwig.Core.Geometry
class CImageView(_object):
    """Proxy of C++ vpl::img::CImageView class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CImageView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CImageView, name)
    __repr__ = _swig_repr
    CLASS_IMAGE_VIEW = _Image.CImageView_CLASS_IMAGE_VIEW

    def __init__(self):
        """__init__(self) -> CImageView"""
        this = _Image.new_CImageView()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CImageView
    __del__ = lambda self: None
CImageView_swigregister = _Image.CImageView_swigregister
CImageView_swigregister(CImageView)

REFERENCE = _Image.REFERENCE
class CSerializable(_object):
    """Proxy of C++ vpl::mod::CSerializable class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSerializable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CSerializable, name)
    __repr__ = _swig_repr
    CLASS_SERIALIZABLE = _Image.CSerializable_CLASS_SERIALIZABLE
    VERSION = _Image.CSerializable_VERSION
    MAX_NAME_LENGTH = _Image.CSerializable_MAX_NAME_LENGTH

    def getName():
        """getName() -> char const *"""
        return _Image.CSerializable_getName()

    getName = staticmethod(getName)

    def getCompression():
        """getCompression() -> int"""
        return _Image.CSerializable_getCompression()

    getCompression = staticmethod(getCompression)

    def getBlockSize():
        """getBlockSize() -> int"""
        return _Image.CSerializable_getBlockSize()

    getBlockSize = staticmethod(getBlockSize)

    def __init__(self):
        """__init__(self) -> CSerializable"""
        this = _Image.new_CSerializable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CSerializable
    __del__ = lambda self: None
CSerializable_swigregister = _Image.CSerializable_swigregister
CSerializable_swigregister(CSerializable)

def CSerializable_getName():
    """CSerializable_getName() -> char const *"""
    return _Image.CSerializable_getName()

def CSerializable_getCompression():
    """CSerializable_getCompression() -> int"""
    return _Image.CSerializable_getCompression()

def CSerializable_getBlockSize():
    """CSerializable_getBlockSize() -> int"""
    return _Image.CSerializable_getBlockSize()

class swig_base_Image8(_object):
    """Proxy of C++ vpl::img::CImageBase<(vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_Image8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_Image8, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getImpl(self, *args):
        """
        getImpl(self) -> CImage8
        getImpl(self) -> CImage8
        """
        return _Image.swig_base_Image8_getImpl(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.swig_base_Image8_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.swig_base_Image8_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.swig_base_Image8_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.swig_base_Image8_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.swig_base_Image8_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.swig_base_Image8_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.swig_base_Image8_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.swig_base_Image8_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.swig_base_Image8_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel const
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_Image8___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel const
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int8,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_Image8_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CImage8
        set(self, i, Value) -> CImage8
        """
        return _Image.swig_base_Image8_set(self, *args)

    __swig_destroy__ = _Image.delete_swig_base_Image8
    __del__ = lambda self: None
swig_base_Image8_swigregister = _Image.swig_base_Image8_swigregister
swig_base_Image8_swigregister(swig_base_Image8)

class swig_base_Image16(_object):
    """Proxy of C++ vpl::img::CImageBase<(vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_Image16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_Image16, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getImpl(self, *args):
        """
        getImpl(self) -> CImage16
        getImpl(self) -> CImage16
        """
        return _Image.swig_base_Image16_getImpl(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.swig_base_Image16_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.swig_base_Image16_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.swig_base_Image16_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.swig_base_Image16_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.swig_base_Image16_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.swig_base_Image16_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.swig_base_Image16_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.swig_base_Image16_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.swig_base_Image16_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel const
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_Image16___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel const
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int16,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_Image16_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CImage16
        set(self, i, Value) -> CImage16
        """
        return _Image.swig_base_Image16_set(self, *args)

    __swig_destroy__ = _Image.delete_swig_base_Image16
    __del__ = lambda self: None
swig_base_Image16_swigregister = _Image.swig_base_Image16_swigregister
swig_base_Image16_swigregister(swig_base_Image16)

class swig_base_Image32(_object):
    """Proxy of C++ vpl::img::CImageBase<(vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_Image32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_Image32, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getImpl(self, *args):
        """
        getImpl(self) -> CImage32
        getImpl(self) -> CImage32
        """
        return _Image.swig_base_Image32_getImpl(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.swig_base_Image32_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.swig_base_Image32_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.swig_base_Image32_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.swig_base_Image32_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.swig_base_Image32_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.swig_base_Image32_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.swig_base_Image32_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.swig_base_Image32_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.swig_base_Image32_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel const
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_Image32___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel const
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< unsigned __int32,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_Image32_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CImage32
        set(self, i, Value) -> CImage32
        """
        return _Image.swig_base_Image32_set(self, *args)

    __swig_destroy__ = _Image.delete_swig_base_Image32
    __del__ = lambda self: None
swig_base_Image32_swigregister = _Image.swig_base_Image32_swigregister
swig_base_Image32_swigregister(swig_base_Image32)

class swig_base_FImage(_object):
    """Proxy of C++ vpl::img::CImageBase<(vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_FImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_FImage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getImpl(self, *args):
        """
        getImpl(self) -> CFImage
        getImpl(self) -> CFImage
        """
        return _Image.swig_base_FImage_getImpl(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.swig_base_FImage_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.swig_base_FImage_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.swig_base_FImage_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.swig_base_FImage_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.swig_base_FImage_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.swig_base_FImage_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.swig_base_FImage_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.swig_base_FImage_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.swig_base_FImage_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel const
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_FImage___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel const
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< float,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_FImage_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CFImage
        set(self, i, Value) -> CFImage
        """
        return _Image.swig_base_FImage_set(self, *args)

    __swig_destroy__ = _Image.delete_swig_base_FImage
    __del__ = lambda self: None
swig_base_FImage_swigregister = _Image.swig_base_FImage_swigregister
swig_base_FImage_swigregister(swig_base_FImage)

class swig_base_DImage(_object):
    """Proxy of C++ vpl::img::CImageBase<(vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_DImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_DImage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getImpl(self, *args):
        """
        getImpl(self) -> CDImage
        getImpl(self) -> CDImage
        """
        return _Image.swig_base_DImage_getImpl(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.swig_base_DImage_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.swig_base_DImage_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.swig_base_DImage_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.swig_base_DImage_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.swig_base_DImage_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.swig_base_DImage_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.swig_base_DImage_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.swig_base_DImage_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.swig_base_DImage_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel const
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_DImage___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel const
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< __int16,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_DImage_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CDImage
        set(self, i, Value) -> CDImage
        """
        return _Image.swig_base_DImage_set(self, *args)

    __swig_destroy__ = _Image.delete_swig_base_DImage
    __del__ = lambda self: None
swig_base_DImage_swigregister = _Image.swig_base_DImage_swigregister
swig_base_DImage_swigregister(swig_base_DImage)

class swig_base_RGBImage(_object):
    """Proxy of C++ vpl::img::CImageBase<(vpl::img::CImage<(vpl::img::tRGBPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_RGBImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_RGBImage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getImpl(self, *args):
        """
        getImpl(self) -> CRGBImage
        getImpl(self) -> CRGBImage
        """
        return _Image.swig_base_RGBImage_getImpl(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.swig_base_RGBImage_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.swig_base_RGBImage_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.swig_base_RGBImage_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.swig_base_RGBImage_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.swig_base_RGBImage_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.swig_base_RGBImage_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.swig_base_RGBImage_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.swig_base_RGBImage_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.swig_base_RGBImage_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData > >::tPixel
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData > >::tPixel const
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData > >::tPixel
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_RGBImage___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData > >::tPixel
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData > >::tPixel const
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData > >::tPixel
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_RGBImage_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CRGBImage
        set(self, i, Value) -> CRGBImage
        """
        return _Image.swig_base_RGBImage_set(self, *args)

    __swig_destroy__ = _Image.delete_swig_base_RGBImage
    __del__ = lambda self: None
swig_base_RGBImage_swigregister = _Image.swig_base_RGBImage_swigregister
swig_base_RGBImage_swigregister(swig_base_RGBImage)

class swig_base_ComplexImage(_object):
    """Proxy of C++ vpl::img::CImageBase<(vpl::img::CImage<(vpl::img::tComplexPixel,vpl::base::CRefData)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, swig_base_ComplexImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, swig_base_ComplexImage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getImpl(self, *args):
        """
        getImpl(self) -> CComplexImage
        getImpl(self) -> CComplexImage
        """
        return _Image.swig_base_ComplexImage_getImpl(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.swig_base_ComplexImage_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.swig_base_ComplexImage_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.swig_base_ComplexImage_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.swig_base_ComplexImage_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.swig_base_ComplexImage_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.swig_base_ComplexImage_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.swig_base_ComplexImage_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.swig_base_ComplexImage_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.swig_base_ComplexImage_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData > >::tPixel
        __call__(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData > >::tPixel const
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData > >::tPixel
        __call__(self, i) -> vpl::img::CImageBase< vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_ComplexImage___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData > >::tPixel
        at(self, x, y) -> vpl::img::CImageBase< vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData > >::tPixel const
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData > >::tPixel
        at(self, i) -> vpl::img::CImageBase< vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData > >::tPixel const &
        """
        return _Image.swig_base_ComplexImage_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CComplexImage
        set(self, i, Value) -> CComplexImage
        """
        return _Image.swig_base_ComplexImage_set(self, *args)

    __swig_destroy__ = _Image.delete_swig_base_ComplexImage
    __del__ = lambda self: None
swig_base_ComplexImage_swigregister = _Image.swig_base_ComplexImage_swigregister
swig_base_ComplexImage_swigregister(swig_base_ComplexImage)

class CImage8(VPLSwig.Core.Core.CObject, swig_base_Image8, CSerializable):
    """Proxy of C++ vpl::img::CImage<(vpl::img::tPixel8,vpl::base::CRefData)> class."""

    __swig_setmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_Image8, CSerializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CImage8, name, value)
    __swig_getmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_Image8, CSerializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CImage8, name)
    __repr__ = _swig_repr
    CLASS_IMAGE = _Image.CImage8_CLASS_IMAGE

    def __init__(self, *args):
        """
        __init__(self) -> CImage8
        __init__(self, XSize, YSize, Margin=0) -> CImage8
        __init__(self, XSize, YSize) -> CImage8
        __init__(self, Size, Margin=0) -> CImage8
        __init__(self, Size) -> CImage8
        __init__(self, Image, x, y, XSize, YSize) -> CImage8
        __init__(self, Image, x, y, XSize, YSize, arg7) -> CImage8
        __init__(self, Image) -> CImage8
        __init__(self, Image, arg3) -> CImage8
        __init__(self, Image) -> CImage8
        __init__(self, Image, arg3) -> CImage8
        """
        if self.__class__ == CImage8:
            _self = None
        else:
            _self = self
        this = _Image.new_CImage8(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CImage8
    __del__ = lambda self: None

    def resize(self, *args):
        """
        resize(self, XSize, YSize, Margin=0) -> CImage8
        resize(self, XSize, YSize) -> CImage8
        resize(self, Size, Margin=0) -> CImage8
        resize(self, Size) -> CImage8
        """
        return _Image.CImage8_resize(self, *args)


    def copy(self, *args):
        """
        copy(self, Image, Margin=-1) -> CImage8
        copy(self, Image) -> CImage8
        copy(self, Image, x, y, XSize, YSize, Margin=-1) -> CImage8
        copy(self, Image, x, y, XSize, YSize) -> CImage8
        copy(self, Image, Margin=-1) -> CImage8
        copy(self, Image) -> CImage8
        """
        return _Image.CImage8_copy(self, *args)


    def makeRef(self, *args):
        """
        makeRef(self, Image) -> CImage8
        makeRef(self, Image, x, y, XSize, YSize) -> CImage8
        makeRef(self, Image) -> CImage8
        """
        return _Image.CImage8_makeRef(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.CImage8_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.CImage8_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.CImage8_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.CImage8_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.CImage8_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.CImage8_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.CImage8_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.CImage8_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.CImage8_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> unsigned __int8
        __call__(self, x, y) -> unsigned __int8 const
        __call__(self, i) -> unsigned __int8
        __call__(self, i) -> unsigned __int8 const &
        """
        return _Image.CImage8___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> unsigned __int8 const
        at(self, i) -> unsigned __int8 const &
        """
        return _Image.CImage8_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CImage8
        set(self, i, Value) -> CImage8
        """
        return _Image.CImage8_set(self, *args)


    def getPtr(self, *args):
        """
        getPtr(self) -> unsigned __int8
        getPtr(self) -> unsigned __int8 const
        getPtr(self, x, y) -> unsigned __int8
        getPtr(self, x, y) -> unsigned __int8 const *
        """
        return _Image.CImage8_getPtr(self, *args)


    def getRowPtr(self, *args):
        """
        getRowPtr(self, y) -> unsigned __int8
        getRowPtr(self, y) -> unsigned __int8 const *
        """
        return _Image.CImage8_getRowPtr(self, *args)


    def rect(self, *args):
        """
        rect(self, Position, Size) -> vpl::img::CImage< unsigned __int8,vpl::base::CRefData >::tRect
        rect(self, Position, Size) -> vpl::img::CImage< unsigned __int8,vpl::base::CRefData >::tRect const
        rect(self, XRange, YRange) -> vpl::img::CImage< unsigned __int8,vpl::base::CRefData >::tRect
        rect(self, XRange, YRange) -> vpl::img::CImage< unsigned __int8,vpl::base::CRefData >::tRect const
        """
        return _Image.CImage8_rect(self, *args)


    def row(self, *args):
        """
        row(self, y) -> vpl::img::CImage< unsigned __int8,vpl::base::CRefData >::tRow
        row(self, y) -> vpl::img::CImage< unsigned __int8,vpl::base::CRefData >::tRow const
        """
        return _Image.CImage8_row(self, *args)


    def fill(self, c):
        """fill(self, c) -> CImage8"""
        return _Image.CImage8_fill(self, c)


    def fillEntire(self, c):
        """fillEntire(self, c) -> CImage8"""
        return _Image.CImage8_fillEntire(self, c)


    def fillMargin(self, c):
        """fillMargin(self, c) -> CImage8"""
        return _Image.CImage8_fillMargin(self, c)


    def mirrorMargin(self):
        """mirrorMargin(self) -> CImage8"""
        return _Image.CImage8_mirrorMargin(self)


    def replace(self, Value, NewValue):
        """replace(self, Value, NewValue) -> CImage8"""
        return _Image.CImage8_replace(self, Value, NewValue)


    def abs(self):
        """abs(self) -> CImage8"""
        return _Image.CImage8_abs(self)


    def limit(self, Lower, Upper):
        """limit(self, Lower, Upper) -> CImage8"""
        return _Image.CImage8_limit(self, Lower, Upper)


    def cut(self, Lower, Upper):
        """cut(self, Lower, Upper) -> CImage8"""
        return _Image.CImage8_cut(self, Lower, Upper)


    def subSample(self, Image, k=2, l=2):
        """
        subSample(self, Image, k=2, l=2) -> CImage8
        subSample(self, Image, k=2) -> CImage8
        subSample(self, Image) -> CImage8
        """
        return _Image.CImage8_subSample(self, Image, k, l)


    def interpolate(self, Point):
        """interpolate(self, Point) -> unsigned __int8"""
        return _Image.CImage8_interpolate(self, Point)


    def color2Pixel(self, color):
        """color2Pixel(self, color) -> unsigned __int8"""
        return _Image.CImage8_color2Pixel(self, color)


    def checkPosition(self, x, y):
        """checkPosition(self, x, y) -> bool"""
        return _Image.CImage8_checkPosition(self, x, y)


    def convert_from_Image8(self, Image, Margin=-1):
        """
        convert_from_Image8(self, Image, Margin=-1) -> CImage8
        convert_from_Image8(self, Image) -> CImage8
        """
        return _Image.CImage8_convert_from_Image8(self, Image, Margin)


    def convert_from_Image16(self, Image, Margin=-1):
        """
        convert_from_Image16(self, Image, Margin=-1) -> CImage8
        convert_from_Image16(self, Image) -> CImage8
        """
        return _Image.CImage8_convert_from_Image16(self, Image, Margin)


    def convert_from_Image32(self, Image, Margin=-1):
        """
        convert_from_Image32(self, Image, Margin=-1) -> CImage8
        convert_from_Image32(self, Image) -> CImage8
        """
        return _Image.CImage8_convert_from_Image32(self, Image, Margin)


    def convert_from_FImage(self, Image, Margin=-1):
        """
        convert_from_FImage(self, Image, Margin=-1) -> CImage8
        convert_from_FImage(self, Image) -> CImage8
        """
        return _Image.CImage8_convert_from_FImage(self, Image, Margin)


    def convert_from_DImage(self, Image, Margin=-1):
        """
        convert_from_DImage(self, Image, Margin=-1) -> CImage8
        convert_from_DImage(self, Image) -> CImage8
        """
        return _Image.CImage8_convert_from_DImage(self, Image, Margin)


    def convert_from_RGBImage(self, Image, Margin=-1):
        """
        convert_from_RGBImage(self, Image, Margin=-1) -> CImage8
        convert_from_RGBImage(self, Image) -> CImage8
        """
        return _Image.CImage8_convert_from_RGBImage(self, Image, Margin)


    def convert_from_ComplexImage(self, Image, Margin=-1):
        """
        convert_from_ComplexImage(self, Image, Margin=-1) -> CImage8
        convert_from_ComplexImage(self, Image) -> CImage8
        """
        return _Image.CImage8_convert_from_ComplexImage(self, Image, Margin)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CImage8(self)
        return weakref_proxy(self)
CImage8_swigregister = _Image.CImage8_swigregister
CImage8_swigregister(CImage8)

class CImage16(VPLSwig.Core.Core.CObject, swig_base_Image16, CSerializable):
    """Proxy of C++ vpl::img::CImage<(vpl::img::tPixel16,vpl::base::CRefData)> class."""

    __swig_setmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_Image16, CSerializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CImage16, name, value)
    __swig_getmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_Image16, CSerializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CImage16, name)
    __repr__ = _swig_repr
    CLASS_IMAGE = _Image.CImage16_CLASS_IMAGE

    def __init__(self, *args):
        """
        __init__(self) -> CImage16
        __init__(self, XSize, YSize, Margin=0) -> CImage16
        __init__(self, XSize, YSize) -> CImage16
        __init__(self, Size, Margin=0) -> CImage16
        __init__(self, Size) -> CImage16
        __init__(self, Image, x, y, XSize, YSize) -> CImage16
        __init__(self, Image, x, y, XSize, YSize, arg7) -> CImage16
        __init__(self, Image) -> CImage16
        __init__(self, Image, arg3) -> CImage16
        __init__(self, Image) -> CImage16
        __init__(self, Image, arg3) -> CImage16
        """
        if self.__class__ == CImage16:
            _self = None
        else:
            _self = self
        this = _Image.new_CImage16(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CImage16
    __del__ = lambda self: None

    def resize(self, *args):
        """
        resize(self, XSize, YSize, Margin=0) -> CImage16
        resize(self, XSize, YSize) -> CImage16
        resize(self, Size, Margin=0) -> CImage16
        resize(self, Size) -> CImage16
        """
        return _Image.CImage16_resize(self, *args)


    def copy(self, *args):
        """
        copy(self, Image, Margin=-1) -> CImage16
        copy(self, Image) -> CImage16
        copy(self, Image, x, y, XSize, YSize, Margin=-1) -> CImage16
        copy(self, Image, x, y, XSize, YSize) -> CImage16
        copy(self, Image, Margin=-1) -> CImage16
        copy(self, Image) -> CImage16
        """
        return _Image.CImage16_copy(self, *args)


    def makeRef(self, *args):
        """
        makeRef(self, Image) -> CImage16
        makeRef(self, Image, x, y, XSize, YSize) -> CImage16
        makeRef(self, Image) -> CImage16
        """
        return _Image.CImage16_makeRef(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.CImage16_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.CImage16_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.CImage16_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.CImage16_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.CImage16_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.CImage16_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.CImage16_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.CImage16_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.CImage16_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> unsigned __int16
        __call__(self, x, y) -> unsigned __int16 const
        __call__(self, i) -> unsigned __int16
        __call__(self, i) -> unsigned __int16 const &
        """
        return _Image.CImage16___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> unsigned __int16 const
        at(self, i) -> unsigned __int16 const &
        """
        return _Image.CImage16_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CImage16
        set(self, i, Value) -> CImage16
        """
        return _Image.CImage16_set(self, *args)


    def getPtr(self, *args):
        """
        getPtr(self) -> unsigned __int16
        getPtr(self) -> unsigned __int16 const
        getPtr(self, x, y) -> unsigned __int16
        getPtr(self, x, y) -> unsigned __int16 const *
        """
        return _Image.CImage16_getPtr(self, *args)


    def getRowPtr(self, *args):
        """
        getRowPtr(self, y) -> unsigned __int16
        getRowPtr(self, y) -> unsigned __int16 const *
        """
        return _Image.CImage16_getRowPtr(self, *args)


    def rect(self, *args):
        """
        rect(self, Position, Size) -> vpl::img::CImage< unsigned __int16,vpl::base::CRefData >::tRect
        rect(self, Position, Size) -> vpl::img::CImage< unsigned __int16,vpl::base::CRefData >::tRect const
        rect(self, XRange, YRange) -> vpl::img::CImage< unsigned __int16,vpl::base::CRefData >::tRect
        rect(self, XRange, YRange) -> vpl::img::CImage< unsigned __int16,vpl::base::CRefData >::tRect const
        """
        return _Image.CImage16_rect(self, *args)


    def row(self, *args):
        """
        row(self, y) -> vpl::img::CImage< unsigned __int16,vpl::base::CRefData >::tRow
        row(self, y) -> vpl::img::CImage< unsigned __int16,vpl::base::CRefData >::tRow const
        """
        return _Image.CImage16_row(self, *args)


    def fill(self, c):
        """fill(self, c) -> CImage16"""
        return _Image.CImage16_fill(self, c)


    def fillEntire(self, c):
        """fillEntire(self, c) -> CImage16"""
        return _Image.CImage16_fillEntire(self, c)


    def fillMargin(self, c):
        """fillMargin(self, c) -> CImage16"""
        return _Image.CImage16_fillMargin(self, c)


    def mirrorMargin(self):
        """mirrorMargin(self) -> CImage16"""
        return _Image.CImage16_mirrorMargin(self)


    def replace(self, Value, NewValue):
        """replace(self, Value, NewValue) -> CImage16"""
        return _Image.CImage16_replace(self, Value, NewValue)


    def abs(self):
        """abs(self) -> CImage16"""
        return _Image.CImage16_abs(self)


    def limit(self, Lower, Upper):
        """limit(self, Lower, Upper) -> CImage16"""
        return _Image.CImage16_limit(self, Lower, Upper)


    def cut(self, Lower, Upper):
        """cut(self, Lower, Upper) -> CImage16"""
        return _Image.CImage16_cut(self, Lower, Upper)


    def subSample(self, Image, k=2, l=2):
        """
        subSample(self, Image, k=2, l=2) -> CImage16
        subSample(self, Image, k=2) -> CImage16
        subSample(self, Image) -> CImage16
        """
        return _Image.CImage16_subSample(self, Image, k, l)


    def interpolate(self, Point):
        """interpolate(self, Point) -> unsigned __int16"""
        return _Image.CImage16_interpolate(self, Point)


    def color2Pixel(self, color):
        """color2Pixel(self, color) -> unsigned __int16"""
        return _Image.CImage16_color2Pixel(self, color)


    def checkPosition(self, x, y):
        """checkPosition(self, x, y) -> bool"""
        return _Image.CImage16_checkPosition(self, x, y)


    def convert_from_Image8(self, Image, Margin=-1):
        """
        convert_from_Image8(self, Image, Margin=-1) -> CImage16
        convert_from_Image8(self, Image) -> CImage16
        """
        return _Image.CImage16_convert_from_Image8(self, Image, Margin)


    def convert_from_Image16(self, Image, Margin=-1):
        """
        convert_from_Image16(self, Image, Margin=-1) -> CImage16
        convert_from_Image16(self, Image) -> CImage16
        """
        return _Image.CImage16_convert_from_Image16(self, Image, Margin)


    def convert_from_Image32(self, Image, Margin=-1):
        """
        convert_from_Image32(self, Image, Margin=-1) -> CImage16
        convert_from_Image32(self, Image) -> CImage16
        """
        return _Image.CImage16_convert_from_Image32(self, Image, Margin)


    def convert_from_FImage(self, Image, Margin=-1):
        """
        convert_from_FImage(self, Image, Margin=-1) -> CImage16
        convert_from_FImage(self, Image) -> CImage16
        """
        return _Image.CImage16_convert_from_FImage(self, Image, Margin)


    def convert_from_DImage(self, Image, Margin=-1):
        """
        convert_from_DImage(self, Image, Margin=-1) -> CImage16
        convert_from_DImage(self, Image) -> CImage16
        """
        return _Image.CImage16_convert_from_DImage(self, Image, Margin)


    def convert_from_RGBImage(self, Image, Margin=-1):
        """
        convert_from_RGBImage(self, Image, Margin=-1) -> CImage16
        convert_from_RGBImage(self, Image) -> CImage16
        """
        return _Image.CImage16_convert_from_RGBImage(self, Image, Margin)


    def convert_from_ComplexImage(self, Image, Margin=-1):
        """
        convert_from_ComplexImage(self, Image, Margin=-1) -> CImage16
        convert_from_ComplexImage(self, Image) -> CImage16
        """
        return _Image.CImage16_convert_from_ComplexImage(self, Image, Margin)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CImage16(self)
        return weakref_proxy(self)
CImage16_swigregister = _Image.CImage16_swigregister
CImage16_swigregister(CImage16)

class CImage32(VPLSwig.Core.Core.CObject, swig_base_Image32, CSerializable):
    """Proxy of C++ vpl::img::CImage<(vpl::img::tPixel32,vpl::base::CRefData)> class."""

    __swig_setmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_Image32, CSerializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CImage32, name, value)
    __swig_getmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_Image32, CSerializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CImage32, name)
    __repr__ = _swig_repr
    CLASS_IMAGE = _Image.CImage32_CLASS_IMAGE

    def __init__(self, *args):
        """
        __init__(self) -> CImage32
        __init__(self, XSize, YSize, Margin=0) -> CImage32
        __init__(self, XSize, YSize) -> CImage32
        __init__(self, Size, Margin=0) -> CImage32
        __init__(self, Size) -> CImage32
        __init__(self, Image, x, y, XSize, YSize) -> CImage32
        __init__(self, Image, x, y, XSize, YSize, arg7) -> CImage32
        __init__(self, Image) -> CImage32
        __init__(self, Image, arg3) -> CImage32
        __init__(self, Image) -> CImage32
        __init__(self, Image, arg3) -> CImage32
        """
        if self.__class__ == CImage32:
            _self = None
        else:
            _self = self
        this = _Image.new_CImage32(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CImage32
    __del__ = lambda self: None

    def resize(self, *args):
        """
        resize(self, XSize, YSize, Margin=0) -> CImage32
        resize(self, XSize, YSize) -> CImage32
        resize(self, Size, Margin=0) -> CImage32
        resize(self, Size) -> CImage32
        """
        return _Image.CImage32_resize(self, *args)


    def copy(self, *args):
        """
        copy(self, Image, Margin=-1) -> CImage32
        copy(self, Image) -> CImage32
        copy(self, Image, x, y, XSize, YSize, Margin=-1) -> CImage32
        copy(self, Image, x, y, XSize, YSize) -> CImage32
        copy(self, Image, Margin=-1) -> CImage32
        copy(self, Image) -> CImage32
        """
        return _Image.CImage32_copy(self, *args)


    def makeRef(self, *args):
        """
        makeRef(self, Image) -> CImage32
        makeRef(self, Image, x, y, XSize, YSize) -> CImage32
        makeRef(self, Image) -> CImage32
        """
        return _Image.CImage32_makeRef(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.CImage32_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.CImage32_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.CImage32_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.CImage32_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.CImage32_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.CImage32_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.CImage32_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.CImage32_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.CImage32_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> unsigned __int32
        __call__(self, x, y) -> unsigned __int32 const
        __call__(self, i) -> unsigned __int32
        __call__(self, i) -> unsigned __int32 const &
        """
        return _Image.CImage32___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> unsigned __int32 const
        at(self, i) -> unsigned __int32 const &
        """
        return _Image.CImage32_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CImage32
        set(self, i, Value) -> CImage32
        """
        return _Image.CImage32_set(self, *args)


    def getPtr(self, *args):
        """
        getPtr(self) -> unsigned __int32
        getPtr(self) -> unsigned __int32 const
        getPtr(self, x, y) -> unsigned __int32
        getPtr(self, x, y) -> unsigned __int32 const *
        """
        return _Image.CImage32_getPtr(self, *args)


    def getRowPtr(self, *args):
        """
        getRowPtr(self, y) -> unsigned __int32
        getRowPtr(self, y) -> unsigned __int32 const *
        """
        return _Image.CImage32_getRowPtr(self, *args)


    def rect(self, *args):
        """
        rect(self, Position, Size) -> vpl::img::CImage< unsigned __int32,vpl::base::CRefData >::tRect
        rect(self, Position, Size) -> vpl::img::CImage< unsigned __int32,vpl::base::CRefData >::tRect const
        rect(self, XRange, YRange) -> vpl::img::CImage< unsigned __int32,vpl::base::CRefData >::tRect
        rect(self, XRange, YRange) -> vpl::img::CImage< unsigned __int32,vpl::base::CRefData >::tRect const
        """
        return _Image.CImage32_rect(self, *args)


    def row(self, *args):
        """
        row(self, y) -> vpl::img::CImage< unsigned __int32,vpl::base::CRefData >::tRow
        row(self, y) -> vpl::img::CImage< unsigned __int32,vpl::base::CRefData >::tRow const
        """
        return _Image.CImage32_row(self, *args)


    def fill(self, c):
        """fill(self, c) -> CImage32"""
        return _Image.CImage32_fill(self, c)


    def fillEntire(self, c):
        """fillEntire(self, c) -> CImage32"""
        return _Image.CImage32_fillEntire(self, c)


    def fillMargin(self, c):
        """fillMargin(self, c) -> CImage32"""
        return _Image.CImage32_fillMargin(self, c)


    def mirrorMargin(self):
        """mirrorMargin(self) -> CImage32"""
        return _Image.CImage32_mirrorMargin(self)


    def replace(self, Value, NewValue):
        """replace(self, Value, NewValue) -> CImage32"""
        return _Image.CImage32_replace(self, Value, NewValue)


    def abs(self):
        """abs(self) -> CImage32"""
        return _Image.CImage32_abs(self)


    def limit(self, Lower, Upper):
        """limit(self, Lower, Upper) -> CImage32"""
        return _Image.CImage32_limit(self, Lower, Upper)


    def cut(self, Lower, Upper):
        """cut(self, Lower, Upper) -> CImage32"""
        return _Image.CImage32_cut(self, Lower, Upper)


    def subSample(self, Image, k=2, l=2):
        """
        subSample(self, Image, k=2, l=2) -> CImage32
        subSample(self, Image, k=2) -> CImage32
        subSample(self, Image) -> CImage32
        """
        return _Image.CImage32_subSample(self, Image, k, l)


    def interpolate(self, Point):
        """interpolate(self, Point) -> unsigned __int32"""
        return _Image.CImage32_interpolate(self, Point)


    def color2Pixel(self, color):
        """color2Pixel(self, color) -> unsigned __int32"""
        return _Image.CImage32_color2Pixel(self, color)


    def checkPosition(self, x, y):
        """checkPosition(self, x, y) -> bool"""
        return _Image.CImage32_checkPosition(self, x, y)


    def convert_from_Image8(self, Image, Margin=-1):
        """
        convert_from_Image8(self, Image, Margin=-1) -> CImage32
        convert_from_Image8(self, Image) -> CImage32
        """
        return _Image.CImage32_convert_from_Image8(self, Image, Margin)


    def convert_from_Image16(self, Image, Margin=-1):
        """
        convert_from_Image16(self, Image, Margin=-1) -> CImage32
        convert_from_Image16(self, Image) -> CImage32
        """
        return _Image.CImage32_convert_from_Image16(self, Image, Margin)


    def convert_from_Image32(self, Image, Margin=-1):
        """
        convert_from_Image32(self, Image, Margin=-1) -> CImage32
        convert_from_Image32(self, Image) -> CImage32
        """
        return _Image.CImage32_convert_from_Image32(self, Image, Margin)


    def convert_from_FImage(self, Image, Margin=-1):
        """
        convert_from_FImage(self, Image, Margin=-1) -> CImage32
        convert_from_FImage(self, Image) -> CImage32
        """
        return _Image.CImage32_convert_from_FImage(self, Image, Margin)


    def convert_from_DImage(self, Image, Margin=-1):
        """
        convert_from_DImage(self, Image, Margin=-1) -> CImage32
        convert_from_DImage(self, Image) -> CImage32
        """
        return _Image.CImage32_convert_from_DImage(self, Image, Margin)


    def convert_from_RGBImage(self, Image, Margin=-1):
        """
        convert_from_RGBImage(self, Image, Margin=-1) -> CImage32
        convert_from_RGBImage(self, Image) -> CImage32
        """
        return _Image.CImage32_convert_from_RGBImage(self, Image, Margin)


    def convert_from_ComplexImage(self, Image, Margin=-1):
        """
        convert_from_ComplexImage(self, Image, Margin=-1) -> CImage32
        convert_from_ComplexImage(self, Image) -> CImage32
        """
        return _Image.CImage32_convert_from_ComplexImage(self, Image, Margin)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CImage32(self)
        return weakref_proxy(self)
CImage32_swigregister = _Image.CImage32_swigregister
CImage32_swigregister(CImage32)

class CFImage(VPLSwig.Core.Core.CObject, swig_base_FImage, CSerializable):
    """Proxy of C++ vpl::img::CImage<(vpl::img::tFloatPixel,vpl::base::CRefData)> class."""

    __swig_setmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_FImage, CSerializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFImage, name, value)
    __swig_getmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_FImage, CSerializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFImage, name)
    __repr__ = _swig_repr
    CLASS_IMAGE = _Image.CFImage_CLASS_IMAGE

    def __init__(self, *args):
        """
        __init__(self) -> CFImage
        __init__(self, XSize, YSize, Margin=0) -> CFImage
        __init__(self, XSize, YSize) -> CFImage
        __init__(self, Size, Margin=0) -> CFImage
        __init__(self, Size) -> CFImage
        __init__(self, Image, x, y, XSize, YSize) -> CFImage
        __init__(self, Image, x, y, XSize, YSize, arg7) -> CFImage
        __init__(self, Image) -> CFImage
        __init__(self, Image, arg3) -> CFImage
        __init__(self, Image) -> CFImage
        __init__(self, Image, arg3) -> CFImage
        """
        if self.__class__ == CFImage:
            _self = None
        else:
            _self = self
        this = _Image.new_CFImage(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CFImage
    __del__ = lambda self: None

    def resize(self, *args):
        """
        resize(self, XSize, YSize, Margin=0) -> CFImage
        resize(self, XSize, YSize) -> CFImage
        resize(self, Size, Margin=0) -> CFImage
        resize(self, Size) -> CFImage
        """
        return _Image.CFImage_resize(self, *args)


    def copy(self, *args):
        """
        copy(self, Image, Margin=-1) -> CFImage
        copy(self, Image) -> CFImage
        copy(self, Image, x, y, XSize, YSize, Margin=-1) -> CFImage
        copy(self, Image, x, y, XSize, YSize) -> CFImage
        copy(self, Image, Margin=-1) -> CFImage
        copy(self, Image) -> CFImage
        """
        return _Image.CFImage_copy(self, *args)


    def makeRef(self, *args):
        """
        makeRef(self, Image) -> CFImage
        makeRef(self, Image, x, y, XSize, YSize) -> CFImage
        makeRef(self, Image) -> CFImage
        """
        return _Image.CFImage_makeRef(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.CFImage_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.CFImage_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.CFImage_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.CFImage_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.CFImage_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.CFImage_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.CFImage_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.CFImage_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.CFImage_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> float
        __call__(self, x, y) -> float const
        __call__(self, i) -> float
        __call__(self, i) -> float const &
        """
        return _Image.CFImage___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> float const
        at(self, i) -> float const &
        """
        return _Image.CFImage_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CFImage
        set(self, i, Value) -> CFImage
        """
        return _Image.CFImage_set(self, *args)


    def getPtr(self, *args):
        """
        getPtr(self) -> float
        getPtr(self) -> float const
        getPtr(self, x, y) -> float
        getPtr(self, x, y) -> float const *
        """
        return _Image.CFImage_getPtr(self, *args)


    def getRowPtr(self, *args):
        """
        getRowPtr(self, y) -> float
        getRowPtr(self, y) -> float const *
        """
        return _Image.CFImage_getRowPtr(self, *args)


    def rect(self, *args):
        """
        rect(self, Position, Size) -> vpl::img::CImage< float,vpl::base::CRefData >::tRect
        rect(self, Position, Size) -> vpl::img::CImage< float,vpl::base::CRefData >::tRect const
        rect(self, XRange, YRange) -> vpl::img::CImage< float,vpl::base::CRefData >::tRect
        rect(self, XRange, YRange) -> vpl::img::CImage< float,vpl::base::CRefData >::tRect const
        """
        return _Image.CFImage_rect(self, *args)


    def row(self, *args):
        """
        row(self, y) -> vpl::img::CImage< float,vpl::base::CRefData >::tRow
        row(self, y) -> vpl::img::CImage< float,vpl::base::CRefData >::tRow const
        """
        return _Image.CFImage_row(self, *args)


    def fill(self, c):
        """fill(self, c) -> CFImage"""
        return _Image.CFImage_fill(self, c)


    def fillEntire(self, c):
        """fillEntire(self, c) -> CFImage"""
        return _Image.CFImage_fillEntire(self, c)


    def fillMargin(self, c):
        """fillMargin(self, c) -> CFImage"""
        return _Image.CFImage_fillMargin(self, c)


    def mirrorMargin(self):
        """mirrorMargin(self) -> CFImage"""
        return _Image.CFImage_mirrorMargin(self)


    def replace(self, Value, NewValue):
        """replace(self, Value, NewValue) -> CFImage"""
        return _Image.CFImage_replace(self, Value, NewValue)


    def abs(self):
        """abs(self) -> CFImage"""
        return _Image.CFImage_abs(self)


    def limit(self, Lower, Upper):
        """limit(self, Lower, Upper) -> CFImage"""
        return _Image.CFImage_limit(self, Lower, Upper)


    def cut(self, Lower, Upper):
        """cut(self, Lower, Upper) -> CFImage"""
        return _Image.CFImage_cut(self, Lower, Upper)


    def subSample(self, Image, k=2, l=2):
        """
        subSample(self, Image, k=2, l=2) -> CFImage
        subSample(self, Image, k=2) -> CFImage
        subSample(self, Image) -> CFImage
        """
        return _Image.CFImage_subSample(self, Image, k, l)


    def interpolate(self, Point):
        """interpolate(self, Point) -> float"""
        return _Image.CFImage_interpolate(self, Point)


    def color2Pixel(self, color):
        """color2Pixel(self, color) -> float"""
        return _Image.CFImage_color2Pixel(self, color)


    def checkPosition(self, x, y):
        """checkPosition(self, x, y) -> bool"""
        return _Image.CFImage_checkPosition(self, x, y)


    def convert_from_Image8(self, Image, Margin=-1):
        """
        convert_from_Image8(self, Image, Margin=-1) -> CFImage
        convert_from_Image8(self, Image) -> CFImage
        """
        return _Image.CFImage_convert_from_Image8(self, Image, Margin)


    def convert_from_Image16(self, Image, Margin=-1):
        """
        convert_from_Image16(self, Image, Margin=-1) -> CFImage
        convert_from_Image16(self, Image) -> CFImage
        """
        return _Image.CFImage_convert_from_Image16(self, Image, Margin)


    def convert_from_Image32(self, Image, Margin=-1):
        """
        convert_from_Image32(self, Image, Margin=-1) -> CFImage
        convert_from_Image32(self, Image) -> CFImage
        """
        return _Image.CFImage_convert_from_Image32(self, Image, Margin)


    def convert_from_FImage(self, Image, Margin=-1):
        """
        convert_from_FImage(self, Image, Margin=-1) -> CFImage
        convert_from_FImage(self, Image) -> CFImage
        """
        return _Image.CFImage_convert_from_FImage(self, Image, Margin)


    def convert_from_DImage(self, Image, Margin=-1):
        """
        convert_from_DImage(self, Image, Margin=-1) -> CFImage
        convert_from_DImage(self, Image) -> CFImage
        """
        return _Image.CFImage_convert_from_DImage(self, Image, Margin)


    def convert_from_RGBImage(self, Image, Margin=-1):
        """
        convert_from_RGBImage(self, Image, Margin=-1) -> CFImage
        convert_from_RGBImage(self, Image) -> CFImage
        """
        return _Image.CFImage_convert_from_RGBImage(self, Image, Margin)


    def convert_from_ComplexImage(self, Image, Margin=-1):
        """
        convert_from_ComplexImage(self, Image, Margin=-1) -> CFImage
        convert_from_ComplexImage(self, Image) -> CFImage
        """
        return _Image.CFImage_convert_from_ComplexImage(self, Image, Margin)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CFImage(self)
        return weakref_proxy(self)
CFImage_swigregister = _Image.CFImage_swigregister
CFImage_swigregister(CFImage)

class CDImage(VPLSwig.Core.Core.CObject, swig_base_DImage, CSerializable):
    """Proxy of C++ vpl::img::CImage<(vpl::img::tDensityPixel,vpl::base::CRefData)> class."""

    __swig_setmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_DImage, CSerializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDImage, name, value)
    __swig_getmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_DImage, CSerializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDImage, name)
    __repr__ = _swig_repr
    CLASS_IMAGE = _Image.CDImage_CLASS_IMAGE

    def __init__(self, *args):
        """
        __init__(self) -> CDImage
        __init__(self, XSize, YSize, Margin=0) -> CDImage
        __init__(self, XSize, YSize) -> CDImage
        __init__(self, Size, Margin=0) -> CDImage
        __init__(self, Size) -> CDImage
        __init__(self, Image, x, y, XSize, YSize) -> CDImage
        __init__(self, Image, x, y, XSize, YSize, arg7) -> CDImage
        __init__(self, Image) -> CDImage
        __init__(self, Image, arg3) -> CDImage
        __init__(self, Image) -> CDImage
        __init__(self, Image, arg3) -> CDImage
        """
        if self.__class__ == CDImage:
            _self = None
        else:
            _self = self
        this = _Image.new_CDImage(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CDImage
    __del__ = lambda self: None

    def resize(self, *args):
        """
        resize(self, XSize, YSize, Margin=0) -> CDImage
        resize(self, XSize, YSize) -> CDImage
        resize(self, Size, Margin=0) -> CDImage
        resize(self, Size) -> CDImage
        """
        return _Image.CDImage_resize(self, *args)


    def copy(self, *args):
        """
        copy(self, Image, Margin=-1) -> CDImage
        copy(self, Image) -> CDImage
        copy(self, Image, x, y, XSize, YSize, Margin=-1) -> CDImage
        copy(self, Image, x, y, XSize, YSize) -> CDImage
        copy(self, Image, Margin=-1) -> CDImage
        copy(self, Image) -> CDImage
        """
        return _Image.CDImage_copy(self, *args)


    def makeRef(self, *args):
        """
        makeRef(self, Image) -> CDImage
        makeRef(self, Image, x, y, XSize, YSize) -> CDImage
        makeRef(self, Image) -> CDImage
        """
        return _Image.CDImage_makeRef(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.CDImage_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.CDImage_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.CDImage_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.CDImage_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.CDImage_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.CDImage_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.CDImage_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.CDImage_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.CDImage_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> __int16
        __call__(self, x, y) -> __int16 const
        __call__(self, i) -> __int16
        __call__(self, i) -> __int16 const &
        """
        return _Image.CDImage___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> __int16 const
        at(self, i) -> __int16 const &
        """
        return _Image.CDImage_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CDImage
        set(self, i, Value) -> CDImage
        """
        return _Image.CDImage_set(self, *args)


    def getPtr(self, *args):
        """
        getPtr(self) -> __int16
        getPtr(self) -> __int16 const
        getPtr(self, x, y) -> __int16
        getPtr(self, x, y) -> __int16 const *
        """
        return _Image.CDImage_getPtr(self, *args)


    def getRowPtr(self, *args):
        """
        getRowPtr(self, y) -> __int16
        getRowPtr(self, y) -> __int16 const *
        """
        return _Image.CDImage_getRowPtr(self, *args)


    def rect(self, *args):
        """
        rect(self, Position, Size) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRect
        rect(self, Position, Size) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRect const
        rect(self, XRange, YRange) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRect
        rect(self, XRange, YRange) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRect const
        """
        return _Image.CDImage_rect(self, *args)


    def row(self, *args):
        """
        row(self, y) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRow
        row(self, y) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRow const
        """
        return _Image.CDImage_row(self, *args)


    def fill(self, c):
        """fill(self, c) -> CDImage"""
        return _Image.CDImage_fill(self, c)


    def fillEntire(self, c):
        """fillEntire(self, c) -> CDImage"""
        return _Image.CDImage_fillEntire(self, c)


    def fillMargin(self, c):
        """fillMargin(self, c) -> CDImage"""
        return _Image.CDImage_fillMargin(self, c)


    def mirrorMargin(self):
        """mirrorMargin(self) -> CDImage"""
        return _Image.CDImage_mirrorMargin(self)


    def replace(self, Value, NewValue):
        """replace(self, Value, NewValue) -> CDImage"""
        return _Image.CDImage_replace(self, Value, NewValue)


    def abs(self):
        """abs(self) -> CDImage"""
        return _Image.CDImage_abs(self)


    def limit(self, Lower, Upper):
        """limit(self, Lower, Upper) -> CDImage"""
        return _Image.CDImage_limit(self, Lower, Upper)


    def cut(self, Lower, Upper):
        """cut(self, Lower, Upper) -> CDImage"""
        return _Image.CDImage_cut(self, Lower, Upper)


    def subSample(self, Image, k=2, l=2):
        """
        subSample(self, Image, k=2, l=2) -> CDImage
        subSample(self, Image, k=2) -> CDImage
        subSample(self, Image) -> CDImage
        """
        return _Image.CDImage_subSample(self, Image, k, l)


    def interpolate(self, Point):
        """interpolate(self, Point) -> __int16"""
        return _Image.CDImage_interpolate(self, Point)


    def color2Pixel(self, color):
        """color2Pixel(self, color) -> __int16"""
        return _Image.CDImage_color2Pixel(self, color)


    def checkPosition(self, x, y):
        """checkPosition(self, x, y) -> bool"""
        return _Image.CDImage_checkPosition(self, x, y)


    def convert_from_Image8(self, Image, Margin=-1):
        """
        convert_from_Image8(self, Image, Margin=-1) -> CDImage
        convert_from_Image8(self, Image) -> CDImage
        """
        return _Image.CDImage_convert_from_Image8(self, Image, Margin)


    def convert_from_Image16(self, Image, Margin=-1):
        """
        convert_from_Image16(self, Image, Margin=-1) -> CDImage
        convert_from_Image16(self, Image) -> CDImage
        """
        return _Image.CDImage_convert_from_Image16(self, Image, Margin)


    def convert_from_Image32(self, Image, Margin=-1):
        """
        convert_from_Image32(self, Image, Margin=-1) -> CDImage
        convert_from_Image32(self, Image) -> CDImage
        """
        return _Image.CDImage_convert_from_Image32(self, Image, Margin)


    def convert_from_FImage(self, Image, Margin=-1):
        """
        convert_from_FImage(self, Image, Margin=-1) -> CDImage
        convert_from_FImage(self, Image) -> CDImage
        """
        return _Image.CDImage_convert_from_FImage(self, Image, Margin)


    def convert_from_DImage(self, Image, Margin=-1):
        """
        convert_from_DImage(self, Image, Margin=-1) -> CDImage
        convert_from_DImage(self, Image) -> CDImage
        """
        return _Image.CDImage_convert_from_DImage(self, Image, Margin)


    def convert_from_RGBImage(self, Image, Margin=-1):
        """
        convert_from_RGBImage(self, Image, Margin=-1) -> CDImage
        convert_from_RGBImage(self, Image) -> CDImage
        """
        return _Image.CDImage_convert_from_RGBImage(self, Image, Margin)


    def convert_from_ComplexImage(self, Image, Margin=-1):
        """
        convert_from_ComplexImage(self, Image, Margin=-1) -> CDImage
        convert_from_ComplexImage(self, Image) -> CDImage
        """
        return _Image.CDImage_convert_from_ComplexImage(self, Image, Margin)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CDImage(self)
        return weakref_proxy(self)
CDImage_swigregister = _Image.CDImage_swigregister
CDImage_swigregister(CDImage)

class CRGBImage(VPLSwig.Core.Core.CObject, swig_base_RGBImage, CSerializable):
    """Proxy of C++ vpl::img::CImage<(vpl::img::tRGBPixel,vpl::base::CRefData)> class."""

    __swig_setmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_RGBImage, CSerializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRGBImage, name, value)
    __swig_getmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_RGBImage, CSerializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRGBImage, name)
    __repr__ = _swig_repr
    CLASS_IMAGE = _Image.CRGBImage_CLASS_IMAGE

    def __init__(self, *args):
        """
        __init__(self) -> CRGBImage
        __init__(self, XSize, YSize, Margin=0) -> CRGBImage
        __init__(self, XSize, YSize) -> CRGBImage
        __init__(self, Size, Margin=0) -> CRGBImage
        __init__(self, Size) -> CRGBImage
        __init__(self, Image, x, y, XSize, YSize) -> CRGBImage
        __init__(self, Image, x, y, XSize, YSize, arg7) -> CRGBImage
        __init__(self, Image) -> CRGBImage
        __init__(self, Image, arg3) -> CRGBImage
        __init__(self, Image) -> CRGBImage
        __init__(self, Image, arg3) -> CRGBImage
        """
        if self.__class__ == CRGBImage:
            _self = None
        else:
            _self = self
        this = _Image.new_CRGBImage(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CRGBImage
    __del__ = lambda self: None

    def resize(self, *args):
        """
        resize(self, XSize, YSize, Margin=0) -> CRGBImage
        resize(self, XSize, YSize) -> CRGBImage
        resize(self, Size, Margin=0) -> CRGBImage
        resize(self, Size) -> CRGBImage
        """
        return _Image.CRGBImage_resize(self, *args)


    def copy(self, *args):
        """
        copy(self, Image, Margin=-1) -> CRGBImage
        copy(self, Image) -> CRGBImage
        copy(self, Image, x, y, XSize, YSize, Margin=-1) -> CRGBImage
        copy(self, Image, x, y, XSize, YSize) -> CRGBImage
        copy(self, Image, Margin=-1) -> CRGBImage
        copy(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_copy(self, *args)


    def makeRef(self, *args):
        """
        makeRef(self, Image) -> CRGBImage
        makeRef(self, Image, x, y, XSize, YSize) -> CRGBImage
        makeRef(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_makeRef(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.CRGBImage_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.CRGBImage_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.CRGBImage_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.CRGBImage_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.CRGBImage_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.CRGBImage_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.CRGBImage_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.CRGBImage_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.CRGBImage_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> CRGBPixel
        __call__(self, x, y) -> CRGBPixel
        __call__(self, i) -> CRGBPixel
        __call__(self, i) -> CRGBPixel
        """
        return _Image.CRGBImage___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> CRGBPixel
        at(self, i) -> CRGBPixel
        """
        return _Image.CRGBImage_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CRGBImage
        set(self, i, Value) -> CRGBImage
        """
        return _Image.CRGBImage_set(self, *args)


    def getPtr(self, *args):
        """
        getPtr(self) -> CRGBPixel
        getPtr(self) -> CRGBPixel
        getPtr(self, x, y) -> CRGBPixel
        getPtr(self, x, y) -> CRGBPixel
        """
        return _Image.CRGBImage_getPtr(self, *args)


    def getRowPtr(self, *args):
        """
        getRowPtr(self, y) -> CRGBPixel
        getRowPtr(self, y) -> CRGBPixel
        """
        return _Image.CRGBImage_getRowPtr(self, *args)


    def rect(self, *args):
        """
        rect(self, Position, Size) -> vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData >::tRect
        rect(self, Position, Size) -> vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData >::tRect const
        rect(self, XRange, YRange) -> vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData >::tRect
        rect(self, XRange, YRange) -> vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData >::tRect const
        """
        return _Image.CRGBImage_rect(self, *args)


    def row(self, *args):
        """
        row(self, y) -> vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData >::tRow
        row(self, y) -> vpl::img::CImage< vpl::img::CRGBPixel,vpl::base::CRefData >::tRow const
        """
        return _Image.CRGBImage_row(self, *args)


    def fill(self, c):
        """fill(self, c) -> CRGBImage"""
        return _Image.CRGBImage_fill(self, c)


    def fillEntire(self, c):
        """fillEntire(self, c) -> CRGBImage"""
        return _Image.CRGBImage_fillEntire(self, c)


    def fillMargin(self, c):
        """fillMargin(self, c) -> CRGBImage"""
        return _Image.CRGBImage_fillMargin(self, c)


    def mirrorMargin(self):
        """mirrorMargin(self) -> CRGBImage"""
        return _Image.CRGBImage_mirrorMargin(self)


    def replace(self, Value, NewValue):
        """replace(self, Value, NewValue) -> CRGBImage"""
        return _Image.CRGBImage_replace(self, Value, NewValue)


    def abs(self):
        """abs(self) -> CRGBImage"""
        return _Image.CRGBImage_abs(self)


    def limit(self, Lower, Upper):
        """limit(self, Lower, Upper) -> CRGBImage"""
        return _Image.CRGBImage_limit(self, Lower, Upper)


    def cut(self, Lower, Upper):
        """cut(self, Lower, Upper) -> CRGBImage"""
        return _Image.CRGBImage_cut(self, Lower, Upper)


    def subSample(self, Image, k=2, l=2):
        """
        subSample(self, Image, k=2, l=2) -> CRGBImage
        subSample(self, Image, k=2) -> CRGBImage
        subSample(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_subSample(self, Image, k, l)


    def interpolate(self, Point):
        """interpolate(self, Point) -> CRGBPixel"""
        return _Image.CRGBImage_interpolate(self, Point)


    def color2Pixel(self, color):
        """color2Pixel(self, color) -> CRGBPixel"""
        return _Image.CRGBImage_color2Pixel(self, color)


    def checkPosition(self, x, y):
        """checkPosition(self, x, y) -> bool"""
        return _Image.CRGBImage_checkPosition(self, x, y)


    def convert_from_Image8(self, Image, Margin=-1):
        """
        convert_from_Image8(self, Image, Margin=-1) -> CRGBImage
        convert_from_Image8(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_convert_from_Image8(self, Image, Margin)


    def convert_from_Image16(self, Image, Margin=-1):
        """
        convert_from_Image16(self, Image, Margin=-1) -> CRGBImage
        convert_from_Image16(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_convert_from_Image16(self, Image, Margin)


    def convert_from_Image32(self, Image, Margin=-1):
        """
        convert_from_Image32(self, Image, Margin=-1) -> CRGBImage
        convert_from_Image32(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_convert_from_Image32(self, Image, Margin)


    def convert_from_FImage(self, Image, Margin=-1):
        """
        convert_from_FImage(self, Image, Margin=-1) -> CRGBImage
        convert_from_FImage(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_convert_from_FImage(self, Image, Margin)


    def convert_from_DImage(self, Image, Margin=-1):
        """
        convert_from_DImage(self, Image, Margin=-1) -> CRGBImage
        convert_from_DImage(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_convert_from_DImage(self, Image, Margin)


    def convert_from_RGBImage(self, Image, Margin=-1):
        """
        convert_from_RGBImage(self, Image, Margin=-1) -> CRGBImage
        convert_from_RGBImage(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_convert_from_RGBImage(self, Image, Margin)


    def convert_from_ComplexImage(self, Image, Margin=-1):
        """
        convert_from_ComplexImage(self, Image, Margin=-1) -> CRGBImage
        convert_from_ComplexImage(self, Image) -> CRGBImage
        """
        return _Image.CRGBImage_convert_from_ComplexImage(self, Image, Margin)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CRGBImage(self)
        return weakref_proxy(self)
CRGBImage_swigregister = _Image.CRGBImage_swigregister
CRGBImage_swigregister(CRGBImage)

class CComplexImage(VPLSwig.Core.Core.CObject, swig_base_ComplexImage, CSerializable):
    """Proxy of C++ vpl::img::CImage<(vpl::img::tComplexPixel,vpl::base::CRefData)> class."""

    __swig_setmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_ComplexImage, CSerializable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CComplexImage, name, value)
    __swig_getmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject, swig_base_ComplexImage, CSerializable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CComplexImage, name)
    __repr__ = _swig_repr
    CLASS_IMAGE = _Image.CComplexImage_CLASS_IMAGE

    def __init__(self, *args):
        """
        __init__(self) -> CComplexImage
        __init__(self, XSize, YSize, Margin=0) -> CComplexImage
        __init__(self, XSize, YSize) -> CComplexImage
        __init__(self, Size, Margin=0) -> CComplexImage
        __init__(self, Size) -> CComplexImage
        __init__(self, Image, x, y, XSize, YSize) -> CComplexImage
        __init__(self, Image, x, y, XSize, YSize, arg7) -> CComplexImage
        __init__(self, Image) -> CComplexImage
        __init__(self, Image, arg3) -> CComplexImage
        __init__(self, Image) -> CComplexImage
        __init__(self, Image, arg3) -> CComplexImage
        """
        if self.__class__ == CComplexImage:
            _self = None
        else:
            _self = self
        this = _Image.new_CComplexImage(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CComplexImage
    __del__ = lambda self: None

    def resize(self, *args):
        """
        resize(self, XSize, YSize, Margin=0) -> CComplexImage
        resize(self, XSize, YSize) -> CComplexImage
        resize(self, Size, Margin=0) -> CComplexImage
        resize(self, Size) -> CComplexImage
        """
        return _Image.CComplexImage_resize(self, *args)


    def copy(self, *args):
        """
        copy(self, Image, Margin=-1) -> CComplexImage
        copy(self, Image) -> CComplexImage
        copy(self, Image, x, y, XSize, YSize, Margin=-1) -> CComplexImage
        copy(self, Image, x, y, XSize, YSize) -> CComplexImage
        copy(self, Image, Margin=-1) -> CComplexImage
        copy(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_copy(self, *args)


    def makeRef(self, *args):
        """
        makeRef(self, Image) -> CComplexImage
        makeRef(self, Image, x, y, XSize, YSize) -> CComplexImage
        makeRef(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_makeRef(self, *args)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.CComplexImage_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.CComplexImage_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.CComplexImage_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.CComplexImage_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.CComplexImage_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.CComplexImage_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.CComplexImage_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.CComplexImage_getMargin(self)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.CComplexImage_getIdx(self, x, y)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> vpl::math::CComplex< float >
        __call__(self, x, y) -> vpl::math::CComplex< float > const
        __call__(self, i) -> vpl::math::CComplex< float >
        __call__(self, i) -> vpl::math::CComplex< float > const &
        """
        return _Image.CComplexImage___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> vpl::math::CComplex< float > const
        at(self, i) -> vpl::math::CComplex< float > const &
        """
        return _Image.CComplexImage_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CComplexImage
        set(self, i, Value) -> CComplexImage
        """
        return _Image.CComplexImage_set(self, *args)


    def getPtr(self, *args):
        """
        getPtr(self) -> vpl::math::CComplex< float >
        getPtr(self) -> vpl::math::CComplex< float > const
        getPtr(self, x, y) -> vpl::math::CComplex< float >
        getPtr(self, x, y) -> vpl::math::CComplex< float > const *
        """
        return _Image.CComplexImage_getPtr(self, *args)


    def getRowPtr(self, *args):
        """
        getRowPtr(self, y) -> vpl::math::CComplex< float >
        getRowPtr(self, y) -> vpl::math::CComplex< float > const *
        """
        return _Image.CComplexImage_getRowPtr(self, *args)


    def rect(self, *args):
        """
        rect(self, Position, Size) -> vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData >::tRect
        rect(self, Position, Size) -> vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData >::tRect const
        rect(self, XRange, YRange) -> vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData >::tRect
        rect(self, XRange, YRange) -> vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData >::tRect const
        """
        return _Image.CComplexImage_rect(self, *args)


    def row(self, *args):
        """
        row(self, y) -> vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData >::tRow
        row(self, y) -> vpl::img::CImage< vpl::math::CComplex< float >,vpl::base::CRefData >::tRow const
        """
        return _Image.CComplexImage_row(self, *args)


    def fill(self, c):
        """fill(self, c) -> CComplexImage"""
        return _Image.CComplexImage_fill(self, c)


    def fillEntire(self, c):
        """fillEntire(self, c) -> CComplexImage"""
        return _Image.CComplexImage_fillEntire(self, c)


    def fillMargin(self, c):
        """fillMargin(self, c) -> CComplexImage"""
        return _Image.CComplexImage_fillMargin(self, c)


    def mirrorMargin(self):
        """mirrorMargin(self) -> CComplexImage"""
        return _Image.CComplexImage_mirrorMargin(self)


    def replace(self, Value, NewValue):
        """replace(self, Value, NewValue) -> CComplexImage"""
        return _Image.CComplexImage_replace(self, Value, NewValue)


    def abs(self):
        """abs(self) -> CComplexImage"""
        return _Image.CComplexImage_abs(self)


    def limit(self, Lower, Upper):
        """limit(self, Lower, Upper) -> CComplexImage"""
        return _Image.CComplexImage_limit(self, Lower, Upper)


    def cut(self, Lower, Upper):
        """cut(self, Lower, Upper) -> CComplexImage"""
        return _Image.CComplexImage_cut(self, Lower, Upper)


    def subSample(self, Image, k=2, l=2):
        """
        subSample(self, Image, k=2, l=2) -> CComplexImage
        subSample(self, Image, k=2) -> CComplexImage
        subSample(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_subSample(self, Image, k, l)


    def interpolate(self, Point):
        """interpolate(self, Point) -> vpl::math::CComplex< float >"""
        return _Image.CComplexImage_interpolate(self, Point)


    def color2Pixel(self, color):
        """color2Pixel(self, color) -> vpl::math::CComplex< float >"""
        return _Image.CComplexImage_color2Pixel(self, color)


    def checkPosition(self, x, y):
        """checkPosition(self, x, y) -> bool"""
        return _Image.CComplexImage_checkPosition(self, x, y)


    def convert_from_Image8(self, Image, Margin=-1):
        """
        convert_from_Image8(self, Image, Margin=-1) -> CComplexImage
        convert_from_Image8(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_convert_from_Image8(self, Image, Margin)


    def convert_from_Image16(self, Image, Margin=-1):
        """
        convert_from_Image16(self, Image, Margin=-1) -> CComplexImage
        convert_from_Image16(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_convert_from_Image16(self, Image, Margin)


    def convert_from_Image32(self, Image, Margin=-1):
        """
        convert_from_Image32(self, Image, Margin=-1) -> CComplexImage
        convert_from_Image32(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_convert_from_Image32(self, Image, Margin)


    def convert_from_FImage(self, Image, Margin=-1):
        """
        convert_from_FImage(self, Image, Margin=-1) -> CComplexImage
        convert_from_FImage(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_convert_from_FImage(self, Image, Margin)


    def convert_from_DImage(self, Image, Margin=-1):
        """
        convert_from_DImage(self, Image, Margin=-1) -> CComplexImage
        convert_from_DImage(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_convert_from_DImage(self, Image, Margin)


    def convert_from_RGBImage(self, Image, Margin=-1):
        """
        convert_from_RGBImage(self, Image, Margin=-1) -> CComplexImage
        convert_from_RGBImage(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_convert_from_RGBImage(self, Image, Margin)


    def convert_from_ComplexImage(self, Image, Margin=-1):
        """
        convert_from_ComplexImage(self, Image, Margin=-1) -> CComplexImage
        convert_from_ComplexImage(self, Image) -> CComplexImage
        """
        return _Image.CComplexImage_convert_from_ComplexImage(self, Image, Margin)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CComplexImage(self)
        return weakref_proxy(self)
CComplexImage_swigregister = _Image.CComplexImage_swigregister
CComplexImage_swigregister(CComplexImage)

PLANE_NON = _Image.PLANE_NON
PLANE_XY = _Image.PLANE_XY
PLANE_XZ = _Image.PLANE_XZ
PLANE_YZ = _Image.PLANE_YZ
class CSlice(CDImage):
    """Proxy of C++ vpl::img::CSlice class."""

    __swig_setmethods__ = {}
    for _s in [CDImage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSlice, name, value)
    __swig_getmethods__ = {}
    for _s in [CDImage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSlice, name)
    __repr__ = _swig_repr

    def getName():
        """getName() -> char const *"""
        return _Image.CSlice_getName()

    getName = staticmethod(getName)

    def getCompression():
        """getCompression() -> int"""
        return _Image.CSlice_getCompression()

    getCompression = staticmethod(getCompression)
    DEFAULT_MARGIN = _Image.CSlice_DEFAULT_MARGIN

    def __init__(self, *args):
        """
        __init__(self) -> CSlice
        __init__(self, XSize, YSize, Margin) -> CSlice
        __init__(self, XSize, YSize) -> CSlice
        __init__(self, Slice) -> CSlice
        __init__(self, Slice, arg3) -> CSlice
        __init__(self, Image) -> CSlice
        __init__(self, Image, arg3) -> CSlice
        """
        if self.__class__ == CSlice:
            _self = None
        else:
            _self = self
        this = _Image.new_CSlice(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CSlice
    __del__ = lambda self: None

    def resize(self, *args):
        """
        resize(self, XSize, YSize, Margin) -> CSlice
        resize(self, XSize, YSize) -> CSlice
        resize(self, Size, Margin) -> CSlice
        resize(self, Size) -> CSlice
        """
        return _Image.CSlice_resize(self, *args)


    def copy(self, *args):
        """
        copy(self, Image, Margin=-1) -> CSlice
        copy(self, Image) -> CSlice
        copy(self, Slice, Margin=-1) -> CSlice
        copy(self, Slice) -> CSlice
        """
        return _Image.CSlice_copy(self, *args)


    def makeRef(self, *args):
        """
        makeRef(self, Image) -> CSlice
        makeRef(self, Slice) -> CSlice
        """
        return _Image.CSlice_makeRef(self, *args)


    def copyProps(self, Slice):
        """copyProps(self, Slice) -> CSlice"""
        return _Image.CSlice_copyProps(self, Slice)


    def getDX(self):
        """getDX(self) -> double"""
        return _Image.CSlice_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _Image.CSlice_getDY(self)


    def setPixel(self, dDX, dDY):
        """setPixel(self, dDX, dDY) -> CSlice"""
        return _Image.CSlice_setPixel(self, dDX, dDY)


    def getThickness(self):
        """getThickness(self) -> double"""
        return _Image.CSlice_getThickness(self)


    def setThickness(self, dThickness):
        """setThickness(self, dThickness) -> CSlice"""
        return _Image.CSlice_setThickness(self, dThickness)


    def getIndex(self):
        """getIndex(self) -> vpl::tSize"""
        return _Image.CSlice_getIndex(self)


    def setIndex(self, Index):
        """setIndex(self, Index) -> CSlice"""
        return _Image.CSlice_setIndex(self, Index)


    def getPosition(self):
        """getPosition(self) -> double"""
        return _Image.CSlice_getPosition(self)


    def setPosition(self, dPosition):
        """setPosition(self, dPosition) -> CSlice"""
        return _Image.CSlice_setPosition(self, dPosition)


    def getOrientation(self):
        """getOrientation(self) -> vpl::img::EPlane"""
        return _Image.CSlice_getOrientation(self)


    def setOrientation(self, ePlane):
        """setOrientation(self, ePlane) -> CSlice"""
        return _Image.CSlice_setOrientation(self, ePlane)


    def __lt__(self, Slice):
        """__lt__(self, Slice) -> bool"""
        return _Image.CSlice___lt__(self, Slice)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CSlice(self)
        return weakref_proxy(self)
CSlice_swigregister = _Image.CSlice_swigregister
CSlice_swigregister(CSlice)

def CSlice_getName():
    """CSlice_getName() -> char const *"""
    return _Image.CSlice_getName()

def CSlice_getCompression():
    """CSlice_getCompression() -> int"""
    return _Image.CSlice_getCompression()

class CDicomSlice(CSlice):
    """Proxy of C++ vpl::img::CDicomSlice class."""

    __swig_setmethods__ = {}
    for _s in [CSlice]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDicomSlice, name, value)
    __swig_getmethods__ = {}
    for _s in [CSlice]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDicomSlice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_sPatientName"] = _Image.CDicomSlice_m_sPatientName_set
    __swig_getmethods__["m_sPatientName"] = _Image.CDicomSlice_m_sPatientName_get
    if _newclass:
        m_sPatientName = _swig_property(_Image.CDicomSlice_m_sPatientName_get, _Image.CDicomSlice_m_sPatientName_set)
    __swig_setmethods__["m_sPatientId"] = _Image.CDicomSlice_m_sPatientId_set
    __swig_getmethods__["m_sPatientId"] = _Image.CDicomSlice_m_sPatientId_get
    if _newclass:
        m_sPatientId = _swig_property(_Image.CDicomSlice_m_sPatientId_get, _Image.CDicomSlice_m_sPatientId_set)
    __swig_setmethods__["m_sPatientBirthday"] = _Image.CDicomSlice_m_sPatientBirthday_set
    __swig_getmethods__["m_sPatientBirthday"] = _Image.CDicomSlice_m_sPatientBirthday_get
    if _newclass:
        m_sPatientBirthday = _swig_property(_Image.CDicomSlice_m_sPatientBirthday_get, _Image.CDicomSlice_m_sPatientBirthday_set)
    __swig_setmethods__["m_sPatientSex"] = _Image.CDicomSlice_m_sPatientSex_set
    __swig_getmethods__["m_sPatientSex"] = _Image.CDicomSlice_m_sPatientSex_get
    if _newclass:
        m_sPatientSex = _swig_property(_Image.CDicomSlice_m_sPatientSex_get, _Image.CDicomSlice_m_sPatientSex_set)
    __swig_setmethods__["m_sPatientDescription"] = _Image.CDicomSlice_m_sPatientDescription_set
    __swig_getmethods__["m_sPatientDescription"] = _Image.CDicomSlice_m_sPatientDescription_get
    if _newclass:
        m_sPatientDescription = _swig_property(_Image.CDicomSlice_m_sPatientDescription_get, _Image.CDicomSlice_m_sPatientDescription_set)
    __swig_setmethods__["m_sStudyUid"] = _Image.CDicomSlice_m_sStudyUid_set
    __swig_getmethods__["m_sStudyUid"] = _Image.CDicomSlice_m_sStudyUid_get
    if _newclass:
        m_sStudyUid = _swig_property(_Image.CDicomSlice_m_sStudyUid_get, _Image.CDicomSlice_m_sStudyUid_set)
    __swig_setmethods__["m_sStudyId"] = _Image.CDicomSlice_m_sStudyId_set
    __swig_getmethods__["m_sStudyId"] = _Image.CDicomSlice_m_sStudyId_get
    if _newclass:
        m_sStudyId = _swig_property(_Image.CDicomSlice_m_sStudyId_get, _Image.CDicomSlice_m_sStudyId_set)
    __swig_setmethods__["m_sStudyDate"] = _Image.CDicomSlice_m_sStudyDate_set
    __swig_getmethods__["m_sStudyDate"] = _Image.CDicomSlice_m_sStudyDate_get
    if _newclass:
        m_sStudyDate = _swig_property(_Image.CDicomSlice_m_sStudyDate_get, _Image.CDicomSlice_m_sStudyDate_set)
    __swig_setmethods__["m_sStudyDescription"] = _Image.CDicomSlice_m_sStudyDescription_set
    __swig_getmethods__["m_sStudyDescription"] = _Image.CDicomSlice_m_sStudyDescription_get
    if _newclass:
        m_sStudyDescription = _swig_property(_Image.CDicomSlice_m_sStudyDescription_get, _Image.CDicomSlice_m_sStudyDescription_set)
    __swig_setmethods__["m_sSeriesUid"] = _Image.CDicomSlice_m_sSeriesUid_set
    __swig_getmethods__["m_sSeriesUid"] = _Image.CDicomSlice_m_sSeriesUid_get
    if _newclass:
        m_sSeriesUid = _swig_property(_Image.CDicomSlice_m_sSeriesUid_get, _Image.CDicomSlice_m_sSeriesUid_set)
    __swig_setmethods__["m_iSeriesNumber"] = _Image.CDicomSlice_m_iSeriesNumber_set
    __swig_getmethods__["m_iSeriesNumber"] = _Image.CDicomSlice_m_iSeriesNumber_get
    if _newclass:
        m_iSeriesNumber = _swig_property(_Image.CDicomSlice_m_iSeriesNumber_get, _Image.CDicomSlice_m_iSeriesNumber_set)
    __swig_setmethods__["m_sModality"] = _Image.CDicomSlice_m_sModality_set
    __swig_getmethods__["m_sModality"] = _Image.CDicomSlice_m_sModality_get
    if _newclass:
        m_sModality = _swig_property(_Image.CDicomSlice_m_sModality_get, _Image.CDicomSlice_m_sModality_set)
    __swig_setmethods__["m_sSeriesDate"] = _Image.CDicomSlice_m_sSeriesDate_set
    __swig_getmethods__["m_sSeriesDate"] = _Image.CDicomSlice_m_sSeriesDate_get
    if _newclass:
        m_sSeriesDate = _swig_property(_Image.CDicomSlice_m_sSeriesDate_get, _Image.CDicomSlice_m_sSeriesDate_set)
    __swig_setmethods__["m_sSeriesTime"] = _Image.CDicomSlice_m_sSeriesTime_set
    __swig_getmethods__["m_sSeriesTime"] = _Image.CDicomSlice_m_sSeriesTime_get
    if _newclass:
        m_sSeriesTime = _swig_property(_Image.CDicomSlice_m_sSeriesTime_get, _Image.CDicomSlice_m_sSeriesTime_set)
    __swig_setmethods__["m_sSeriesDescription"] = _Image.CDicomSlice_m_sSeriesDescription_set
    __swig_getmethods__["m_sSeriesDescription"] = _Image.CDicomSlice_m_sSeriesDescription_get
    if _newclass:
        m_sSeriesDescription = _swig_property(_Image.CDicomSlice_m_sSeriesDescription_get, _Image.CDicomSlice_m_sSeriesDescription_set)
    __swig_setmethods__["m_iSliceNumber"] = _Image.CDicomSlice_m_iSliceNumber_set
    __swig_getmethods__["m_iSliceNumber"] = _Image.CDicomSlice_m_iSliceNumber_get
    if _newclass:
        m_iSliceNumber = _swig_property(_Image.CDicomSlice_m_iSliceNumber_get, _Image.CDicomSlice_m_iSliceNumber_set)
    __swig_setmethods__["m_iWindowCenter"] = _Image.CDicomSlice_m_iWindowCenter_set
    __swig_getmethods__["m_iWindowCenter"] = _Image.CDicomSlice_m_iWindowCenter_get
    if _newclass:
        m_iWindowCenter = _swig_property(_Image.CDicomSlice_m_iWindowCenter_get, _Image.CDicomSlice_m_iWindowCenter_set)
    __swig_setmethods__["m_iWindowWidth"] = _Image.CDicomSlice_m_iWindowWidth_set
    __swig_getmethods__["m_iWindowWidth"] = _Image.CDicomSlice_m_iWindowWidth_get
    if _newclass:
        m_iWindowWidth = _swig_property(_Image.CDicomSlice_m_iWindowWidth_get, _Image.CDicomSlice_m_iWindowWidth_set)
    __swig_setmethods__["m_sPatientPosition"] = _Image.CDicomSlice_m_sPatientPosition_set
    __swig_getmethods__["m_sPatientPosition"] = _Image.CDicomSlice_m_sPatientPosition_get
    if _newclass:
        m_sPatientPosition = _swig_property(_Image.CDicomSlice_m_sPatientPosition_get, _Image.CDicomSlice_m_sPatientPosition_set)
    __swig_setmethods__["m_bExplicitTransfer"] = _Image.CDicomSlice_m_bExplicitTransfer_set
    __swig_getmethods__["m_bExplicitTransfer"] = _Image.CDicomSlice_m_bExplicitTransfer_get
    if _newclass:
        m_bExplicitTransfer = _swig_property(_Image.CDicomSlice_m_bExplicitTransfer_get, _Image.CDicomSlice_m_bExplicitTransfer_set)
    __swig_setmethods__["m_uPixelRepresentation"] = _Image.CDicomSlice_m_uPixelRepresentation_set
    __swig_getmethods__["m_uPixelRepresentation"] = _Image.CDicomSlice_m_uPixelRepresentation_get
    if _newclass:
        m_uPixelRepresentation = _swig_property(_Image.CDicomSlice_m_uPixelRepresentation_get, _Image.CDicomSlice_m_uPixelRepresentation_set)
    __swig_setmethods__["m_ImagePosition"] = _Image.CDicomSlice_m_ImagePosition_set
    __swig_getmethods__["m_ImagePosition"] = _Image.CDicomSlice_m_ImagePosition_get
    if _newclass:
        m_ImagePosition = _swig_property(_Image.CDicomSlice_m_ImagePosition_get, _Image.CDicomSlice_m_ImagePosition_set)
    __swig_setmethods__["m_ImageOrientationX"] = _Image.CDicomSlice_m_ImageOrientationX_set
    __swig_getmethods__["m_ImageOrientationX"] = _Image.CDicomSlice_m_ImageOrientationX_get
    if _newclass:
        m_ImageOrientationX = _swig_property(_Image.CDicomSlice_m_ImageOrientationX_get, _Image.CDicomSlice_m_ImageOrientationX_set)
    __swig_setmethods__["m_ImageOrientationY"] = _Image.CDicomSlice_m_ImageOrientationY_set
    __swig_getmethods__["m_ImageOrientationY"] = _Image.CDicomSlice_m_ImageOrientationY_get
    if _newclass:
        m_ImageOrientationY = _swig_property(_Image.CDicomSlice_m_ImageOrientationY_get, _Image.CDicomSlice_m_ImageOrientationY_set)
    __swig_setmethods__["m_sSliceFileName"] = _Image.CDicomSlice_m_sSliceFileName_set
    __swig_getmethods__["m_sSliceFileName"] = _Image.CDicomSlice_m_sSliceFileName_get
    if _newclass:
        m_sSliceFileName = _swig_property(_Image.CDicomSlice_m_sSliceFileName_get, _Image.CDicomSlice_m_sSliceFileName_set)
    __swig_setmethods__["m_sImageType"] = _Image.CDicomSlice_m_sImageType_set
    __swig_getmethods__["m_sImageType"] = _Image.CDicomSlice_m_sImageType_get
    if _newclass:
        m_sImageType = _swig_property(_Image.CDicomSlice_m_sImageType_get, _Image.CDicomSlice_m_sImageType_set)
    __swig_setmethods__["m_sImageType_PatientExaminationCharacteristics"] = _Image.CDicomSlice_m_sImageType_PatientExaminationCharacteristics_set
    __swig_getmethods__["m_sImageType_PatientExaminationCharacteristics"] = _Image.CDicomSlice_m_sImageType_PatientExaminationCharacteristics_get
    if _newclass:
        m_sImageType_PatientExaminationCharacteristics = _swig_property(_Image.CDicomSlice_m_sImageType_PatientExaminationCharacteristics_get, _Image.CDicomSlice_m_sImageType_PatientExaminationCharacteristics_set)
    __swig_setmethods__["m_sImageType_ModalitySpecificCharacteristics"] = _Image.CDicomSlice_m_sImageType_ModalitySpecificCharacteristics_set
    __swig_getmethods__["m_sImageType_ModalitySpecificCharacteristics"] = _Image.CDicomSlice_m_sImageType_ModalitySpecificCharacteristics_get
    if _newclass:
        m_sImageType_ModalitySpecificCharacteristics = _swig_property(_Image.CDicomSlice_m_sImageType_ModalitySpecificCharacteristics_get, _Image.CDicomSlice_m_sImageType_ModalitySpecificCharacteristics_set)
    __swig_setmethods__["m_sImageType_ImplementationSpecificIdentifiers"] = _Image.CDicomSlice_m_sImageType_ImplementationSpecificIdentifiers_set
    __swig_getmethods__["m_sImageType_ImplementationSpecificIdentifiers"] = _Image.CDicomSlice_m_sImageType_ImplementationSpecificIdentifiers_get
    if _newclass:
        m_sImageType_ImplementationSpecificIdentifiers = _swig_property(_Image.CDicomSlice_m_sImageType_ImplementationSpecificIdentifiers_get, _Image.CDicomSlice_m_sImageType_ImplementationSpecificIdentifiers_set)
    __swig_setmethods__["m_sScanOptions"] = _Image.CDicomSlice_m_sScanOptions_set
    __swig_getmethods__["m_sScanOptions"] = _Image.CDicomSlice_m_sScanOptions_get
    if _newclass:
        m_sScanOptions = _swig_property(_Image.CDicomSlice_m_sScanOptions_get, _Image.CDicomSlice_m_sScanOptions_set)
    __swig_setmethods__["m_sManufacturer"] = _Image.CDicomSlice_m_sManufacturer_set
    __swig_getmethods__["m_sManufacturer"] = _Image.CDicomSlice_m_sManufacturer_get
    if _newclass:
        m_sManufacturer = _swig_property(_Image.CDicomSlice_m_sManufacturer_get, _Image.CDicomSlice_m_sManufacturer_set)
    __swig_setmethods__["m_sModelName"] = _Image.CDicomSlice_m_sModelName_set
    __swig_getmethods__["m_sModelName"] = _Image.CDicomSlice_m_sModelName_get
    if _newclass:
        m_sModelName = _swig_property(_Image.CDicomSlice_m_sModelName_get, _Image.CDicomSlice_m_sModelName_set)
    __swig_setmethods__["m_sMediaStorage"] = _Image.CDicomSlice_m_sMediaStorage_set
    __swig_getmethods__["m_sMediaStorage"] = _Image.CDicomSlice_m_sMediaStorage_get
    if _newclass:
        m_sMediaStorage = _swig_property(_Image.CDicomSlice_m_sMediaStorage_get, _Image.CDicomSlice_m_sMediaStorage_set)

    def __init__(self, *args):
        """
        __init__(self) -> CDicomSlice
        __init__(self, XSize, YSize, Margin) -> CDicomSlice
        __init__(self, XSize, YSize) -> CDicomSlice
        __init__(self, Image) -> CDicomSlice
        __init__(self, Image, arg3) -> CDicomSlice
        __init__(self, Slice) -> CDicomSlice
        __init__(self, Slice, arg3) -> CDicomSlice
        __init__(self, Slice) -> CDicomSlice
        __init__(self, Slice, arg3) -> CDicomSlice
        """
        if self.__class__ == CDicomSlice:
            _self = None
        else:
            _self = self
        this = _Image.new_CDicomSlice(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CDicomSlice
    __del__ = lambda self: None

    def copyProps(self, Slice):
        """copyProps(self, Slice) -> CDicomSlice"""
        return _Image.CDicomSlice_copyProps(self, Slice)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CDicomSlice(self)
        return weakref_proxy(self)
CDicomSlice_swigregister = _Image.CDicomSlice_swigregister
CDicomSlice_swigregister(CDicomSlice)

class CDicomSliceLoader(VPLSwig.Core.Core.CObject):
    """Proxy of C++ vpl::img::CDicomSliceLoader class."""

    __swig_setmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDicomSliceLoader, name, value)
    __swig_getmethods__ = {}
    for _s in [VPLSwig.Core.Core.CObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDicomSliceLoader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CDicomSliceLoader"""
        if self.__class__ == CDicomSliceLoader:
            _self = None
        else:
            _self = self
        this = _Image.new_CDicomSliceLoader(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CDicomSliceLoader
    __del__ = lambda self: None

    def loadDicom(self, fileName, dicomSlice, load_image_data=True):
        """
        loadDicom(self, fileName, dicomSlice, load_image_data=True) -> bool
        loadDicom(self, fileName, dicomSlice) -> bool
        """
        return _Image.CDicomSliceLoader_loadDicom(self, fileName, dicomSlice, load_image_data)


    def readTag(self, groupNum, elemNum):
        """readTag(self, groupNum, elemNum) -> std::string"""
        return _Image.CDicomSliceLoader_readTag(self, groupNum, elemNum)


    def loadMultiframeDicom(self, *args):
        """
        loadMultiframeDicom(self, fileName, slices, load_image_data=True) -> bool
        loadMultiframeDicom(self, fileName, slices) -> bool
        loadMultiframeDicom(self, fileName, dicomSlice, index, load_image_data=True) -> bool
        loadMultiframeDicom(self, fileName, dicomSlice, index) -> bool
        """
        return _Image.CDicomSliceLoader_loadMultiframeDicom(self, *args)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CDicomSliceLoader(self)
        return weakref_proxy(self)
CDicomSliceLoader_swigregister = _Image.CDicomSliceLoader_swigregister
CDicomSliceLoader_swigregister(CDicomSliceLoader)

class CDicomSliceLoaderVPL(CDicomSliceLoader):
    """Proxy of C++ vpl::img::CDicomSliceLoaderVPL class."""

    __swig_setmethods__ = {}
    for _s in [CDicomSliceLoader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDicomSliceLoaderVPL, name, value)
    __swig_getmethods__ = {}
    for _s in [CDicomSliceLoader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDicomSliceLoaderVPL, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CDicomSliceLoaderVPL"""
        if self.__class__ == CDicomSliceLoaderVPL:
            _self = None
        else:
            _self = self
        this = _Image.new_CDicomSliceLoaderVPL(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_CDicomSliceLoaderVPL
    __del__ = lambda self: None

    def loadDicom(self, fileName, dicomSlice, load_image_data=True):
        """
        loadDicom(self, fileName, dicomSlice, load_image_data=True) -> bool
        loadDicom(self, fileName, dicomSlice) -> bool
        """
        return _Image.CDicomSliceLoaderVPL_loadDicom(self, fileName, dicomSlice, load_image_data)


    def readTag(self, groupNum, elemNum):
        """readTag(self, groupNum, elemNum) -> std::string"""
        return _Image.CDicomSliceLoaderVPL_readTag(self, groupNum, elemNum)


    def loadMultiframeDicom(self, *args):
        """
        loadMultiframeDicom(self, fileName, slices, load_image_data=True) -> bool
        loadMultiframeDicom(self, fileName, slices) -> bool
        loadMultiframeDicom(self, fileName, dicomSlice, index, load_image_data=True) -> bool
        loadMultiframeDicom(self, fileName, dicomSlice, index) -> bool
        """
        return _Image.CDicomSliceLoaderVPL_loadMultiframeDicom(self, *args)

    def __disown__(self):
        self.this.disown()
        _Image.disown_CDicomSliceLoaderVPL(self)
        return weakref_proxy(self)
CDicomSliceLoaderVPL_swigregister = _Image.CDicomSliceLoaderVPL_swigregister
CDicomSliceLoaderVPL_swigregister(CDicomSliceLoaderVPL)

class CDicomDirLoader(_object):
    """Proxy of C++ vpl::img::CDicomDirLoader class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDicomDirLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDicomDirLoader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> CDicomDirLoader"""
        this = _Image.new_CDicomDirLoader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumOfImages(self):
        """getNumOfImages(self) -> int"""
        return _Image.CDicomDirLoader_getNumOfImages(self)


    def loadDicomDir(self, *args):
        """
        loadDicomDir(self, directory, filemask) -> bool
        loadDicomDir(self, directory) -> bool
        """
        return _Image.CDicomDirLoader_loadDicomDir(self, *args)


    def makeDensityVolume(self, *args):
        """
        makeDensityVolume(self, dstVolume, borderValue) -> bool
        makeDensityVolume(self, dstVolume) -> bool
        """
        return _Image.CDicomDirLoader_makeDensityVolume(self, *args)

    __swig_destroy__ = _Image.delete_CDicomDirLoader
    __del__ = lambda self: None
CDicomDirLoader_swigregister = _Image.CDicomDirLoader_swigregister
CDicomDirLoader_swigregister(CDicomDirLoader)

class sp_dicomSlice(_object):
    """Proxy of C++ vpl::base::CSharedPtr<(vpl::img::CDicomSlice)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sp_dicomSlice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sp_dicomSlice, name)
    __repr__ = _swig_repr
    TEMPLATE_PARAMETER_IS_NOT_OBJECT = _Image.sp_dicomSlice_TEMPLATE_PARAMETER_IS_NOT_OBJECT

    def __init__(self, *args):
        """
        __init__(self) -> sp_dicomSlice
        __init__(self, p) -> sp_dicomSlice
        __init__(self, p) -> sp_dicomSlice
        """
        this = _Image.new_sp_dicomSlice(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Image.delete_sp_dicomSlice
    __del__ = lambda self: None

    def __deref__(self):
        """__deref__(self) -> CDicomSlice"""
        return _Image.sp_dicomSlice___deref__(self)


    def __ref__(self):
        """__ref__(self) -> CDicomSlice"""
        return _Image.sp_dicomSlice___ref__(self)


    def get(self, *args):
        """
        get(self) -> CDicomSlice
        get(self) -> CDicomSlice
        """
        return _Image.sp_dicomSlice_get(self, *args)


    def release(self):
        """release(self) -> CDicomSlice"""
        return _Image.sp_dicomSlice_release(self)

    __swig_setmethods__["m_sPatientName"] = _Image.sp_dicomSlice_m_sPatientName_set
    __swig_getmethods__["m_sPatientName"] = _Image.sp_dicomSlice_m_sPatientName_get
    if _newclass:
        m_sPatientName = _swig_property(_Image.sp_dicomSlice_m_sPatientName_get, _Image.sp_dicomSlice_m_sPatientName_set)
    __swig_setmethods__["m_sPatientId"] = _Image.sp_dicomSlice_m_sPatientId_set
    __swig_getmethods__["m_sPatientId"] = _Image.sp_dicomSlice_m_sPatientId_get
    if _newclass:
        m_sPatientId = _swig_property(_Image.sp_dicomSlice_m_sPatientId_get, _Image.sp_dicomSlice_m_sPatientId_set)
    __swig_setmethods__["m_sPatientBirthday"] = _Image.sp_dicomSlice_m_sPatientBirthday_set
    __swig_getmethods__["m_sPatientBirthday"] = _Image.sp_dicomSlice_m_sPatientBirthday_get
    if _newclass:
        m_sPatientBirthday = _swig_property(_Image.sp_dicomSlice_m_sPatientBirthday_get, _Image.sp_dicomSlice_m_sPatientBirthday_set)
    __swig_setmethods__["m_sPatientSex"] = _Image.sp_dicomSlice_m_sPatientSex_set
    __swig_getmethods__["m_sPatientSex"] = _Image.sp_dicomSlice_m_sPatientSex_get
    if _newclass:
        m_sPatientSex = _swig_property(_Image.sp_dicomSlice_m_sPatientSex_get, _Image.sp_dicomSlice_m_sPatientSex_set)
    __swig_setmethods__["m_sPatientDescription"] = _Image.sp_dicomSlice_m_sPatientDescription_set
    __swig_getmethods__["m_sPatientDescription"] = _Image.sp_dicomSlice_m_sPatientDescription_get
    if _newclass:
        m_sPatientDescription = _swig_property(_Image.sp_dicomSlice_m_sPatientDescription_get, _Image.sp_dicomSlice_m_sPatientDescription_set)
    __swig_setmethods__["m_sStudyUid"] = _Image.sp_dicomSlice_m_sStudyUid_set
    __swig_getmethods__["m_sStudyUid"] = _Image.sp_dicomSlice_m_sStudyUid_get
    if _newclass:
        m_sStudyUid = _swig_property(_Image.sp_dicomSlice_m_sStudyUid_get, _Image.sp_dicomSlice_m_sStudyUid_set)
    __swig_setmethods__["m_sStudyId"] = _Image.sp_dicomSlice_m_sStudyId_set
    __swig_getmethods__["m_sStudyId"] = _Image.sp_dicomSlice_m_sStudyId_get
    if _newclass:
        m_sStudyId = _swig_property(_Image.sp_dicomSlice_m_sStudyId_get, _Image.sp_dicomSlice_m_sStudyId_set)
    __swig_setmethods__["m_sStudyDate"] = _Image.sp_dicomSlice_m_sStudyDate_set
    __swig_getmethods__["m_sStudyDate"] = _Image.sp_dicomSlice_m_sStudyDate_get
    if _newclass:
        m_sStudyDate = _swig_property(_Image.sp_dicomSlice_m_sStudyDate_get, _Image.sp_dicomSlice_m_sStudyDate_set)
    __swig_setmethods__["m_sStudyDescription"] = _Image.sp_dicomSlice_m_sStudyDescription_set
    __swig_getmethods__["m_sStudyDescription"] = _Image.sp_dicomSlice_m_sStudyDescription_get
    if _newclass:
        m_sStudyDescription = _swig_property(_Image.sp_dicomSlice_m_sStudyDescription_get, _Image.sp_dicomSlice_m_sStudyDescription_set)
    __swig_setmethods__["m_sSeriesUid"] = _Image.sp_dicomSlice_m_sSeriesUid_set
    __swig_getmethods__["m_sSeriesUid"] = _Image.sp_dicomSlice_m_sSeriesUid_get
    if _newclass:
        m_sSeriesUid = _swig_property(_Image.sp_dicomSlice_m_sSeriesUid_get, _Image.sp_dicomSlice_m_sSeriesUid_set)
    __swig_setmethods__["m_iSeriesNumber"] = _Image.sp_dicomSlice_m_iSeriesNumber_set
    __swig_getmethods__["m_iSeriesNumber"] = _Image.sp_dicomSlice_m_iSeriesNumber_get
    if _newclass:
        m_iSeriesNumber = _swig_property(_Image.sp_dicomSlice_m_iSeriesNumber_get, _Image.sp_dicomSlice_m_iSeriesNumber_set)
    __swig_setmethods__["m_sModality"] = _Image.sp_dicomSlice_m_sModality_set
    __swig_getmethods__["m_sModality"] = _Image.sp_dicomSlice_m_sModality_get
    if _newclass:
        m_sModality = _swig_property(_Image.sp_dicomSlice_m_sModality_get, _Image.sp_dicomSlice_m_sModality_set)
    __swig_setmethods__["m_sSeriesDate"] = _Image.sp_dicomSlice_m_sSeriesDate_set
    __swig_getmethods__["m_sSeriesDate"] = _Image.sp_dicomSlice_m_sSeriesDate_get
    if _newclass:
        m_sSeriesDate = _swig_property(_Image.sp_dicomSlice_m_sSeriesDate_get, _Image.sp_dicomSlice_m_sSeriesDate_set)
    __swig_setmethods__["m_sSeriesTime"] = _Image.sp_dicomSlice_m_sSeriesTime_set
    __swig_getmethods__["m_sSeriesTime"] = _Image.sp_dicomSlice_m_sSeriesTime_get
    if _newclass:
        m_sSeriesTime = _swig_property(_Image.sp_dicomSlice_m_sSeriesTime_get, _Image.sp_dicomSlice_m_sSeriesTime_set)
    __swig_setmethods__["m_sSeriesDescription"] = _Image.sp_dicomSlice_m_sSeriesDescription_set
    __swig_getmethods__["m_sSeriesDescription"] = _Image.sp_dicomSlice_m_sSeriesDescription_get
    if _newclass:
        m_sSeriesDescription = _swig_property(_Image.sp_dicomSlice_m_sSeriesDescription_get, _Image.sp_dicomSlice_m_sSeriesDescription_set)
    __swig_setmethods__["m_iSliceNumber"] = _Image.sp_dicomSlice_m_iSliceNumber_set
    __swig_getmethods__["m_iSliceNumber"] = _Image.sp_dicomSlice_m_iSliceNumber_get
    if _newclass:
        m_iSliceNumber = _swig_property(_Image.sp_dicomSlice_m_iSliceNumber_get, _Image.sp_dicomSlice_m_iSliceNumber_set)
    __swig_setmethods__["m_iWindowCenter"] = _Image.sp_dicomSlice_m_iWindowCenter_set
    __swig_getmethods__["m_iWindowCenter"] = _Image.sp_dicomSlice_m_iWindowCenter_get
    if _newclass:
        m_iWindowCenter = _swig_property(_Image.sp_dicomSlice_m_iWindowCenter_get, _Image.sp_dicomSlice_m_iWindowCenter_set)
    __swig_setmethods__["m_iWindowWidth"] = _Image.sp_dicomSlice_m_iWindowWidth_set
    __swig_getmethods__["m_iWindowWidth"] = _Image.sp_dicomSlice_m_iWindowWidth_get
    if _newclass:
        m_iWindowWidth = _swig_property(_Image.sp_dicomSlice_m_iWindowWidth_get, _Image.sp_dicomSlice_m_iWindowWidth_set)
    __swig_setmethods__["m_sPatientPosition"] = _Image.sp_dicomSlice_m_sPatientPosition_set
    __swig_getmethods__["m_sPatientPosition"] = _Image.sp_dicomSlice_m_sPatientPosition_get
    if _newclass:
        m_sPatientPosition = _swig_property(_Image.sp_dicomSlice_m_sPatientPosition_get, _Image.sp_dicomSlice_m_sPatientPosition_set)
    __swig_setmethods__["m_bExplicitTransfer"] = _Image.sp_dicomSlice_m_bExplicitTransfer_set
    __swig_getmethods__["m_bExplicitTransfer"] = _Image.sp_dicomSlice_m_bExplicitTransfer_get
    if _newclass:
        m_bExplicitTransfer = _swig_property(_Image.sp_dicomSlice_m_bExplicitTransfer_get, _Image.sp_dicomSlice_m_bExplicitTransfer_set)
    __swig_setmethods__["m_uPixelRepresentation"] = _Image.sp_dicomSlice_m_uPixelRepresentation_set
    __swig_getmethods__["m_uPixelRepresentation"] = _Image.sp_dicomSlice_m_uPixelRepresentation_get
    if _newclass:
        m_uPixelRepresentation = _swig_property(_Image.sp_dicomSlice_m_uPixelRepresentation_get, _Image.sp_dicomSlice_m_uPixelRepresentation_set)
    __swig_setmethods__["m_ImagePosition"] = _Image.sp_dicomSlice_m_ImagePosition_set
    __swig_getmethods__["m_ImagePosition"] = _Image.sp_dicomSlice_m_ImagePosition_get
    if _newclass:
        m_ImagePosition = _swig_property(_Image.sp_dicomSlice_m_ImagePosition_get, _Image.sp_dicomSlice_m_ImagePosition_set)
    __swig_setmethods__["m_ImageOrientationX"] = _Image.sp_dicomSlice_m_ImageOrientationX_set
    __swig_getmethods__["m_ImageOrientationX"] = _Image.sp_dicomSlice_m_ImageOrientationX_get
    if _newclass:
        m_ImageOrientationX = _swig_property(_Image.sp_dicomSlice_m_ImageOrientationX_get, _Image.sp_dicomSlice_m_ImageOrientationX_set)
    __swig_setmethods__["m_ImageOrientationY"] = _Image.sp_dicomSlice_m_ImageOrientationY_set
    __swig_getmethods__["m_ImageOrientationY"] = _Image.sp_dicomSlice_m_ImageOrientationY_get
    if _newclass:
        m_ImageOrientationY = _swig_property(_Image.sp_dicomSlice_m_ImageOrientationY_get, _Image.sp_dicomSlice_m_ImageOrientationY_set)
    __swig_setmethods__["m_sSliceFileName"] = _Image.sp_dicomSlice_m_sSliceFileName_set
    __swig_getmethods__["m_sSliceFileName"] = _Image.sp_dicomSlice_m_sSliceFileName_get
    if _newclass:
        m_sSliceFileName = _swig_property(_Image.sp_dicomSlice_m_sSliceFileName_get, _Image.sp_dicomSlice_m_sSliceFileName_set)
    __swig_setmethods__["m_sImageType"] = _Image.sp_dicomSlice_m_sImageType_set
    __swig_getmethods__["m_sImageType"] = _Image.sp_dicomSlice_m_sImageType_get
    if _newclass:
        m_sImageType = _swig_property(_Image.sp_dicomSlice_m_sImageType_get, _Image.sp_dicomSlice_m_sImageType_set)
    __swig_setmethods__["m_sImageType_PatientExaminationCharacteristics"] = _Image.sp_dicomSlice_m_sImageType_PatientExaminationCharacteristics_set
    __swig_getmethods__["m_sImageType_PatientExaminationCharacteristics"] = _Image.sp_dicomSlice_m_sImageType_PatientExaminationCharacteristics_get
    if _newclass:
        m_sImageType_PatientExaminationCharacteristics = _swig_property(_Image.sp_dicomSlice_m_sImageType_PatientExaminationCharacteristics_get, _Image.sp_dicomSlice_m_sImageType_PatientExaminationCharacteristics_set)
    __swig_setmethods__["m_sImageType_ModalitySpecificCharacteristics"] = _Image.sp_dicomSlice_m_sImageType_ModalitySpecificCharacteristics_set
    __swig_getmethods__["m_sImageType_ModalitySpecificCharacteristics"] = _Image.sp_dicomSlice_m_sImageType_ModalitySpecificCharacteristics_get
    if _newclass:
        m_sImageType_ModalitySpecificCharacteristics = _swig_property(_Image.sp_dicomSlice_m_sImageType_ModalitySpecificCharacteristics_get, _Image.sp_dicomSlice_m_sImageType_ModalitySpecificCharacteristics_set)
    __swig_setmethods__["m_sImageType_ImplementationSpecificIdentifiers"] = _Image.sp_dicomSlice_m_sImageType_ImplementationSpecificIdentifiers_set
    __swig_getmethods__["m_sImageType_ImplementationSpecificIdentifiers"] = _Image.sp_dicomSlice_m_sImageType_ImplementationSpecificIdentifiers_get
    if _newclass:
        m_sImageType_ImplementationSpecificIdentifiers = _swig_property(_Image.sp_dicomSlice_m_sImageType_ImplementationSpecificIdentifiers_get, _Image.sp_dicomSlice_m_sImageType_ImplementationSpecificIdentifiers_set)
    __swig_setmethods__["m_sScanOptions"] = _Image.sp_dicomSlice_m_sScanOptions_set
    __swig_getmethods__["m_sScanOptions"] = _Image.sp_dicomSlice_m_sScanOptions_get
    if _newclass:
        m_sScanOptions = _swig_property(_Image.sp_dicomSlice_m_sScanOptions_get, _Image.sp_dicomSlice_m_sScanOptions_set)
    __swig_setmethods__["m_sManufacturer"] = _Image.sp_dicomSlice_m_sManufacturer_set
    __swig_getmethods__["m_sManufacturer"] = _Image.sp_dicomSlice_m_sManufacturer_get
    if _newclass:
        m_sManufacturer = _swig_property(_Image.sp_dicomSlice_m_sManufacturer_get, _Image.sp_dicomSlice_m_sManufacturer_set)
    __swig_setmethods__["m_sModelName"] = _Image.sp_dicomSlice_m_sModelName_set
    __swig_getmethods__["m_sModelName"] = _Image.sp_dicomSlice_m_sModelName_get
    if _newclass:
        m_sModelName = _swig_property(_Image.sp_dicomSlice_m_sModelName_get, _Image.sp_dicomSlice_m_sModelName_set)
    __swig_setmethods__["m_sMediaStorage"] = _Image.sp_dicomSlice_m_sMediaStorage_set
    __swig_getmethods__["m_sMediaStorage"] = _Image.sp_dicomSlice_m_sMediaStorage_get
    if _newclass:
        m_sMediaStorage = _swig_property(_Image.sp_dicomSlice_m_sMediaStorage_get, _Image.sp_dicomSlice_m_sMediaStorage_set)

    def copyProps(self, Slice):
        """copyProps(self, Slice) -> CDicomSlice"""
        return _Image.sp_dicomSlice_copyProps(self, Slice)


    def getName(self):
        """getName(self) -> char const *"""
        return _Image.sp_dicomSlice_getName(self)


    def getCompression(self):
        """getCompression(self) -> int"""
        return _Image.sp_dicomSlice_getCompression(self)


    def resize(self, *args):
        """
        resize(self, XSize, YSize, Margin) -> CSlice
        resize(self, XSize, YSize) -> CSlice
        resize(self, Size, Margin) -> CSlice
        resize(self, Size) -> CSlice
        """
        return _Image.sp_dicomSlice_resize(self, *args)


    def copy(self, *args):
        """
        copy(self, Image, Margin=-1) -> CSlice
        copy(self, Image) -> CSlice
        copy(self, Slice, Margin=-1) -> CSlice
        copy(self, Slice) -> CSlice
        """
        return _Image.sp_dicomSlice_copy(self, *args)


    def makeRef(self, *args):
        """
        makeRef(self, Image) -> CSlice
        makeRef(self, Slice) -> CSlice
        """
        return _Image.sp_dicomSlice_makeRef(self, *args)


    def getDX(self):
        """getDX(self) -> double"""
        return _Image.sp_dicomSlice_getDX(self)


    def getDY(self):
        """getDY(self) -> double"""
        return _Image.sp_dicomSlice_getDY(self)


    def setPixel(self, dDX, dDY):
        """setPixel(self, dDX, dDY) -> CSlice"""
        return _Image.sp_dicomSlice_setPixel(self, dDX, dDY)


    def getThickness(self):
        """getThickness(self) -> double"""
        return _Image.sp_dicomSlice_getThickness(self)


    def setThickness(self, dThickness):
        """setThickness(self, dThickness) -> CSlice"""
        return _Image.sp_dicomSlice_setThickness(self, dThickness)


    def getIndex(self):
        """getIndex(self) -> vpl::tSize"""
        return _Image.sp_dicomSlice_getIndex(self)


    def setIndex(self, Index):
        """setIndex(self, Index) -> CSlice"""
        return _Image.sp_dicomSlice_setIndex(self, Index)


    def getPosition(self):
        """getPosition(self) -> double"""
        return _Image.sp_dicomSlice_getPosition(self)


    def setPosition(self, dPosition):
        """setPosition(self, dPosition) -> CSlice"""
        return _Image.sp_dicomSlice_setPosition(self, dPosition)


    def getOrientation(self):
        """getOrientation(self) -> vpl::img::EPlane"""
        return _Image.sp_dicomSlice_getOrientation(self)


    def setOrientation(self, ePlane):
        """setOrientation(self, ePlane) -> CSlice"""
        return _Image.sp_dicomSlice_setOrientation(self, ePlane)


    def getSize(self, *args):
        """
        getSize(self) -> CSize2_int
        getSize(self) -> CSize2_int
        """
        return _Image.sp_dicomSlice_getSize(self, *args)


    def getXSize(self):
        """getXSize(self) -> vpl::tSize"""
        return _Image.sp_dicomSlice_getXSize(self)


    def getYSize(self):
        """getYSize(self) -> vpl::tSize"""
        return _Image.sp_dicomSlice_getYSize(self)


    def width(self):
        """width(self) -> vpl::tSize"""
        return _Image.sp_dicomSlice_width(self)


    def height(self):
        """height(self) -> vpl::tSize"""
        return _Image.sp_dicomSlice_height(self)


    def getXOffset(self):
        """getXOffset(self) -> vpl::tSize"""
        return _Image.sp_dicomSlice_getXOffset(self)


    def getYOffset(self):
        """getYOffset(self) -> vpl::tSize"""
        return _Image.sp_dicomSlice_getYOffset(self)


    def getMargin(self):
        """getMargin(self) -> vpl::tSize"""
        return _Image.sp_dicomSlice_getMargin(self)


    def __call__(self, *args):
        """
        __call__(self, x, y) -> __int16
        __call__(self, x, y) -> __int16 const
        __call__(self, i) -> __int16
        __call__(self, i) -> __int16 const &
        """
        return _Image.sp_dicomSlice___call__(self, *args)


    def at(self, *args):
        """
        at(self, x, y) -> __int16 const
        at(self, i) -> __int16 const &
        """
        return _Image.sp_dicomSlice_at(self, *args)


    def set(self, *args):
        """
        set(self, x, y, Value) -> CDImage
        set(self, i, Value) -> CDImage
        """
        return _Image.sp_dicomSlice_set(self, *args)


    def getIdx(self, x, y):
        """getIdx(self, x, y) -> vpl::tSize"""
        return _Image.sp_dicomSlice_getIdx(self, x, y)


    def getPtr(self, *args):
        """
        getPtr(self) -> __int16
        getPtr(self) -> __int16 const
        getPtr(self, x, y) -> __int16
        getPtr(self, x, y) -> __int16 const *
        """
        return _Image.sp_dicomSlice_getPtr(self, *args)


    def getRowPtr(self, *args):
        """
        getRowPtr(self, y) -> __int16
        getRowPtr(self, y) -> __int16 const *
        """
        return _Image.sp_dicomSlice_getRowPtr(self, *args)


    def rect(self, *args):
        """
        rect(self, Position, Size) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRect
        rect(self, Position, Size) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRect const
        rect(self, XRange, YRange) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRect
        rect(self, XRange, YRange) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRect const
        """
        return _Image.sp_dicomSlice_rect(self, *args)


    def row(self, *args):
        """
        row(self, y) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRow
        row(self, y) -> vpl::img::CImage< __int16,vpl::base::CRefData >::tRow const
        """
        return _Image.sp_dicomSlice_row(self, *args)


    def fill(self, c):
        """fill(self, c) -> CDImage"""
        return _Image.sp_dicomSlice_fill(self, c)


    def fillEntire(self, c):
        """fillEntire(self, c) -> CDImage"""
        return _Image.sp_dicomSlice_fillEntire(self, c)


    def fillMargin(self, c):
        """fillMargin(self, c) -> CDImage"""
        return _Image.sp_dicomSlice_fillMargin(self, c)


    def mirrorMargin(self):
        """mirrorMargin(self) -> CDImage"""
        return _Image.sp_dicomSlice_mirrorMargin(self)


    def replace(self, Value, NewValue):
        """replace(self, Value, NewValue) -> CDImage"""
        return _Image.sp_dicomSlice_replace(self, Value, NewValue)


    def abs(self):
        """abs(self) -> CDImage"""
        return _Image.sp_dicomSlice_abs(self)


    def limit(self, Lower, Upper):
        """limit(self, Lower, Upper) -> CDImage"""
        return _Image.sp_dicomSlice_limit(self, Lower, Upper)


    def cut(self, Lower, Upper):
        """cut(self, Lower, Upper) -> CDImage"""
        return _Image.sp_dicomSlice_cut(self, Lower, Upper)


    def subSample(self, Image, k=2, l=2):
        """
        subSample(self, Image, k=2, l=2) -> CDImage
        subSample(self, Image, k=2) -> CDImage
        subSample(self, Image) -> CDImage
        """
        return _Image.sp_dicomSlice_subSample(self, Image, k, l)


    def interpolate(self, Point):
        """interpolate(self, Point) -> __int16"""
        return _Image.sp_dicomSlice_interpolate(self, Point)


    def color2Pixel(self, color):
        """color2Pixel(self, color) -> __int16"""
        return _Image.sp_dicomSlice_color2Pixel(self, color)


    def checkPosition(self, x, y):
        """checkPosition(self, x, y) -> bool"""
        return _Image.sp_dicomSlice_checkPosition(self, x, y)


    def convert_from_Image8(self, Image, Margin=-1):
        """
        convert_from_Image8(self, Image, Margin=-1) -> CDImage
        convert_from_Image8(self, Image) -> CDImage
        """
        return _Image.sp_dicomSlice_convert_from_Image8(self, Image, Margin)


    def convert_from_Image16(self, Image, Margin=-1):
        """
        convert_from_Image16(self, Image, Margin=-1) -> CDImage
        convert_from_Image16(self, Image) -> CDImage
        """
        return _Image.sp_dicomSlice_convert_from_Image16(self, Image, Margin)


    def convert_from_Image32(self, Image, Margin=-1):
        """
        convert_from_Image32(self, Image, Margin=-1) -> CDImage
        convert_from_Image32(self, Image) -> CDImage
        """
        return _Image.sp_dicomSlice_convert_from_Image32(self, Image, Margin)


    def convert_from_FImage(self, Image, Margin=-1):
        """
        convert_from_FImage(self, Image, Margin=-1) -> CDImage
        convert_from_FImage(self, Image) -> CDImage
        """
        return _Image.sp_dicomSlice_convert_from_FImage(self, Image, Margin)


    def convert_from_DImage(self, Image, Margin=-1):
        """
        convert_from_DImage(self, Image, Margin=-1) -> CDImage
        convert_from_DImage(self, Image) -> CDImage
        """
        return _Image.sp_dicomSlice_convert_from_DImage(self, Image, Margin)


    def convert_from_RGBImage(self, Image, Margin=-1):
        """
        convert_from_RGBImage(self, Image, Margin=-1) -> CDImage
        convert_from_RGBImage(self, Image) -> CDImage
        """
        return _Image.sp_dicomSlice_convert_from_RGBImage(self, Image, Margin)


    def convert_from_ComplexImage(self, Image, Margin=-1):
        """
        convert_from_ComplexImage(self, Image, Margin=-1) -> CDImage
        convert_from_ComplexImage(self, Image) -> CDImage
        """
        return _Image.sp_dicomSlice_convert_from_ComplexImage(self, Image, Margin)


    def getReferencesCount(self):
        """getReferencesCount(self) -> int"""
        return _Image.sp_dicomSlice_getReferencesCount(self)


    def isOnHeap(self):
        """isOnHeap(self) -> bool"""
        return _Image.sp_dicomSlice_isOnHeap(self)


    def getImpl(self, *args):
        """
        getImpl(self) -> CDImage
        getImpl(self) -> CDImage
        """
        return _Image.sp_dicomSlice_getImpl(self, *args)


    def getBlockSize(self):
        """getBlockSize(self) -> int"""
        return _Image.sp_dicomSlice_getBlockSize(self)

sp_dicomSlice_swigregister = _Image.sp_dicomSlice_swigregister
sp_dicomSlice_swigregister(sp_dicomSlice)

# This file is compatible with both classic and new-style classes.


