Building AIM - Linux instructions
---------------------------------
Tested on Debian 6.0.7 and Centos 6.4.

(1)  Prerequisites
      gcc, g++ (tested on 4.4.5)
      cmake (>= 2.8.0)
      xerces (>= 3.1.0(?)) development and runtime

(1a) Installing prerequisites for Debian/Ubuntu
      (i) Install the prerequisites using the package manager:
         apt-get install gcc g++ make cmake-curses-gui libxerces-c-dev

(1b) Installing prerequisites for CentOS 6.4 (64-bit):
     (i) Install CMake 2.8
      - Download the latest atrpms-repo rpm:
         wget http://dl.atrpms.net/el6-x86_64/atrpms/stable/atrpms-repo-6-6.el6.x86_64.rpm
      - Install atrpms-repo rpm:
         sudo rpm -Uvh atrpms-repo*rpm
      - Install cmake packages:
         sudo yum --enablerepo=atrpms-testing install cmake cmake-gui
     (ii) Install default version of xerces (3.0):
         sudo yum install xerces-c-devel

(1c) Alternate installs
      It is not required to user the distribution packages; you 
      may install cmake and xerces independently.  See section (2a) for 
      information on building against a self-built xerces library.

(2)  Configure cmake for an out-of-source build
      It is recommended to always build in a separate directory from the 
      source directory.  First, make the directory:
        mkdir /path/to/aim-build

      Then change directory to the build directory, and invoke ccmake:
        cd aim-build
        ccmake /path/to/aim-source

      You will be presented with a curses interface, which you can use to 
      choose different build options.  The most important of these are 
      the choice of Release or Debug, and static or shared libraries.

      The default choice is to build in Release mode.  If you wish to 
      make a debug build, move the cursor down the CMAKE_BUILD_TYPE 
      entry, hit <Enter>, type "Debug" (without the quotes), and then 
      hit <Enter> again.

      The default choice is to build shared libraries.  If you wish a 
      static library build, move the cursor to the BUILD_SHARED_LIBS 
      entry, and hit <Enter> to change the value from "ON" to "OFF".

      Once you are satisfied with your build configuration, hit "c" 
      to configure, and "g" to generate.  The cmake program will exit.

(2a) Building with self-compiled xerces
      If you build your own xerces library, it is possible that it won't be 
      automatically located by the AIMLib build system.  Specify the Xerces 
      installation directory using the XERCES_DIR.  For example, if you 
      built Xerces like this:
        ./configure --prefix=/path/to/xerces-install
	make
	make install

      Then you should set XERCES_DIR to /path/to/xerces-install

(2b) Choosing a different install directory
      By default, the "make install" target will install into /usr/local, 
      such as /usr/local/lib/libAIMLib.so, and /usr/local/bin/AIMConverter.
      To choose a different install directory, you should set
      CMAKE_INSTALL_PREFIX appropriately.

(3)  Build AIMLib
      To build AIMLib, run "make" from inside the build directory, like this:
        cd /path/to/aim-build
        make

      If you have multiple cores, you can perform a parallel build using 
      the -j option.  For example, to run a 4-way parallel make, do this:
        make -j 4


Building AIM - OSX instructions
-------------------------------
Tested on OSX 10.7.5 "Lion"

(1)  Prerequisites
      Xcode (tested on 4.6)
      Xcode command line utilities
      cmake (>= 2.8.0)
      xerces (>= 3.1.1) development and runtime)

(1a) Installing Xcode
      Xcode is the name of the OSX package that contains the gcc and 
      clang compilers.  Note: you must have an "iTunes account" to download.
      Detailed download information is found here:
        https://developer.apple.com/xcode/

      In addition to the base xcode install, you must also install the 
      command line utilities.  From the Xcode menu, choose:
        Xcode -> Preferences
      Then click the "install" button on the "Command line tools" 
      listbox item.

(1b) Installing prerequisites using homebrew
      Homebrew is a package manager for Mac OSX platforms.  It is similar 
      to package managers found on Debian, Fedora, or other linux 
      distributions.

      To install homebrew, open a command window, and run the following 
      command:
        ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"

      After homebrew is installed, you can use it to install cmake ane xerces:
        brew install cmake xerces-c

(1c) Alternate installs
      Homebrew is not required for building AIMLib.  If you prefer, you 
      may install cmake and xerces independently.  See section (2a) for 
      information on building against a self-built xerces library.

(2)  Configure cmake for an out-of-source build
      It is recommended to always build in a separate directory from the 
      source directory.  First, make the directory:
        mkdir /path/to/aim-build

      Then change directory to the build directory, and invoke ccmake:
        cd aim-build
        ccmake /path/to/aim-source

      You will be presented with a curses interface.  Hit "c" to show 
      the list of build options.  The most important of these are 
      the choice of Release or Debug, and static or shared libraries.

      The default choice is to build in Release mode.  If you wish to 
      make a debug build, move the cursor down the CMAKE_BUILD_TYPE 
      entry, hit <Enter>, type "Debug" (without the quotes), and then 
      hit <Enter> again.

      The default choice is to build shared libraries.  If you wish a 
      static library build, move the cursor to the BUILD_SHARED_LIBS 
      entry, and hit <Enter> to change the value from "ON" to "OFF".

      Once you are satisfied with your build configuration, hit "c" 
      to configure, and "g" to generate.  The cmake program will exit.

(2a) Building with self-compiled xerces
      If you build your own xerces library, it is possible that it won't be 
      automatically located by the AIMLib build system.  Specify the Xerces 
      installation directory using the XERCES_DIR.  For example, if you 
      built Xerces like this:
        ./configure --prefix=/path/to/xerces-install
	make
	make install

      Then you should set XERCES_DIR to /path/to/xerces-install

(2b) Building with gcc instead of clang
      By default, you get the clang compiler.  If you wish to build with 
      gcc instead, specify the compiler to cmake as an environment variable:
        cd aim-build
	cmake -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ /path/to/aim-source

(3)  Build AIMLib
      To build AIMLib, run "make" from inside the build directory, like this:
        cd /path/to/aim-build
        make

      If you have multiple cores, you can perform a parallel build using 
      the -j option.  For example, to run a 4-way parallel make, do this:
        make -j 4


Building AIM - Windows instructions
-----------------------------------
Tested on 32-bit windows XP SP3
Tested on 64-bit windows 7 SP1

(1)  Prerequisites
      Microsoft Visual Studio, Express or Professional, 2008 or 2010
      cmake (>= 2.8.0)

(1a) Installing the Visual Studio compiler
      Microsoft provides a free version of the Visual Studio compiler, 
      called Visual Studio Express.  To build AIMLib, you only need 
      the C++ compiler.  Download Visual Studio 2010 express from here:
        http://www.microsoft.com/visualstudio/eng/products/visual-studio-2010-express

(1b) Installing CMake
      CMake can be installed by a binary download.  Download from here:
         http://cmake.org

(2)  Configure the project with CMake
      In the CMake GUI, you must specify the "Source Directory" and the "Build
      Directory".  It is recommended to always build in a separate directory 
      from the source directory.

      After specifying both of these, click the "Configure" button.

      You will be presented with a set of build options.  The most 
      important of these is the choice static or shared libraries.

      The default choice is to build shared libraries.  If you wish a 
      static library build, change BUILD_SHARED_LIBS from 
      "ON" to "OFF".

      Once you are satisfied with your build configuration click the 
      "Generate" button.  You may now exit CMake if you wish.

(3)  Build AIMLib
      To build AIMLib, you must start the Visual Studio C++ Compiler 
      (a.k.a. MSVC), and then from the MSVC menu, choose:
        File -> Open -> Project/Solution 

      Navigate to the build directory, select the file AIM.sln, 
      and then click "Open".

      Next, you must choose whether to build as Debug or Release.  
      The default is Debug.  If you wish Release mode, find the "Solution 
      Configurations" dropdown in the toolbar, and change the value 
      from "Debug" to "Release."

      Finally, build AIMLib from the MSVC menu:
        Build -> Build Solution


Packaging - Linux instructions
------------------------------
(1)  A binary package can be made by building AIM, and then running:
        make package
     This will make three binary targets:
        AIM-4.0.0-Linux.deb  AIM-4.0.0-Linux.tar.gz  AIM-4.0.0-Linux.rpm

(2)  The targets will match the architecture used for the build.
     So on a 64-bit machine, 64-bit targets will be built.

(3)  Creating the rpm package requires installation of the "rpmbuild" 
     executable.  On Debian/Ubuntu, this is done with "sudo apt-get rpm"; 
     on CentOS this is done with "sudo yum install rpm-build".

(4a) You can install the Debian package with the following command:
        sudo dpkg -i AIM-4.0.0-Linux.deb
     You can uninstall the debian package with the following command:
        sudo dpkg -r AIM
     Note that package dependency is not implemented, so the system 
     will need dependent packages (such as Xerces) installed as well.

(4b) You can install the CentOS rpm package with the following command:
        sudo rpm -i AIM-4.1.0-linux-x86_64.rpm
     You can uninstall the debian package with the following command:
        sudo rpm -i AIM-4.1.0-1.x86_64
     Note that package dependency is not implemented, so the system 
     will need dependent packages (such as Xerces) installed as well.

(4c) For either Debian/Ubuntu or CentOS, you will need to update the 
     shared library cache after installing the package.  Do this as:
        sudo ldconfig


Packaging - OSX instructions
----------------------------
This describes the "PackageMaker" method of making an installer.
Please be aware that OSX does not support uninstall of packages.

(1)  Install the "Auxiliary Tools for Xcode - Late July 2012" package
     (or possibly a newer version; this is the newest available as of 
     this writing).  To find the download, go to this link:
       https://developer.apple.com/downloads/index.action
     and search for "auxiliary tools" in the search box to the left.
     To install the auxiliary tools package, double click on the file
     in finder, then copy the PackageMaker icon onto the Applications 
     folder.

(2)  To build the package, run the following:
       make package
     This will create a file such as:
       AIM-4.1.0-osx-x86_64.dmg

(3)  To install the package, you must double click on the dmg file 
     in finder, and then double click on AIM-4.1.0-osx-x86_64.pkg
     within the mounted volume.

     The equivalent command line method is to mount the volume with:
       hdiutil mount AIM-4.1.0-osx-x86_64.dmg 
     and then running the installer with something like:
       sudo installer -package \
         /Volumes/AIM-4.1.0-osx-x86_64/AIM-4.1.0-osx-x86_64.pkg \
	 -target "/Volumes/Macintosh HD"
     but of course, this command will be customized to your machine.


Packaging - Windows instructions
--------------------------------
TBD
