
- s=start frame  e=end frame  t=text  y=style 
  p=position 
.


&type Text_Annotation {7}
  :s:1  :e:3  :t:4  :y:5  :p:6 ;

&type Shape_Annotation {5}
  :k:1  :s:2  :t:4  :d:5 ;

 
&type Circled_Text_Default {15}
  :w:1
  :background-color:2  :foreground-color:6
  :outline-color:10  :font-size:14  :border:15 ;

&type Circled_Text_Annotation {5}
  :s:1  :t:3  :p:4 ;

- s=start frame  i=id



&type Pause_Annotation {3}
  :s:1  :i:2  :t:3 ;


&type Annotation_Settings {6}
  :sa:1  :tr-smaller:3 :tr-larger:5  ;


&/


!/ Annotation_Settings
$sa#  1  1
$tr-smaller#  0  0
$tr-larger#  0  0  
/!
<+>


!/ Circled_Text_Default
$w: 12
$background-color# 50 50 210 255
$foreground-color# 150 50 10 255
$outline-color# 150 50 10 255
$font-size: 14
$border: 2
/!
<+>



!/ Pause_Annotation
$s: 10 
$i: p1
$t: 320
/!
<+>



!/ Text_Annotation
$s#  !p1  5
$e: ($dl) div @9
$t. 
|> 
<|| This video will present software-development ||> 
<|| possibilities that emerge when 360&#176;||> 
<|| photography and Virtual Reality tours (made ||> 
<|| possible by 360&#176; cameras) are presented ||>
<|| through standalone applications. ||>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;
<br> 
<|| The video reviews how embedded 3D tags ||>
<|| can be utilized for interoperation between an ||>
<|| OpenGL window and a host application ||>
<|| (the case-study presented here will involve ||>
<|| an embedded video being downloaded, but ||>
<|| many other forms of interop are also feasible ||>
<|| through similar programming methods). ||>
.
$y.
($large-box)
 color:rgb(20,110,137);;font-weight:normal;
 border:ridge red 4px;
 background-color:rgba(254,254,244,250);
.
$p# 3 4
/!
<+>




!/ Text_Annotation
$s#  !p1  160
$e: div @9
$t. 
|> 
<|| The video will also demonstrate how our ||> 
<|| platform permits 360&#176; tours to be recorded ||> 
<|| as videos, extending the capabilities of ||> 
<|| existing panoramic-photography engines, ||>
<|| such as Matterport.  ||>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;
<br>
<|| Then, the presentation will review how ||>
<|| videos can be converted to image-series ||>
<|| or sample images subject to Computer ||>
<|| Vision programming, and introduces our ||>
<|| novel image-representation format, which ||>
<|| is optimized for a specific class of ||>
<|| image-processing  algorithms. ||>
.
$y.
[$large-box]
.
$p# 5 6
/!
<+>


!/ Text_Annotation
$s# 30 +630
$e: div +span |> ($over-blue) rgba(200, 200, 240, 153)
$t. 
<| Exploring 3D Tours ... <|
.
$y.
($back2-yellow)
 color:rgba(0,10,37);;font-weight:bold;
 background-color:rgba(200,190,7,50);
.
$p# 45 170
/!
<+>



!/ Text_Annotation
$s# 700 1030
$e: div  +span |> [$over-blue]
$t. 
<| and Generating Tour Videos ...  <|
.
$y.
($back2-blue)
 color:rgba(0,10,37);;font-weight:bold;
 background-color:rgba(7,190,200,50);
.
$p# 29 123
/!
<+>

!/ Text_Annotation
$s# 1100 1360
$e: div +span  |> ($over-red) rgba(252,244,244,225)
$t. 
<| Interacting with Matterport Tags <| 
.
$y.
($back-red)
 color:rgba(50,30,107);font-size:10;font-weight:normal;
 background-color:rgba(200,105,137,50);
.
$p# 10 149
/!
<+>

!/ Pause_Annotation
$s: 1221 
$i: +auto
$t: 3
/!
<+>


!/ Pause_Annotation
$s: 1261 
$i: +auto
$t: 3
/!
<+>


!/ Pause_Annotation
$s: 1291 
$i: +auto
$t: 3
/!
<+>


!/ Text_Annotation
$s# 1425  +20
$e: div @8
$t. 
|>
<|| Interacting with 360 tours: ||>
<|| here, we download and view an ||> 
<|| embedded file; technically, ||>
<|| a file accessed via a web link ||> 
<|| embedded in a Matterport tag. ||> 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;
<br>
<|| Because YouTube videos have a ||>
<|| consistent web address pattern, ||>
<|| the software can translate the ||>
<|| embedded link to a static ||>
<|| resource  that can be ||>
<|| downloaded and then saved ||>
<|| to the user's computer. ||>
.
$y.
($back-white)
 color:rgb(10,120,137);font-size:10;font-weight:normal;
 background-color:rgba(250,255,252,253);
.
$p# 32 6
/!
<+>


!/ Pause_Annotation
$s: 1426 
$i: +auto
$t: 100
/!
<+>



!/ Pause_Annotation
$s: 1460 
$i: +auto
$t: 50
/!
<+>




!/ Text_Annotation
$s# 1669  1700
$e: div @8
$t.
|>
<|| This download demonstrates how a host ||>
<|| application can intercept and respond to HTTP ||> 
<|| requests embedded in 360&#176; tags. ||>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;
<br> 
<|| In our current example the URL identifiers link ||> 
<|| to an external (YouTube) address.  However, ||>
<|| because hyperref links need not map to an ||>
<|| actual web resource, tours could equally well ||>
<|| use in-tag URLs as tag-identifiers signaling ||>
<|| the user's current location in the virtual ||>
<|| tour.  In that case, the application could ||>
<|| present almost any kind of data, so long as ||> 
<|| it can be matched to specific tour-locations. ||>
.
$y.
[$back-white]
 color:rgb(120,10,37);font-size:10;font-weight:normal;
 background-color:rgba(250,255,250,253);
.
$p# 11 5
/!
<+>



!/ Pause_Annotation
$s: 1678
$i: +auto
$t: 120
/!
<+>




!/ Text_Annotation
$s# 1720  +130
$e: div
$t. 
<| A few seconds later ... <|
.
$y.
 color:rgb(120,10,37);font-size:10;font-weight:bold;
 background-color:rgba(210,255,200,205);
.
$p# 20 170
/!
<+>




!/ Text_Annotation
$s# 2028  2290  
$e: div +span 
$t. 
<| The download is complete, and we |>
<| can preview and/or save the video <| 
.
$y.
 color:rgb(120,10,37);font-size:10;font-weight:bold;
 background-color:rgba(210,255,200,205);
.
$p# 20 123
/!
<+>



!/ Pause_Annotation
$s: 2139
$i: +auto
$t: 30
/!
<+>

!/ Text_Annotation
$s# 2490  +290
$e: div
$t. 
<| Back to the tour ... <|
.
$y.
($back-gray)
 color:rgb(120,10,37);font-size:10;font-weight:bold;
 background-color:rgba(200,200,200,220);
.
$p# 50 130
/!
<+>


!/ Text_Annotation
$s# 2905  +120
$e: div +div
$t. 
||>
<|| Embedded-WebGL technology, such as ||>
<|| seen here &mdash; part of our data curation ||> 
<|| code &mdash; allows 3D tours to be captured ||>
<|| directly on video (without user ||> 
<|| intervention) from a GL window ||>
.
$y.
($back-plus-red)
 color:rgb(90,10,37);font-size:10;font-weight:bold;
 background-color:rgba(250,255,250,240);
.
$p# 33 102
/!
<+>



!/ Pause_Annotation
$s: 2940
$i: +auto
$t: 30
/!
<+>


!/ Text_Annotation
$s# 3090  3220
$e: div
$t. 
<| Saving the Tour as a Video <|
.
$y.
 color:rgba(50,10,137);font-size:10;font-weight:normal;
 background-color:rgba(250,255,200,205);
.
$p# 20 170
/!
<+>



!/ Text_Annotation
$s# 3273  3560
$e: div +div
$t. 
||>
<|| Direct video-capture is a feature ||>
<|| that is not supported by traditional ||> 
<|| 360&#176;-camera view engines ||>
.
$y.
[$back-plus-red]
.
$p# 57 97
/!
<+>


!/ Pause_Annotation
$s: 3394 
$i: +auto
$t: 30
/!
<+>



!/ Text_Annotation
$s# 3700  +210
$e: div +div
$t.
<| This demo shows the video feed |>
<| in preview mode, then saved <|
.
$y.
[$back-gray]
.
$p# 20 140
/!
<+>




!/ Text_Annotation
$s# 3995 +495
$e: div
$t. 
||>
<|| Recording a tour video enables architects, ||>
<|| engineers, or property managers to ||>
<|| progress through a building while ||>
<|| following a tour-sequence of their choice ||>
.
$y.
($silver-back)
 color:rgba(50,10,137);font-size:10;font-weight:normal;
 background-color:rgba(204,232,230,227);
.
$p# 49 90
/!
<+>


!/ Text_Annotation
$s# 4574 +220
$e: div +div
$t. 
<| The saved video file will be transferred |>
<| back to the main application window <|
.
$y.
[$back-gray]
.
$p# 33 150
/!
<+>




!/ Text_Annotation
$s# 5176 +660
$e: div
$t. 
|>
<| As one can see, the video-inside-this-video |>
<| is replaying footage shown earlier: |>
<| specifically, the application user is seen |>
<| reviewing their video-capture feed |>
.
$y.
 color:rgba(99,80,37);font-size:10;font-weight:normal;
 background-color:rgba(240,252,252,248);

.
$p# 28 90
/!
<+>




!/ Text_Annotation
$s# 5940 +310
$e: div
$t. |||>
<||| After the raw video is captured, |||>
<||| it can be marked up using a custom |||>
<||| annotation toolkit integrated |||>
<||| with image-editing capabilities |||>
.
$y.
[$silver-back]
.
$p# 36 90
/!
<+>



!/ Pause_Annotation
$s: 5950 
$i: +auto
$t: 40
/!
<+>




!/ Text_Annotation
$s# 6590 6645
$e: div +span  |> [$over-blue]
$t. 
<| Tracking Construction Progress <| 
.
$y.
[$back2-blue]
.
$p# 20 170
/!
<+>


!/ Pause_Annotation
$s: 6594 
$i: +auto
$t: 30
/!
<+>




!/ Text_Annotation
$s# 6714 7200
$e: div +div
$t. 
<| This demo shows two videos |> 
<| representing successive stages |>
<| of a construction project <|
.
$y.
 color:rgba(50,10,137);font-size:10;font-weight:normal;
 background-color:rgba(210,255,200,205);
.
$p# 12 170
/!
<+>



!/ Text_Annotation
$s# 7300  +430
$e: div +div
$t. 
<| While a video is being played, annotations |>
<| can be loaded from an external file <|
.
$y.
[$back-gray]
.
$p# 12 112
/!
<+>




!/ Text_Annotation
$s# 7798  +400
$e: div +div
$t. 
<| Here we take a freeze-frame as an image |>
<| and send it to the application&rsquo;s image-viewer <|
.
$y.
[$back-gray]
.
$p# 12 140
/!
<+>




!/ Text_Annotation
$s# 8220  +400 
$e: div +div
$t. 
<| We construct a demo overlay (in this case, an |>
<| arrow), and copy the annotation-code so that  |>
<| it could be used when marking up our video <|
.
$y.
[$back-gray]
.
$p# 19 143
/!
<+>



!/ Text_Annotation
$s# 9520  9724
$e: div @8
$t.
|>
<|| Our annotation code base includes parsers ||>
<|| for a custom graph-oriented markup language ||> 
<|| which can also be applied to tasks related ||>
<|| to annotating videos and image-series. ||>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;&#9135;
<br> 
<|| Apart from generating video overlays, ||> 
<|| this markup language offers a sophisticated ||>
<|| framework for generating PDF documents, ||>
<|| one which embeds linguistic information ||>
<|| in PDF outputs. <| With a suitable reader ||>
<|| (included as source code), PDF engines ||>
<|| can import this metadata to map sentence ||>
<|| and paragraph boundaries to on-screen  ||> 
<|| coordinates, as well as map discursive ||>
<|| elements such as tables, figures, or equations. ||>
.
$y.
[$back-white]
.
$p# 13 0
/!
<+>



!/ Pause_Annotation
$s: 9524 
$i: +auto
$t: 100
/!
<+>



!/ Text_Annotation
$s# 10312 10578
$e: div +span |> [$over-blue]
$t. 
<| More on Video Processing ... <|
.
$y.
[$back2-blue]
.
$p# 20 170
/!
<+>




!/ Text_Annotation
$s# 10620 +220
$e: div +div
$t. 
<| Here we pull an image from a video |>
<| of the same building, now completed <|
.
$y.
[$back-gray]
.
$p# 20 170
/!
<+>



!/ Text_Annotation
$s# 10900  +520
$e: div +div
$t. 
|>
<|| The freeze-frame is exported to the ||>
<|| main application window, where it can ||> 
<|| be edited, annotated, or analyzed ||>
<|| using algorithms obtained via a ||>
<|| built-in collection including OpenCV, ||>
<|| ITK, halide, and generic C++ resources ||> 
.
$y.
[$back-plus-red]
.
$p# 30 89
/!
<+>




!/ Pause_Annotation
$s: 10911
$i: +auto
$t: 40
/!
<+>


!/ Text_Annotation
$s# 11520 +290
$e: div
$t. 
|>
<| The single image could then be subject |>
<| to its own analysis, perhaps to set |>
<| parameters for image-processing algorithms |>
<| applied to sample pictures documenting |>
<| construction progress |>
.
$y.
[$back-gray]
.
$p# 12 120
/!
<+>



!/ Pause_Annotation
$s: 11630 
$i: +auto
$t: 60
/!
<+>




!/ Text_Annotation
$s# 12155  12233
$e: div
$t. 
||>
<|| Color-enhanced intermediate files are useful ||>
<|| for examining sucessive stages of an imaging ||>
<|| pipeline, even if they are not themselves part ||>
<|| of the analysis (that is, altered pictures such ||>
<|| as those viewed here are generated to ||>
<|| inform users of extracted analytic data, and ||>
<|| are not actually processed themselves as part ||>
<|| of a Computer Vision workflow) ||>
.
$y.
[$silver-back]
.
$p# 13 37
/!
<+>




!/ Pause_Annotation
$s: 12158 
$i: +auto
$t: 110
/!
<+>





!/ Text_Annotation
$s# 12333 +170
$e: div +div
$t. 
<| Here we visualize a preliminary analysis |>
<| derived from edge-detection techniques |>
<| based on toroidal color models <|
.
$y.
[$back-gray]
.
$p# 12 170
/!
<+>


!/ Pause_Annotation
$s: 12340 
$i: +auto
$t: 100
/!
<+>



!/ Text_Annotation
$s# 12600 +180
$e: div +div
$t. 
<| Further analysis can proceed via the XCSD |>
<| image format, shown on the next video <|
.
$y.
 color:rgb(120,10,37);font-size:10;font-weight:bold;
 background-color:rgba(210,255,200,205);
.
$p# 12 170
/!
<+>



!/ Pause_Annotation
$s: 12601 
$i: +auto
$t: 30
/!
<+>



!/ Pause_Annotation
$s: 12832 
$i: +auto
$t: 10
/!
<+>


!/ Text_Annotation
$s# 12830 12855
$e: div  +span |> ($over-blue) rgba(200, 200, 240, 153)
$t. 
<| Importing Images  <|
.
$y.
($back2-blue)
 color:rgba(0,10,37);;font-weight:bold;
 background-color:rgba(7,190,200,50);
.
$p# 29 123
/!
<+>



/&





